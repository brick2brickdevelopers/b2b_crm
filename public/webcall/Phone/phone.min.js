const appversion = "0.2.4",
    sipjsversion = "0.20.0",
    availableLang = ["ja", "zh-hans", "zh", "ru", "tr", "nl", "es", "de"];
let loadAlternateLang = "1" == getDbItem("loadAlternateLang", "0"),
    profileUserID = user.id,
    profileUser = user.id,
    profileName = user.name,
    wssServer = "sip.cleverstack.in",
    WebSocketPort = "7443",
    ServerPath = "/",
    SipUsername = user.id,
    SipPassword = user.xid,
    TransportConnectionTimeout = parseInt(getDbItem("TransportConnectionTimeout", 15)),
    TransportReconnectionAttempts = parseInt(getDbItem("TransportReconnectionAttempts", 99)),
    TransportReconnectionTimeout = parseInt(getDbItem("TransportReconnectionTimeout", 15)),
    VoiceMailSubscribe = "1" == getDbItem("VoiceMailSubscribe", "1"),
    userAgentStr = getDbItem("UserAgentStr", "Browser Phone 0.2.4 (SIPJS - 0.20.0)"),
    hostingPrefex = user.hostingPrefex + "/",
    RegisterExpires = parseInt(getDbItem("RegisterExpires", 300)),
    WssInTransport = "1" == getDbItem("WssInTransport", "1"),
    IpInContact = "1" == getDbItem("IpInContact", "1"),
    IceStunServerJson = getDbItem("IceStunServerJson", ""),
    IceStunCheckTimeout = parseInt(getDbItem("IceStunCheckTimeout", 500)),
    AutoAnswerEnabled = !1,
    DoNotDisturbEnabled = "1" == getDbItem("DoNotDisturbEnabled", "0"),
    CallWaitingEnabled = !1,
    RecordAllCalls = "1" == getDbItem("RecordAllCalls", "0"),
    StartVideoFullScreen = "1" == getDbItem("StartVideoFullScreen", "1"),
    ShowCallAnswerWindow = "1" == getDbItem("ShowCallAnswerWindow", "0"),
    SelectRingingLine = "1" == getDbItem("SelectRingingLine", "1"),
    AutoGainControl = "1" == getDbItem("AutoGainControl", "1"),
    EchoCancellation = "1" == getDbItem("EchoCancellation", "1"),
    NoiseSuppression = "1" == getDbItem("NoiseSuppression", "1"),
    MirrorVideo = getDbItem("VideoOrientation", "rotateY(180deg)"),
    maxFrameRate = getDbItem("FrameRate", ""),
    videoHeight = getDbItem("VideoHeight", ""),
    MaxVideoBandwidth = parseInt(getDbItem("MaxVideoBandwidth", "128")),
    videoAspectRatio = getDbItem("AspectRatio", ""),
    NotificationsActive = "1" == getDbItem("Notifications", "0"),
    StreamBuffer = parseInt(getDbItem("StreamBuffer", 50)),
    MaxDataStoreDays = parseInt(getDbItem("MaxDataStoreDays", 0)),
    PosterJpegQuality = parseFloat(getDbItem("PosterJpegQuality", .6)),
    VideoResampleSize = getDbItem("VideoResampleSize", "HD"),
    RecordingVideoSize = getDbItem("RecordingVideoSize", "HD"),
    RecordingVideoFps = parseInt(getDbItem("RecordingVideoFps", 12)),
    RecordingLayout = getDbItem("RecordingLayout", "them-pnp"),
    DidLength = parseInt(getDbItem("DidLength", 6)),
    MaxDidLength = parseInt(getDbItem("MaxDidLength", 16)),
    DisplayDateFormat = getDbItem("DateFormat", "YYYY-MM-DD"),
    DisplayTimeFormat = getDbItem("TimeFormat", "h:mm:ss A"),
    Language = getDbItem("Language", "auto"),
    EnableTextMessaging = "1" == getDbItem("EnableTextMessaging", "1"),
    DisableFreeDial = "1" == getDbItem("DisableFreeDial", "0"),
    DisableBuddies = "1" == getDbItem("DisableBuddies", "0"),
    EnableTransfer = "1" == getDbItem("EnableTransfer", "1"),
    EnableConference = "1" == getDbItem("EnableConference", "1"),
    AutoAnswerPolicy = getDbItem("AutoAnswerPolicy", "allow"),
    DoNotDisturbPolicy = getDbItem("DoNotDisturbPolicy", "allow"),
    CallWaitingPolicy = getDbItem("CallWaitingPolicy", "allow"),
    CallRecordingPolicy = getDbItem("CallRecordingPolicy", "allow"),
    IntercomPolicy = getDbItem("IntercomPolicy", "enabled"),
    EnableAccountSettings = !1,
    EnableAppearanceSettings = "1" == getDbItem("EnableAppearanceSettings", "1"),
    EnableNotificationSettings = "1" == getDbItem("EnableNotificationSettings", "1"),
    EnableAlphanumericDial = "1" == getDbItem("EnableAlphanumericDial", "0"),
    EnableVideoCalling = !1,
    ChatEngine = getDbItem("ChatEngine", "SIMPLE"),
    XmppDomain = getDbItem("XmppDomain", ""),
    XmppServer = getDbItem("XmppServer", ""),
    XmppWebsocketPort = getDbItem("XmppWebsocketPort", ""),
    XmppWebsocketPath = getDbItem("XmppWebsocketPath", ""),
    XmppRealm = getDbItem("XmppRealm", ""),
    XmppRealmSeperator = getDbItem("XmppRealmSeperator", "-"),
    XmppChatGroupService = getDbItem("XmppChatGroupService", "conference"),
    EnableSendFiles = !1,
    EnableSendImages = !1,
    EnableAudioRecording = !1,
    EnableVideoRecording = !1,
    EnableSms = !1,
    EnableFax = !1,
    EnableEmail = !1,
    localDB = window.localStorage,
    userAgent = null,
    CanvasCollection = [],
    Buddies = [],
    selectedBuddy = null,
    selectedLine = null,
    windowObj = null,
    alertObj = null,
    confirmObj = null,
    promptObj = null,
    menuObj = null,
    HasVideoDevice = !1,
    HasAudioDevice = !1,
    HasSpeakerDevice = !1,
    AudioinputDevices = [],
    VideoinputDevices = [],
    SpeakerDevices = [],
    Lines = [],
    lang = {},
    audioBlobs = {},
    newLineNumber = 1;

function uID() { return Date.now() + Math.floor(1e4 * Math.random()).toString(16).toUpperCase() }

function utcDateNow() { return moment().utc().format("YYYY-MM-DD HH:mm:ss UTC") }

function getDbItem(e, t) { var n = window.localStorage; return null != n.getItem(e) ? n.getItem(e) : t }

function getAudioSrcID() { var e = localDB.getItem("AudioSrcId"); return null != e ? e : "default" }

function getAudioOutputID() { var e = localDB.getItem("AudioOutputId"); return null != e ? e : "default" }

function getVideoSrcID() { var e = localDB.getItem("VideoSrcId"); return null != e ? e : "default" }

function getRingerOutputID() { var e = localDB.getItem("RingOutputId"); return null != e ? e : "default" }

function formatDuration(e) { var t, n = Math.floor(parseFloat(e)); return n < 0 ? n : n >= 0 && n < 60 ? n + " " + (n > 1 ? lang.seconds_plural : lang.second_single) : n >= 60 && n < 3600 ? (t = moment.duration(n, "seconds")).minutes() + " " + (t.minutes() > 1 ? lang.minutes_plural : lang.minute_single) + " " + t.seconds() + " " + (t.seconds() > 1 ? lang.seconds_plural : lang.second_single) : n >= 3600 && n < 86400 ? (t = moment.duration(n, "seconds")).hours() + " " + (t.hours() > 1 ? lang.hours_plural : lang.hour_single) + " " + t.minutes() + " " + (t.minutes() > 1 ? lang.minutes_plural : lang.minute_single) + " " + t.seconds() + " " + (t.seconds() > 1 ? lang.seconds_plural : lang.second_single) : void 0 }

function formatShortDuration(e) { var t, n = Math.floor(parseFloat(e)); return n < 0 ? n : n >= 0 && n < 60 ? "00:" + (n > 9 ? n : "0" + n) : n >= 60 && n < 3600 ? ((t = moment.duration(n, "seconds")).minutes() > 9 ? t.minutes() : "0" + t.minutes()) + ":" + (t.seconds() > 9 ? t.seconds() : "0" + t.seconds()) : n >= 3600 && n < 86400 ? ((t = moment.duration(n, "seconds")).hours() > 9 ? t.hours() : "0" + t.hours()) + ":" + (t.minutes() > 9 ? t.minutes() : "0" + t.minutes()) + ":" + (t.seconds() > 9 ? t.seconds() : "0" + t.seconds()) : void 0 }

function formatBytes(e, t) {
    if (0 === e) return "0 " + lang.bytes;
    var n = t && t >= 0 ? t : 2,
        i = [lang.bytes, lang.kb, lang.mb, lang.gb, lang.tb, lang.pb, lang.eb, lang.zb, lang.yb],
        a = Math.floor(Math.log(e) / Math.log(1024));
    return parseFloat((e / Math.pow(1024, a)).toFixed(n)) + " " + i[a]
}

function UserLocale() { var e = window.navigator.userLanguage || window.navigator.language; return langtag = e.split("-"), 1 == langtag.length ? "" : 2 == langtag.length ? langtag[1].toLowerCase() : langtag.length >= 3 ? langtag[1].toLowerCase() : void 0 }

function GetAlternateLanguage() {
    var e = window.navigator.userLanguage || window.navigator.language;
    if ("auto" != Language && (e = Language), "en" == (e = e.toLowerCase()) || 0 == e.indexOf("en-")) return "";
    for (l = 0; l < availableLang.length; l++)
        if (0 == e.indexOf(availableLang[l].toLowerCase())) return moment.locale(e), availableLang[l].toLowerCase();
    return ""
}

function getFilter(e, t) { return -1 != e.indexOf(",", e.indexOf(t + ": ") + t.length + 2) ? e.substring(e.indexOf(t + ": ") + t.length + 2, e.indexOf(",", e.indexOf(t + ": ") + t.length + 2)) : e.substring(e.indexOf(t + ": ") + t.length + 2) }

function base64toBlob(e, t) {
    e.indexOf(!0) && (e = e.split(",")[1]);
    for (var n = atob(e), i = Math.ceil(n.length / 1024), a = new Array(i), o = 0; o < i; ++o) {
        for (var s = 1024 * o, l = Math.min(s + 1024, n.length), r = new Array(l - s), d = s, c = 0; d < l; ++c, ++d) r[c] = n[d].charCodeAt(0);
        a[o] = new Uint8Array(r)
    }
    return new Blob(a, { type: t })
}

function MakeDataArray(e, t) { for (var n = new Array(t), i = 0; i < n.length; i++) n[i] = e; return n }

function UpdateUI() {
    $(window).outerWidth() < 920 ? null == selectedBuddy & null == selectedLine ? ($("#rightContent").hide(), $("#leftContent").css("width", "100%"), $("#leftContent").show()) : ($("#rightContent").css("margin-left", "0px"), $("#rightContent").show(), $("#leftContent").hide(), null != selectedBuddy && updateScroll(selectedBuddy.identity)) : null == selectedBuddy & null == selectedLine ? ($("#leftContent").css("width", "100%"), $("#rightContent").css("margin-left", "0px"), $("#leftContent").show(), $("#rightContent").hide()) : ($("#leftContent").css("width", "320px"), $("#rightContent").css("margin-left", "320px"), $("#leftContent").show(), $("#rightContent").show(), null != selectedBuddy && updateScroll(selectedBuddy.identity));
    for (var e = 0; e < Lines.length; e++) updateLineScroll(Lines[e].LineNumber), RedrawStage(Lines[e].LineNumber, !1);
    HidePopup()
}

function AddSomeoneWindow(e) {
    ShowContacts(), $("#myContacts").hide(), $("#actionArea").empty();
    var t = '<div style="text-align:right"><button onclick="ShowContacts()"><i class="fa fa-close"></i></button></div>';
    t += "<div border=0 class=UiSideField>", t += "<div class=UiText>" + lang.full_name + ":</div>", t += "<div><input id=AddSomeone_Name class=UiInputText type=text placeholder='" + lang.eg_full_name + "'></div>", t += "<div><input type=checkbox id=AddSomeone_Dnd><label for=AddSomeone_Dnd>" + lang.allow_calls_on_dnd + "</label></div>", t += '<ul style="list-style-type:none">', t += "<li><input type=radio name=buddyType id=type_exten checked><label for=type_exten>" + lang.basic_extension + "</label>", "XMPP" == ChatEngine && (t += "<li><input type=radio name=buddyType id=type_xmpp><label for=type_xmpp>" + lang.extension_including_xmpp + "</label>"), t += "<li><input type=radio name=buddyType id=type_contact><label for=type_contact>" + lang.addressbook_contact + "</label>", t += "</ul>", t += "<div id=RowDescription>", t += "<div class=UiText>" + lang.title_description + ":</div>", t += "<div><input id=AddSomeone_Desc class=UiInputText type=text placeholder='" + lang.eg_general_manager + "'></div>", t += "</div>", t += "<div id=RowExtension>", t += "<div class=UiText>" + lang.internal_subscribe_extension + ":</div>", t += "<div><input id=AddSomeone_Exten class=UiInputText type=text placeholder='" + lang.eg_internal_subscribe_extension + "'></div>", t += "<div><input type=checkbox id=AddSomeone_Subscribe checked><label for=AddSomeone_Subscribe>" + lang.subscribe_to_dev_state + "</label></div>", t += "</div>", t += "<div id=RowMobileNumber>", t += "<div class=UiText>" + lang.mobile_number + ":</div>", t += "<div><input id=AddSomeone_Mobile class=UiInputText type=text placeholder='" + lang.eg_mobile_number + "'></div>", t += "</div>", t += "<div id=RowEmail>", t += "<div class=UiText>" + lang.email + ":</div>", t += "<div><input id=AddSomeone_Email class=UiInputText type=text placeholder='" + lang.eg_email + "'></div>", t += "</div>", t += "<div id=RowContact1>", t += "<div class=UiText>" + lang.contact_number_1 + ":</div>", t += "<div><input id=AddSomeone_Num1 class=UiInputText type=text placeholder='" + lang.eg_contact_number_1 + "'></div>", t += "</div>", t += "<div id=RowContact2>", t += "<div class=UiText>" + lang.contact_number_2 + ":</div>", t += "<div><input id=AddSomeone_Num2 class=UiInputText type=text placeholder='" + lang.eg_contact_number_2 + "'></div>", t += "</div>", t += "</div>", t += "<div class=UiWindowButtonBar id=ButtonBar></div>", $("#actionArea").html(t);
    var n = [];
    n.push({
        text: lang.add,
        action: function() {
            var e = "extension";
            if ($("#type_exten").is(":checked") ? e = "extension" : $("#type_xmpp").is(":checked") ? e = "xmpp" : $("#type_contact").is(":checked") && (e = "contact"), "" != $("#AddSomeone_Name").val() && ("extension" != e && "xmpp" != e || "" != $("#AddSomeone_Exten").val())) {
                var t = JSON.parse(localDB.getItem(profileUserID + "-Buddies"));
                null == t && (t = InitUserBuddies());
                var n = null;
                if ("extension" == e) {
                    var i = uID(),
                        a = utcDateNow();
                    t.DataCollection.push({ Type: "extension", LastActivity: a, ExtensionNumber: $("#AddSomeone_Exten").val(), MobileNumber: $("#AddSomeone_Mobile").val(), ContactNumber1: $("#AddSomeone_Num1").val(), ContactNumber2: $("#AddSomeone_Num2").val(), uID: i, cID: null, gID: null, jid: null, DisplayName: $("#AddSomeone_Name").val(), Description: $("#AddSomeone_Desc").val(), Email: $("#AddSomeone_Email").val(), MemberCount: 0, EnableDuringDnd: $("#AddSomeone_Dnd").is(":checked"), Subscribe: $("#AddSomeone_Subscribe").is(":checked") }), AddBuddy(n = new Buddy("extension", i, $("#AddSomeone_Name").val(), $("#AddSomeone_Exten").val(), $("#AddSomeone_Mobile").val(), $("#AddSomeone_Num1").val(), $("#AddSomeone_Num2").val(), a, $("#AddSomeone_Desc").val(), $("#AddSomeone_Email").val(), o, $("#AddSomeone_Dnd").is(":checked"), $("#AddSomeone_Subscribe").is(":checked")), !1, !1, $("#AddSomeone_Subscribe").is(":checked"))
                }
                if ("xmpp" == e) { i = uID(), a = utcDateNow(); var o = $("#AddSomeone_Exten").val() + "@" + XmppDomain; "" != XmppRealm && "" != XmppRealmSeperator && (o = XmppRealm + "" + XmppRealmSeperator + o), t.DataCollection.push({ Type: "xmpp", LastActivity: a, ExtensionNumber: $("#AddSomeone_Exten").val(), MobileNumber: null, ContactNumber1: null, ContactNumber2: null, uID: i, cID: null, gID: null, jid: o, DisplayName: $("#AddSomeone_Name").val(), Description: null, Email: null, MemberCount: 0, EnableDuringDnd: $("#AddSomeone_Dnd").is(":checked"), Subscribe: $("#AddSomeone_Subscribe").is(":checked") }), XmppAddBuddyToRoster(n = new Buddy("xmpp", i, $("#AddSomeone_Name").val(), $("#AddSomeone_Exten").val(), "", "", "", a, "", "", o, $("#AddSomeone_Dnd").is(":checked"), $("#AddSomeone_Subscribe").is(":checked"))), AddBuddy(n, !1, !1, $("#AddSomeone_Subscribe").is(":checked")) }
                if ("contact" == e) {
                    i = uID(), a = utcDateNow();
                    t.DataCollection.push({ Type: "contact", LastActivity: a, ExtensionNumber: "", MobileNumber: $("#AddSomeone_Mobile").val(), ContactNumber1: $("#AddSomeone_Num1").val(), ContactNumber2: $("#AddSomeone_Num2").val(), uID: null, cID: i, gID: null, jid: null, DisplayName: $("#AddSomeone_Name").val(), Description: $("#AddSomeone_Desc").val(), Email: $("#AddSomeone_Email").val(), MemberCount: 0, EnableDuringDnd: $("#AddSomeone_Dnd").is(":checked"), Subscribe: !1 }), AddBuddy(n = new Buddy("contact", i, $("#AddSomeone_Name").val(), "", $("#AddSomeone_Mobile").val(), $("#AddSomeone_Num1").val(), $("#AddSomeone_Num2").val(), a, $("#AddSomeone_Desc").val(), $("#AddSomeone_Email").val(), o, $("#AddSomeone_Dnd").is(":checked"), !1), !1, !1, !1)
                }
                t.TotalRows = t.DataCollection.length, localDB.setItem(profileUserID + "-Buddies", JSON.stringify(t)), UpdateBuddyList(), ShowContacts()
            }
        }
    }), n.push({ text: lang.cancel, action: function() { ShowContacts() } }), $.each(n, function(e, t) {
        var n = $("<button>" + t.text + "</button>").click(t.action);
        $("#ButtonBar").append(n)
    }), $("#actionArea").show(), $("#AddSomeone_Name").focus(), window.setTimeout(function() { $("#type_exten").change(function() { $("#type_exten").is(":checked") && ($("#RowDescription").show(), $("#RowExtension").show(), $("#RowMobileNumber").show(), $("#RowEmail").show(), $("#RowContact1").show(), $("#RowContact2").show()) }), $("#type_xmpp").change(function() { $("#type_xmpp").is(":checked") && ($("#RowDescription").hide(), $("#RowExtension").show(), $("#RowMobileNumber").hide(), $("#RowEmail").hide(), $("#RowContact1").hide(), $("#RowContact2").hide()) }), $("#type_contact").change(function() { $("#type_contact").is(":checked") && ($("#RowDescription").show(), $("#RowExtension").hide(), $("#RowMobileNumber").show(), $("#RowEmail").show(), $("#RowContact1").show(), $("#RowContact2").show()) }) }, 0)
}

function CreateGroupWindow() {}

function checkNotificationPromise() { try { Notification.requestPermission().then() } catch (e) { return !1 } return !0 }

function HandleNotifyPermission(e) { "granted" == e || Alert(lang.alert_notification_permission, lang.permission, function() { console.log("Attempting to uncheck the checkbox..."), $("#Settings_Notifications").prop("checked", !1) }) }

function SetStatusWindow() {
    HidePopup();
    OpenWindow("<div class=UiWindowField><div><input type=text id=presence_text class=UiInputText></div></div>", lang.set_status, 180, 350, !1, !1, "OK", function() {
        var e = $("#presence_text").val();
        localDB.setItem("XmppLastPresence", "chat"), localDB.setItem("XmppLastStatus", e), XmppSetMyPresence("chat", e), CloseWindow()
    }, "Cancel", function() { CloseWindow() }, function() { $("#presence_text").val(getDbItem("XmppLastStatus", "")) })
}

function InitUi() {
    var e = $("#Phone");
    e.empty(), e.attr("class", "pageContainer col-md-12 ");
    var t = $("<div/>");
    t.attr("id", "leftContent"), t.attr("style", "float:left; height: 1280px; width:100%");
    var n = '<table style="height:100%; width:100%" cellspacing=5 cellpadding=0>';
    n += '<tr><td class=streamSection style="height: 92px">', n += "<div class=profileContainer>", n += '<div class=contact id=UserProfile style="cursor: default; margin-bottom:5px;">', n += "<div id=UserProfilePic class=buddyIcon></div>", n += '<span class=settingsMenu><button id=SettingsMenu><i class="fa fa-cogs"></i></button></span>', n += '<div class=contactNameText style="margin-right: 0px;">', n += '<span id=dereglink class=dotOnline style="display:none"></span>', n += '<span id=WebRtcFailed class=dotFailed style="display:none"></span>', n += "<span id=reglink class=dotOffline></span>", n += " <span id=UserDID></span> - <span id=UserCallID></span>", n += "</div>", n += "<div id=regStatus class=presenceText>&nbsp;</div>", n += "</div>", n += '<div style="margin-left:5px; margin-right:5px; margin-bottom: 5px; border-top:1px solid #cbcbcb"></div>', n += '<div style="padding-left:5px; padding-right:5px">', n += '<button id=BtnFindBuddy><i class="fa fa-search"></i></button>', n += '<span id=divFindBuddy class=searchClean style="display:none"><INPUT id=txtFindBuddy type=text autocomplete=none style="width:120px;"></span>', n += '<button id=BtnFreeDial><i class="fa fa-phone"></i></button>', n += "</div>", n += "</div>", n += "</td></tr>", n += "<tr><td class=streamSection>", n += '<div id=myContacts class="contactArea cleanScroller"></div>', n += '<div id=actionArea style="display:none" class="contactArea cleanScroller"></div>', n += "</td></tr>", n += "</table>", t.html(n);
    var i = $("<div/>");
    i.attr("id", "rightContent"), i.attr("style", "margin-left: 320px; height: 100vh"), e.append(t), e.append(i), 1 == DisableFreeDial && $("#BtnFreeDial").hide(), 1 == DisableBuddies && ($("#BtnFindBuddy").hide(), $("#BtnAddSomeone").hide(), $("#BtnFreeDial").show()), $("#BtnCreateGroup").hide(), $("#UserDID").html(profileUser), $("#UserCallID").html(profileName), $("#UserProfilePic").css("background-image", "url('" + getPicture("profilePicture") + "')"), $("#BtnFindBuddy").attr("title", lang.find_someone), $("#BtnFindBuddy").on("click", function(e) { $("#divFindBuddy").toggle() }), $("#txtFindBuddy").attr("placeholder", lang.find_someone), $("#txtFindBuddy").on("keyup", function(e) { UpdateBuddyList() }), $("#BtnFreeDial").attr("title", lang.call), $("#BtnFreeDial").on("click", function(e) { ShowDial() }), $("#BtnCreateGroup").attr("title", lang.create_group), $("#BtnCreateGroup").on("click", function(e) { CreateGroupWindow() }), $("#SettingsMenu").attr("title", lang.configure_extension), $("#SettingsMenu").on("click", function(e) { ShowMyProfileMenu(this) }), $("#reglink").on("click", Register), $("#dereglink").on("click", Unregister), $("#WebRtcFailed").on("click", function() { Confirm(lang.error_connecting_web_socket, lang.web_socket_error, function() { window.open("https://" + wssServer + ":" + WebSocketPort + "/httpstatus") }, null) }), UpdateUI(), null != profileUserID ? (PopulateBuddyList(), null != localDB.getItem("SelectedBuddy") && (console.log("Selecting previously selected buddy...", localDB.getItem("SelectedBuddy")), SelectBuddy(localDB.getItem("SelectedBuddy")), UpdateUI()), localDB.setItem("WelcomeScreenAccept", "yes"), PreloadAudioFiles(), CreateUserAgent()) : ShowMyProfile()
}

function ShowMyProfileMenu(e) {
    var t = [];
    t.push({ icon: "fa fa-refresh", text: lang.refresh_registration, value: 1 }), t.push({ icon: "fa fa-wrench", text: lang.configure_extension, value: 2 }), t.push({ icon: null, text: "-" }), t.push({ icon: null, text: "-" }), 1 == DoNotDisturbEnabled ? t.push({ icon: "fa fa-ban", text: lang.do_no_disturb + ' <i class="fa fa-check" style="float: right; line-height: 18px;"></i>', value: 6 }) : t.push({ icon: "fa fa-ban", text: lang.do_no_disturb, value: 6 }), "XMPP" == ChatEngine && (t.push({ icon: null, text: "-" }), t.push({ icon: "fa fa-comments", text: lang.set_status, value: 9 })), PopupMenu(e, {
        selectEvent: function(e, t) {
            var n = t.item.attr("value");
            HidePopup(), "1" == n && RefreshRegistration(), "2" == n && ShowMyProfile(), "3" == n && AddSomeoneWindow(), "4" == n && CreateGroupWindow(), "5" == n && ToggleAutoAnswer(), "6" == n && ToggleDoNoDisturb(), "7" == n && ToggleCallWaiting(), "8" == n && ToggleRecordAllCalls(), "9" == n && SetStatusWindow()
        },
        createEvent: null,
        autoFocus: !0,
        items: t
    })
}

function PreloadAudioFiles() {
    audioBlobs.Alert = { file: "Alert.mp3", url: hostingPrefex + "media/Alert.mp3" }, audioBlobs.Ringtone = { file: "Ringtone_1.mp3", url: hostingPrefex + "media/Ringtone_1.mp3" }, audioBlobs.speech_orig = { file: "speech_orig.mp3", url: hostingPrefex + "media/speech_orig.mp3" }, audioBlobs.Busy_UK = { file: "Tone_Busy-UK.mp3", url: hostingPrefex + "media/Tone_Busy-UK.mp3" }, audioBlobs.Busy_US = { file: "Tone_Busy-US.mp3", url: hostingPrefex + "media/Tone_Busy-US.mp3" }, audioBlobs.CallWaiting = { file: "Tone_CallWaiting.mp3", url: hostingPrefex + "media/Tone_CallWaiting.mp3" }, audioBlobs.Congestion_UK = { file: "Tone_Congestion-UK.mp3", url: hostingPrefex + "media/Tone_Congestion-UK.mp3" }, audioBlobs.Congestion_US = { file: "Tone_Congestion-US.mp3", url: hostingPrefex + "media/Tone_Congestion-US.mp3" }, audioBlobs.EarlyMedia_Australia = { file: "Tone_EarlyMedia-Australia.mp3", url: hostingPrefex + "media/Tone_EarlyMedia-Australia.mp3" }, audioBlobs.EarlyMedia_European = { file: "Tone_EarlyMedia-European.mp3", url: hostingPrefex + "media/Tone_EarlyMedia-European.mp3" }, audioBlobs.EarlyMedia_Japan = { file: "Tone_EarlyMedia-Japan.mp3", url: hostingPrefex + "media/Tone_EarlyMedia-Japan.mp3" }, audioBlobs.EarlyMedia_UK = { file: "Tone_EarlyMedia-UK.mp3", url: hostingPrefex + "media/Tone_EarlyMedia-UK.mp3" }, audioBlobs.EarlyMedia_US = { file: "Tone_EarlyMedia-US.mp3", url: hostingPrefex + "media/Tone_EarlyMedia-US.mp3" }, $.each(audioBlobs, function(e, t) {
        var n = new XMLHttpRequest;
        n.open("GET", t.url, !0), n.responseType = "blob", n.onload = function(e) {
            var i = new FileReader;
            i.readAsDataURL(n.response), i.onload = function() { t.blob = i.result }
        }, n.send()
    })
}

function CreateUserAgent() {
    var e = { uri: SIP.UserAgent.makeURI("sip:" + SipUsername + "@" + wssServer), transportOptions: { server: "wss://" + wssServer + ":" + WebSocketPort + ServerPath, traceSip: !1, connectionTimeout: TransportConnectionTimeout }, sessionDescriptionHandlerFactoryOptions: { peerConnectionConfiguration: {}, iceGatheringTimeout: IceStunCheckTimeout }, displayName: profileName, authorizationUsername: SipUsername, authorizationPassword: SipPassword, contactParams: { transport: "wss" }, hackIpInContact: IpInContact, userAgentString: userAgentStr, autoStart: !1, autoStop: !0, register: !1, noAnswerTimeout: 120, delegate: { onInvite: function(e) { ReceiveCall(e) }, onMessage: function(e) { ReceiveOutOfDialogMessage(e) } } };
    "" != IceStunServerJson && (e.sessionDescriptionHandlerFactoryOptions.peerConnectionConfiguration.iceServers = JSON.parse(IceStunServerJson)), (userAgent = new SIP.UserAgent(e)).isRegistered = function() { return userAgent && userAgent.registerer && userAgent.registerer.state == SIP.RegistererState.Registered }, userAgent.sessions = userAgent._sessions, userAgent.registrationCompleted = !1, userAgent.transport.ReconnectionAttempts = TransportReconnectionAttempts, userAgent.transport.onConnect = function() { onTransportConnected() }, userAgent.transport.onDisconnect = function(e) { e ? onTransportConnectError(e) : onTransportDisconnected() };
    var t = { expires: RegisterExpires };
    userAgent.registerer = new SIP.Registerer(userAgent, t), userAgent.registerer.stateChange.addListener(function(e) {
        switch (e) {
            case SIP.RegistererState.Initial:
                break;
            case SIP.RegistererState.Registered:
                onRegistered();
                break;
            case SIP.RegistererState.Unregistered:
                onUnregistered();
                break;
            case SIP.RegistererState.Terminated:
        }
    }), $("#regStatus").html(lang.connecting_to_web_socket), userAgent.start().catch(function(e) { onTransportConnectError(e) })
}

function onTransportConnected() { $("#regStatus").html(lang.connected_to_web_socket), $("#WebRtcFailed").hide(), userAgent.transport.ReconnectionAttempts = TransportReconnectionAttempts, CloseWindow(!0), window.setTimeout(function() { Register() }, 500) }

function onTransportConnectError(e) { userAgent.isReRegister = !1, userAgent && userAgent.registerer && userAgent.registerer.state == SIP.RegistererState.Registered && userAgent.registerer.unregister().catch(function() {}), userAgent.isReRegister = !1, $("#regStatus").html(lang.web_socket_error), $("#WebRtcFailed").show(), userAgent.transport.ReconnectionAttempts <= 0 || (window.setTimeout(function() { userAgent && userAgent.transport && userAgent.transport.state == SIP.TransportState.Disconnected && userAgent.reconnect().catch(function(e) { console.warn("Failed to reconnect", e), onTransportConnectError(e) }) }, 1e3 * TransportReconnectionTimeout), console.log("Waiting to Re-connect...", TransportReconnectionTimeout, "Attempt remaining", userAgent.transport.ReconnectionAttempts), userAgent.transport.ReconnectionAttempts = userAgent.transport.ReconnectionAttempts - 1, "undefined" != typeof web_hook_on_transportError && web_hook_on_transportError(userAgent.transport, userAgent)) }

function onTransportDisconnected() { console.log("Disconnected from Web Socket!"), $("#regStatus").html(lang.disconnected_from_web_socket), userAgent && userAgent.registerer && userAgent.registerer.state == SIP.RegistererState.Registered && userAgent.registerer.unregister().catch(function() {}), userAgent.isReRegister = !1 }

function Register() {
    if (null != userAgent && !userAgent.isRegistered()) {
        var e = { requestDelegate: { onReject: function(e) { onRegisterFailed(e.message.reasonPhrase, e.message.statusCode) } } };
        $("#regStatus").html(lang.sending_registration), userAgent.registerer.register(e)
    }
}

function Unregister() {
    if (null != userAgent && userAgent.isRegistered()) {
        console.log("Unsubscribing..."), $("#regStatus").html(lang.unsubscribing);
        try { UnsubscribeAll() } catch (e) {}
        console.log("Disconnecting..."), $("#regStatus").html(lang.disconnecting), userAgent.registerer.unregister(), userAgent.isReRegister = !1
    }
}

function onRegistered() { userAgent.registrationCompleted = !0, userAgent.isReRegister ? console.log("ReRegistered!") : ($("#reglink").hide(), $("#dereglink").show(), (DoNotDisturbEnabled || "enabled" == DoNotDisturbPolicy) && $("#dereglink").attr("class", "dotDoNotDisturb"), window.setTimeout(function() { SubscribeAll() }, 500), $("#regStatus").html(lang.registered), CloseWindow(!0), "XMPP" == ChatEngine && reconnectXmpp(), "undefined" != typeof web_hook_on_register && web_hook_on_register(userAgent)), userAgent.isReRegister = !0 }

function onRegisterFailed(e, t) { console.log("Registration Failed: " + e), $("#regStatus").html(lang.registration_failed), $("#reglink").show(), $("#dereglink").hide(), Alert(lang.registration_failed + ":" + e, lang.registration_failed), "undefined" != typeof web_hook_on_registrationFailed && web_hook_on_registrationFailed(e) }

function onUnregistered() { userAgent.registrationCompleted && (console.log("Unregistered, bye!"), $("#regStatus").html(lang.unregistered), $("#reglink").show(), $("#dereglink").hide(), "undefined" != typeof web_hook_on_unregistered && web_hook_on_unregistered()), userAgent.isReRegister = !1 }

function ReceiveCall(e) {
    var t = e.remoteIdentity.displayName,
        n = e.remoteIdentity.uri.user;
    console.log("New Incoming Call!", t + " <" + n + ">");
    var i = countSessions(e.id);
    console.log("Current Call Count:", i);
    var a = FindBuddyByDid(n);
    if (null == a) {
        var o = n.length > DidLength ? "contact" : "extension";
        a = MakeBuddy(o, !0, 0 == i, !1, t, n, null, !1)
    } else "extension" == a.type && a.CallerIDName != t ? UpdateBuddyCalerID(a, t) : "contact" == a.type && t != n && a.CallerIDName != t && UpdateBuddyCalerID(a, t);
    var s = moment.utc(),
        l = new Line(newLineNumber += 1, t, n, a);
    l.SipSession = e, l.SipSession.data = {}, l.SipSession.data.line = l.LineNumber, l.SipSession.data.calldirection = "inbound", l.SipSession.data.terminateby = "", l.SipSession.data.buddyId = l.BuddyObj.identity, l.SipSession.data.callstart = s.format("YYYY-MM-DD HH:mm:ss UTC"), l.SipSession.data.callTimer = window.setInterval(function() {
        var e = moment.utc(),
            t = moment.duration(e.diff(s));
        $("#line-" + l.LineNumber + "-timer").html(formatShortDuration(t.asSeconds()))
    }, 1e3), l.SipSession.data.earlyReject = !1, Lines.push(l), l.SipSession.data.withvideo = !1;
    var r = !1;
    if (1 == EnableVideoCalling && l.SipSession.request.body && l.SipSession.request.body.indexOf("m=video") > -1 && (r = !0, "contact" == a.type && (r = !1)), l.SipSession.delegate = { onBye: function(e) { onSessionRecievedBye(l, e) }, onMessage: function(e) { onSessionRecievedMessage(l, e) }, onInvite: function(e) { onSessionReinvited(l, e) }, onSessionDescriptionHandler: function(e, t) { onSessionDescriptionHandlerCreated(l, e, t, r) } }, l.SipSession.incomingInviteRequest.delegate = { onCancel: function(e) { onInviteCancel(l, e) } }, 1 == DoNotDisturbEnabled || "enabled" == DoNotDisturbPolicy) {
        if (1 != DoNotDisturbEnabled || 1 != a.EnableDuringDnd) return console.log("Do Not Disturb Enabled, rejecting call."), l.SipSession.data.earlyReject = !0, void RejectCall(l.LineNumber, !0);
        console.log("Buddy is allowed to call while you are on DND")
    }
    if (i >= 1 && (0 == CallWaitingEnabled || "disabled" == CallWaitingEnabled)) return console.log("Call Waiting Disabled, rejecting call."), l.SipSession.data.earlyReject = !0, void RejectCall(l.LineNumber, !0);
    AddLineHtml(l), $("#line-" + l.LineNumber + "-msg").html(lang.incoming_call_from + " " + t + " &lt;" + n + "&gt;"), $("#line-" + l.LineNumber + "-msg").show(), $("#line-" + l.LineNumber + "-timer").show(), r ? $("#line-" + l.LineNumber + "-answer-video").show() : $("#line-" + l.LineNumber + "-answer-video").hide(), $("#line-" + l.LineNumber + "-AnswerCall").show(), UpdateBuddyList();
    var d, c = !1,
        u = 1e3;
    if (!AutoAnswerEnabled && "enabled" == IntercomPolicy) {
        var p = e.request.headers["Call-Info"];
        if (void 0 !== p && p.length > 0)
            for (var g = 0; g < p.length; g++) { var m = p[g].raw.toLowerCase(); if (m.indexOf("answer-after=") > 0) { var f = parseInt(m.substring(m.indexOf("answer-after=") + "answer-after=".length).split(";")[0]); if (Number.isInteger(f) && f >= 0) { c = !0, f > 1 && (u = 1e3 * f); break } } }
        var v = e.request.headers["Alert-Info"];
        if (!1 === c && void 0 !== v && v.length > 0)
            for (g = 0; g < v.length; g++) { var h = v[g].raw.toLowerCase(); if (h.indexOf("auto answer") > 0 || h.indexOf("alert-autoanswer") > 0) { c = !0; break } if (h.indexOf("answer-after=") > 0) { f = parseInt(h.substring(h.indexOf("answer-after=") + "answer-after=".length).split(";")[0]); if (Number.isInteger(f) && f >= 0) { c = !0, f > 1 && (u = 1e3 * f); break } } }
    }
    if (AutoAnswerEnabled || "enabled" == AutoAnswerPolicy || c) {
        if (0 == i) return console.log("Going to Auto Answer this call..."), window.setTimeout(function() { r ? AnswerVideoCall(l.LineNumber) : AnswerAudioCall(l.LineNumber) }, u), void SelectLine(l.LineNumber);
        console.warn("Could not auto answer call, already on a call.")
    }
    if ("Notification" in window && "granted" === Notification.permission) {
        var b = { body: lang.incoming_call_from + " " + t + " <" + n + ">", icon: getPicture(a.identity) };
        new Notification(lang.incoming_call, b).onclick = function(e) {
            var t = l.LineNumber;
            window.setTimeout(function() { r ? AnswerVideoCall(t) : AnswerAudioCall(t) }, 1e3), SelectLine(t)
        }
    }
    i >= 1 ? (console.log("Audio:", audioBlobs.CallWaiting.url), (d = new Audio(audioBlobs.CallWaiting.blob)).preload = "auto", d.loop = !1, d.oncanplaythrough = function(e) { void 0 !== d.sinkId && "default" != getRingerOutputID() && d.setSinkId(getRingerOutputID()).then(function() { console.log("Set sinkId to:", getRingerOutputID()) }).catch(function(e) { console.warn("Failed not apply setSinkId.", e) }), d.play().then(function() {}).catch(function(e) { console.warn("Unable to play audio file.", e) }) }, l.SipSession.data.rinngerObj = d) : (console.log("Audio:", audioBlobs.Ringtone.url), (d = new Audio(audioBlobs.Ringtone.blob)).preload = "auto", d.loop = !0, d.oncanplaythrough = function(e) { void 0 !== d.sinkId && "default" != getRingerOutputID() && d.setSinkId(getRingerOutputID()).then(function() { console.log("Set sinkId to:", getRingerOutputID()) }).catch(function(e) { console.warn("Failed not apply setSinkId.", e) }), d.play().then(function() {}).catch(function(e) { console.warn("Unable to play audio file.", e) }) }, l.SipSession.data.rinngerObj = d);
    if ($("#stream-" + a.identity).is(":visible") || 0 == i) 0 == i && SelectLine(newLineNumber);
    else if (ShowCallAnswerWindow) {
        CloseWindow();
        var S = '<div class="UiWindowField" style="text-align:center">';
        S += '<div style="font-size: 18px; margin-top:05px">' + t + "<div>", t != n && (S += '<div style="font-size: 18px; margin-top:05px">&lt;' + n + "&gt;<div>"), S += '<div class=callAnswerBuddyIcon style="background-image: url(' + getPicture(a.identity) + '); margin-top:15px"></div>', S += '<div style="margin-top:5px"><button onclick="AnswerAudioCall(\'' + a.identity + '\')" class=answerButton><i class="fa fa-phone"></i> ' + lang.answer_call + "</button></div>", OpenWindow(S += "</div>", lang.incoming_call_from, 400, 300, !0, !1, lang.reject_call, function() { RejectCall(a.identity), CloseWindow() }, "Close", function() { CloseWindow() }, null, null)
    }
    "undefined" != typeof web_hook_on_invite && web_hook_on_invite(e)
}

function AnswerAudioCall(e) {
    var t = FindLineByNumber(e);
    if (null != t) {
        var n = t.SipSession;
        if (n.data.rinngerObj && (n.data.rinngerObj.pause(), n.data.rinngerObj.removeAttribute("src"), n.data.rinngerObj.load(), n.data.rinngerObj = null), 0 == HasAudioDevice) return Alert(lang.alert_no_microphone), $("#line-" + t.LineNumber + "-msg").html(lang.call_failed), void $("#line-" + t.LineNumber + "-AnswerCall").hide();
        $("#line-" + t.LineNumber + "-AnswerCall").hide();
        var i = navigator.mediaDevices.getSupportedConstraints(),
            a = { sessionDescriptionHandlerOptions: { constraints: { audio: { deviceId: "default" }, video: !1 } } },
            o = getAudioSrcID();
        if ("default" != o) {
            for (var s = !1, l = 0; l < AudioinputDevices.length; ++l)
                if (o == AudioinputDevices[l].deviceId) { s = !0; break }
            s ? a.sessionDescriptionHandlerOptions.constraints.audio.deviceId = { exact: o } : (console.warn("The audio device you used before is no longer available, default settings applied."), localDB.setItem("AudioSrcId", "default"))
        }
        i.autoGainControl && (a.sessionDescriptionHandlerOptions.constraints.audio.autoGainControl = AutoGainControl), i.echoCancellation && (a.sessionDescriptionHandlerOptions.constraints.audio.echoCancellation = EchoCancellation), i.noiseSuppression && (a.sessionDescriptionHandlerOptions.constraints.audio.noiseSuppression = NoiseSuppression), t.SipSession.data.withvideo = !1, t.SipSession.data.VideoSourceDevice = null, t.SipSession.data.AudioSourceDevice = getAudioSrcID(), t.SipSession.data.AudioOutputDevice = getAudioOutputID(), t.SipSession.accept(a).then(function() { onInviteAccepted(t, !1) }).catch(function(e) { console.warn("Failed to answer call", e, t.SipSession), t.SipSession.data.reasonCode = 500, t.SipSession.data.reasonText = "Client Error", teardownSession(t) })
    } else console.warn("Failed to get line (" + e + ")")
}

function AnswerVideoCall(e) {
    var t = FindLineByNumber(e);
    if (null != t) {
        var n = t.SipSession;
        if (n.data.rinngerObj && (n.data.rinngerObj.pause(), n.data.rinngerObj.removeAttribute("src"), n.data.rinngerObj.load(), n.data.rinngerObj = null), 0 == HasAudioDevice) return Alert(lang.alert_no_microphone), $("#line-" + t.LineNumber + "-msg").html(lang.call_failed), void $("#line-" + t.LineNumber + "-AnswerCall").hide();
        $("#line-" + t.LineNumber + "-AnswerCall").hide();
        var i = navigator.mediaDevices.getSupportedConstraints(),
            a = { sessionDescriptionHandlerOptions: { constraints: { audio: { deviceId: "default" }, video: { deviceId: "default" } } } },
            o = getAudioSrcID();
        if ("default" != o) {
            for (var s = !1, l = 0; l < AudioinputDevices.length; ++l)
                if (o == AudioinputDevices[l].deviceId) { s = !0; break }
            s ? a.sessionDescriptionHandlerOptions.constraints.audio.deviceId = { exact: o } : (console.warn("The audio device you used before is no longer available, default settings applied."), localDB.setItem("AudioSrcId", "default"))
        }
        i.autoGainControl && (a.sessionDescriptionHandlerOptions.constraints.audio.autoGainControl = AutoGainControl), i.echoCancellation && (a.sessionDescriptionHandlerOptions.constraints.audio.echoCancellation = EchoCancellation), i.noiseSuppression && (a.sessionDescriptionHandlerOptions.constraints.audio.noiseSuppression = NoiseSuppression);
        var r = getVideoSrcID();
        if ("default" != r) {
            var d = !1;
            for (l = 0; l < VideoinputDevices.length; ++l)
                if (r == VideoinputDevices[l].deviceId) { d = !0; break }
            d ? a.sessionDescriptionHandlerOptions.constraints.video.deviceId = { exact: r } : (console.warn("The video device you used before is no longer available, default settings applied."), localDB.setItem("VideoSrcId", "default"))
        }
        i.frameRate && "" != maxFrameRate && (a.sessionDescriptionHandlerOptions.constraints.video.frameRate = maxFrameRate), i.height && "" != videoHeight && (a.sessionDescriptionHandlerOptions.constraints.video.height = videoHeight), i.aspectRatio && "" != videoAspectRatio && (a.sessionDescriptionHandlerOptions.constraints.video.aspectRatio = videoAspectRatio), t.SipSession.data.withvideo = !0, t.SipSession.data.VideoSourceDevice = getVideoSrcID(), t.SipSession.data.AudioSourceDevice = getAudioSrcID(), t.SipSession.data.AudioOutputDevice = getAudioOutputID(), StartVideoFullScreen && ExpandVideoArea(t.LineNumber), t.SipSession.accept(a).then(function() { onInviteAccepted(t, !0) }).catch(function(e) { console.warn("Failed to answer call", e, t.SipSession), t.SipSession.data.reasonCode = 500, t.SipSession.data.reasonText = "Client Error", teardownSession(t) })
    } else console.warn("Failed to get line (" + e + ")")
}

function RejectCall(e) {
    var t = FindLineByNumber(e);
    if (null != t) {
        var n = t.SipSession;
        null == n && (console.warn("Reject failed, null session"), $("#line-" + t.LineNumber + "-msg").html(lang.call_failed), $("#line-" + t.LineNumber + "-AnswerCall").hide()), n.state == SIP.SessionState.Established ? n.bye().catch(function(e) { console.warn("Problem in RejectCall(), could not bye() call", e, n) }) : n.reject({ statusCode: 486, reasonPhrase: "Busy Here" }).catch(function(e) { console.warn("Problem in RejectCall(), could not reject() call", e, n) }), $("#line-" + t.LineNumber + "-msg").html(lang.call_rejected), n.data.terminateby = "us", n.data.reasonCode = 486, n.data.reasonText = "Busy Here", teardownSession(t)
    } else console.warn("Unable to find line (" + e + ")")
}

function onInviteCancel(e, t) { console.log("Call canceled by remote party before answer"), e.SipSession.data.terminateby = "them", e.SipSession.data.reasonCode = 0, e.SipSession.data.reasonText = "Call Cancelled", e.SipSession.dispose().catch(function(e) { console.log("Failed to dispose the cancel dialog", e) }), teardownSession(e) }

function onInviteAccepted(e, t, n) {
    var i = e.SipSession;
    i.data.earlyMedia && (i.data.earlyMedia.pause(), i.data.earlyMedia.removeAttribute("src"), i.data.earlyMedia.load(), i.data.earlyMedia = null), window.clearInterval(i.data.callTimer), $("#line-" + e.LineNumber + "-timer").show();
    var a = moment.utc();
    if (i.data.startTime = a, i.data.callTimer = window.setInterval(function() {
            var t = moment.utc(),
                n = moment.duration(t.diff(a));
            $("#line-" + e.LineNumber + "-timer").html(formatShortDuration(n.asSeconds()))
        }, 1e3), i.isOnHold = !1, t) {
        var o = new MediaStream,
            s = i.sessionDescriptionHandler.peerConnection;
        s.getSenders().forEach(function(e) { e.track && "video" == e.track.kind && o.addTrack(e.track) });
        var l = $("#line-" + e.LineNumber + "-localVideo").get(0);
        l.srcObject = o, l.onloadedmetadata = function(e) { l.play() }, MaxVideoBandwidth > -1 && s.getSenders().forEach(function(e) {
            if (e.track && "video" == e.track.kind) {
                var t = e.getParameters();
                t.encodings || (t.encodings = [{}]), t.encodings[0].maxBitrate = 1e3 * MaxVideoBandwidth, console.log("Applying limit for Bandwidth to: ", MaxVideoBandwidth + "kb per second"), e.setParameters(t).catch(function(e) { console.warn("Cannot apply Bandwidth Limits", e) })
            }
        })
    }
    t ? ($("#line-" + e.LineNumber + "-progress").hide(), $("#line-" + e.LineNumber + "-VideoCall").show(), $("#line-" + e.LineNumber + "-ActiveCall").show(), $("#line-" + e.LineNumber + "-btn-Conference").hide(), $("#line-" + e.LineNumber + "-btn-CancelConference").hide(), $("#line-" + e.LineNumber + "-Conference").hide(), $("#line-" + e.LineNumber + "-btn-Transfer").hide(), $("#line-" + e.LineNumber + "-btn-CancelTransfer").hide(), $("#line-" + e.LineNumber + "-Transfer").hide(), $("#line-" + e.LineNumber + "-src-camera").prop("disabled", !0), $("#line-" + e.LineNumber + "-src-canvas").prop("disabled", !1), $("#line-" + e.LineNumber + "-src-desktop").prop("disabled", !1), $("#line-" + e.LineNumber + "-src-video").prop("disabled", !1)) : ($("#line-" + e.LineNumber + "-progress").hide(), $("#line-" + e.LineNumber + "-VideoCall").hide(), $("#line-" + e.LineNumber + "-ActiveCall").show()), updateLineScroll(e.LineNumber), e.LocalSoundMeter = StartLocalAudioMediaMonitoring(e.LineNumber, i), e.RemoteSoundMeter = StartRemoteAudioMediaMonitoring(e.LineNumber, i), $("#line-" + e.LineNumber + "-msg").html(lang.call_in_progress), t && StartVideoFullScreen && ExpandVideoArea(e.LineNumber), "undefined" != typeof web_hook_on_modify && web_hook_on_modify("accepted", i)
}

function onInviteTrying(e, t) { $("#line-" + e.LineNumber + "-msg").html(lang.trying), "undefined" != typeof web_hook_on_modify && web_hook_on_modify("trying", t.message) }

function onInviteProgress(e, t) {
    if (console.log("Call Progress:", t.message.statusCode), 180 == t.message.statusCode) {
        $("#line-" + e.LineNumber + "-msg").html(lang.ringing);
        var n = audioBlobs.EarlyMedia_European;
        if (UserLocale().indexOf("us") > -1 && (n = audioBlobs.EarlyMedia_US), UserLocale().indexOf("gb") > -1 && (n = audioBlobs.EarlyMedia_UK), UserLocale().indexOf("au") > -1 && (n = audioBlobs.EarlyMedia_Australia), UserLocale().indexOf("jp") > -1 && (n = audioBlobs.EarlyMedia_Japan), console.log("Audio:", n.url), e.SipSession.data.earlyMedia) console.log("Early Media already playing");
        else {
            var i = new Audio(n.blob);
            i.preload = "auto", i.loop = !0, i.oncanplaythrough = function(e) { void 0 !== i.sinkId && "default" != getAudioOutputID() && i.setSinkId(getAudioOutputID()).then(function() { console.log("Set sinkId to:", getAudioOutputID()) }).catch(function(e) { console.warn("Failed not apply setSinkId.", e) }), i.play().then(function() {}).catch(function(e) { console.warn("Unable to play audio file.", e) }) }, e.SipSession.data.earlyMedia = i
        }
    } else t.message.statusCode, $("#line-" + e.LineNumber + "-msg").html(t.message.reasonPhrase + "...");
    "undefined" != typeof web_hook_on_modify && web_hook_on_modify("progress", t)
}

function onInviteRejected(e, t) { console.log("INVITE Rejected:", t.message.reasonPhrase), e.SipSession.data.terminateby = "them", e.SipSession.data.reasonCode = t.message.statusCode, e.SipSession.data.reasonText = t.message.reasonPhrase, teardownSession(e) }

function onInviteRedirected(e) { console.log("onInviteRedirected", e) }

function onSessionRecievedBye(e, t) { $("#line-" + e.LineNumber + "-msg").html(lang.call_ended), console.log("Call ended, bye!"), e.SipSession.data.terminateby = "them", e.SipSession.data.reasonCode = 16, e.SipSession.data.reasonText = "Normal Call clearing", teardownSession(e) }

function onSessionReinvited(e, t) {
    var n = t.body;
    e.SipSession.data.videoChannelNames = [];
    var i = n.split("m=video");
    if (i.length >= 1) {
        for (var a = 0; a < i.length; a++)
            if (i[a].indexOf("a=mid:") > -1 && i[a].indexOf("a=label:") > -1) {
                for (var o = i[a].split("\r\n"), s = "", l = "", r = 0; r < o.length; r++) 0 == o[r].indexOf("a=label:") && (s = o[r].replace("a=label:", "")), 0 == o[r].indexOf("a=mid:") && (l = o[r].replace("a=mid:", ""));
                e.SipSession.data.videoChannelNames.push({ mid: l, channel: s })
            }
        console.log("videoChannelNames:", e.SipSession.data.videoChannelNames), RedrawStage(e.LineNumber, !1)
    }
}

function onSessionRecievedMessage(e, t) {
    var n = t.request.headers["Content-Type"].length >= 1 ? t.request.headers["Content-Type"][0].parsed : "Unknown";
    if (n.indexOf("application/x-asterisk-confbridge-event") > -1) {
        var i = JSON.parse(t.request.body),
            a = e.SipSession;
        if (a.data.ConfbridgeChannels || (a.data.ConfbridgeChannels = []), a.data.ConfbridgeEvents || (a.data.ConfbridgeEvents = []), "ConfbridgeStart" == i.type) console.log("ConfbridgeStart!");
        else if ("ConfbridgeWelcome" == i.type) console.log("Welcome to the Asterisk Conference"), console.log("Bridge ID:", i.bridge.id), console.log("Bridge Name:", i.bridge.name), console.log("Created at:", i.bridge.creationtime), console.log("Video Mode:", i.bridge.video_mode), a.data.ConfbridgeChannels = i.channels, a.data.ConfbridgeChannels.forEach(function(e) { console.log(e.caller.name, "Is in the conference. Muted:", e.muted, "Admin:", e.admin) });
        else if ("ConfbridgeJoin" == i.type) i.channels.forEach(function(e) {
            var t = !1;
            a.data.ConfbridgeChannels.forEach(function(n) { n.id == e.id && (t = !0) }), t || (a.data.ConfbridgeChannels.push(e), a.data.ConfbridgeEvents.push({ event: e.caller.name + " (" + e.caller.number + ") joined the conference", eventTime: utcDateNow() }), console.log(e.caller.name, "Joined the conference. Muted: ", e.muted))
        });
        else if ("ConfbridgeLeave" == i.type) i.channels.forEach(function(e) { a.data.ConfbridgeChannels.forEach(function(t, n) { t.id == e.id && (a.data.ConfbridgeChannels.splice(n, 1), console.log(e.caller.name, "Left the conference"), a.data.ConfbridgeEvents.push({ event: e.caller.name + " (" + e.caller.number + ") left the conference", eventTime: utcDateNow() })) }) });
        else if ("ConfbridgeTalking" == i.type) {
            var o = $("#line-" + e.LineNumber + "-remote-videos");
            o && i.channels.forEach(function(e) { o.find("video").each(function() { this.srcObject.channel && this.srcObject.channel == e.id && ("on" == e.talking_status ? (console.log(e.caller.name, "is talking."), this.srcObject.isTalking = !0, $(this).css("border", "1px solid red")) : (console.log(e.caller.name, "stopped talking."), this.srcObject.isTalking = !1, $(this).css("border", "1px solid transparent"))) }) })
        } else "ConfbridgeMute" == i.type ? (i.channels.forEach(function(e) { a.data.ConfbridgeChannels.forEach(function(t) { t.id == e.id && (console.log(t.caller.name, "is now muted"), t.muted = !0) }) }), RedrawStage(e.LineNumber, !1)) : "ConfbridgeUnmute" == i.type ? (i.channels.forEach(function(e) { a.data.ConfbridgeChannels.forEach(function(t) { t.id == e.id && (console.log(t.caller.name, "is now unmuted"), t.muted = !1) }) }), RedrawStage(e.LineNumber, !1)) : "ConfbridgeEnd" == i.type ? console.log("The Asterisk Conference has ended, bye!") : console.warn("Unknown Asterisk Conference Event:", i.type, i);
        RefreshLineActivity(e.LineNumber), t.accept()
    } else n.indexOf("application/x-myphone-confbridge-chat") > -1 ? (console.log("x-myphone-confbridge-chat", t), t.accept()) : (console.warn("Unknown message type"), t.reject())
}

function onSessionDescriptionHandlerCreated(e, t, n, i) { t ? t.peerConnection ? t.peerConnection.ontrack = function(t) { onTrackAddedEvent(e, i) } : console.warn("onSessionDescriptionHandler fired without a peerConnection") : console.warn("onSessionDescriptionHandler fired without a sessionDescriptionHandler") }

function onTrackAddedEvent(e, t) {
    var n = e.SipSession,
        i = n.sessionDescriptionHandler.peerConnection,
        a = new MediaStream,
        o = new MediaStream;
    if (i.getTransceivers().forEach(function(e) {
            var n = e.receiver;
            n.track && ("audio" == n.track.kind && (console.log("Adding Remote Audio Track"), a.addTrack(n.track)), t && "video" == n.track.kind && e.mid && (n.track.mid = e.mid, console.log("Adding Remote Video Track - ", n.track.readyState, "MID:", n.track.mid), o.addTrack(n.track)))
        }), a.getAudioTracks().length >= 1) {
        var s = $("#line-" + e.LineNumber + "-remoteAudio").get(0);
        s.srcObject = a, s.onloadedmetadata = function(e) { void 0 !== s.sinkId && s.setSinkId(getAudioOutputID()).then(function() { console.log("sinkId applied: " + getAudioOutputID()) }).catch(function(e) { console.warn("Error using setSinkId: ", e) }), s.play() }
    }
    t && ($("#line-" + e.LineNumber + "-remote-videos").empty(), o.getVideoTracks().length >= 1 ? o.getVideoTracks().forEach(function(t) {
        var n = new MediaStream;
        n.trackID = t.id, n.mid = t.mid, t.onended = function() { console.log("Video Track Ended: ", this.mid), RedrawStage(e.LineNumber, !0) }, n.addTrack(t);
        var i = $("<span />", { class: "VideoWrapper" });
        i.css("width", "1px"), i.css("heigh", "1px"), i.hide();
        var a = $("<div />", { class: "callerID" });
        i.append(a);
        var o = $("<div />", { class: "Actions" });
        i.append(o);
        var s = $("<video />", { id: t.id, mid: t.mid, muted: !0, autoplay: !0, playsinline: !0, controls: !1 });
        s.hide();
        var l = s.get(0);
        l.srcObject = n, l.onloadedmetadata = function(t) { s.show(), s.parent().show(), console.log("Playing Video Stream MID:", n.mid), RedrawStage(e.LineNumber, !0) }, i.append(s), $("#line-" + e.LineNumber + "-remote-videos").append(i), console.log("Added Video Element MID:", n.mid)
    }) : (console.log("No Video Streams"), RedrawStage(e.LineNumber, !0)));
    "undefined" != typeof web_hook_on_modify && web_hook_on_modify("trackAdded", n)
}

function teardownSession(e) {
    if (null != e && null != e.SipSession) {
        var t = e.SipSession;
        if (1 != t.data.teardownComplete) {
            if (t.data.teardownComplete = !0, 1 != t.data.earlyReject && HidePopup(), t.data.childsession && t.data.childsession.dispose().then(function() { t.data.childsession = null }).catch(function(e) { t.data.childsession = null }), t.data.AudioSourceTrack && "audio" == t.data.AudioSourceTrack.kind && (t.data.AudioSourceTrack.stop(), t.data.AudioSourceTrack = null), t.data.earlyMedia && (t.data.earlyMedia.pause(), t.data.earlyMedia.removeAttribute("src"), t.data.earlyMedia.load(), t.data.earlyMedia = null), t.data.rinngerObj && (t.data.rinngerObj.pause(), t.data.rinngerObj.removeAttribute("src"), t.data.rinngerObj.load(), t.data.rinngerObj = null), StopRecording(e.LineNumber, !0), null != e.LocalSoundMeter && (e.LocalSoundMeter.stop(), e.LocalSoundMeter = null), null != e.RemoteSoundMeter && (e.RemoteSoundMeter.stop(), e.RemoteSoundMeter = null), t && t.sessionDescriptionHandler && t.sessionDescriptionHandler.peerConnection) t.sessionDescriptionHandler.peerConnection.getSenders().forEach(function(e) { e.track && "audio" == e.track.kind && e.track.stop() });
            window.clearInterval(t.data.videoResampleInterval), window.clearInterval(t.data.callTimer), AddCallMessage(e.BuddyObj.identity, t), "inbound" == t.data.calldirection && "them" == t.data.terminateby && null == e.SipSession.data.startTime && IncreaseMissedBadge(t.data.buddyId), window.setTimeout(function() { RemoveLine(e) }, 1e3), UpdateBuddyList(), 1 != t.data.earlyReject && UpdateUI(), "undefined" != typeof web_hook_on_terminate && web_hook_on_terminate(t)
        }
    }
}

function StartRemoteAudioMediaMonitoring(e, t) {
    console.log("Creating RemoteAudio AudioContext on Line:" + e);
    var n = new SoundMeter(t.id, e);
    if (null == n) return console.warn("AudioContext() RemoteAudio not available... it fine."), null;
    var i = new MediaStream,
        a = null;
    t.sessionDescriptionHandler.peerConnection.getReceivers().forEach(function(e) { e.track && "audio" == e.track.kind && (null == a ? (i.addTrack(e.track), a = e) : (console.log("Found another Track, but audioReceiver not null"), console.log(e), console.log(e.track))) });
    n.startTime = Date.now(), Chart.defaults.global.defaultFontSize = 12;
    var o = { responsive: !1, maintainAspectRatio: !1, devicePixelRatio: 1, animation: !1, scales: { yAxes: [{ ticks: { beginAtZero: !0 } }] } };
    return n.ReceiveBitRateChart = new Chart($("#line-" + e + "-AudioReceiveBitRate"), { type: "line", data: { labels: MakeDataArray("", 100), datasets: [{ label: lang.receive_kilobits_per_second, data: MakeDataArray(0, 100), backgroundColor: "rgba(168, 0, 0, 0.5)", borderColor: "rgba(168, 0, 0, 1)", borderWidth: 1, pointRadius: 1 }] }, options: o }), n.ReceiveBitRateChart.lastValueBytesReceived = 0, n.ReceiveBitRateChart.lastValueTimestamp = 0, n.ReceivePacketRateChart = new Chart($("#line-" + e + "-AudioReceivePacketRate"), { type: "line", data: { labels: MakeDataArray("", 100), datasets: [{ label: lang.receive_packets_per_second, data: MakeDataArray(0, 100), backgroundColor: "rgba(168, 0, 0, 0.5)", borderColor: "rgba(168, 0, 0, 1)", borderWidth: 1, pointRadius: 1 }] }, options: o }), n.ReceivePacketRateChart.lastValuePacketReceived = 0, n.ReceivePacketRateChart.lastValueTimestamp = 0, n.ReceivePacketLossChart = new Chart($("#line-" + e + "-AudioReceivePacketLoss"), { type: "line", data: { labels: MakeDataArray("", 100), datasets: [{ label: lang.receive_packet_loss, data: MakeDataArray(0, 100), backgroundColor: "rgba(168, 99, 0, 0.5)", borderColor: "rgba(168, 99, 0, 1)", borderWidth: 1, pointRadius: 1 }] }, options: o }), n.ReceivePacketLossChart.lastValuePacketLoss = 0, n.ReceivePacketLossChart.lastValueTimestamp = 0, n.ReceiveJitterChart = new Chart($("#line-" + e + "-AudioReceiveJitter"), { type: "line", data: { labels: MakeDataArray("", 100), datasets: [{ label: lang.receive_jitter, data: MakeDataArray(0, 100), backgroundColor: "rgba(0, 38, 168, 0.5)", borderColor: "rgba(0, 38, 168, 1)", borderWidth: 1, pointRadius: 1 }] }, options: o }), n.ReceiveLevelsChart = new Chart($("#line-" + e + "-AudioReceiveLevels"), { type: "line", data: { labels: MakeDataArray("", 100), datasets: [{ label: lang.receive_audio_levels, data: MakeDataArray(0, 100), backgroundColor: "rgba(140, 0, 168, 0.5)", borderColor: "rgba(140, 0, 168, 1)", borderWidth: 1, pointRadius: 1 }] }, options: o }), n.connectToSource(i, function(t) {
        null == t && (console.log("SoundMeter for RemoteAudio Connected, displaying levels for Line: " + e), n.levelsInterval = window.setInterval(function() {
            var t = n.instant / 255 * 100;
            $("#line-" + e + "-Speaker").css("height", t.toFixed(2) + "%")
        }, 50), n.networkInterval = window.setInterval(function() {
            null != a && a.getStats().then(function(e) {
                e.forEach(function(e) {
                    var t = utcDateNow(),
                        i = n.ReceiveBitRateChart,
                        a = n.ReceivePacketRateChart,
                        o = n.ReceivePacketLossChart,
                        s = n.ReceiveJitterChart,
                        l = n.ReceiveLevelsChart;
                    Math.floor((Date.now() - n.startTime) / 1e3);
                    if ("inbound-rtp" == e.type) {
                        if (0 == i.lastValueTimestamp) return i.lastValueTimestamp = e.timestamp, i.lastValueBytesReceived = e.bytesReceived, a.lastValueTimestamp = e.timestamp, a.lastValuePacketReceived = e.packetsReceived, o.lastValueTimestamp = e.timestamp, void(o.lastValuePacketLoss = e.packetsLost);
                        var r = 8 * (e.bytesReceived - i.lastValueBytesReceived) / 1e3;
                        i.lastValueTimestamp = e.timestamp, i.lastValueBytesReceived = e.bytesReceived, n.ReceiveBitRate.push({ value: r, timestamp: t }), i.data.datasets[0].data.push(r), i.data.labels.push(""), i.data.datasets[0].data.length > 100 && (i.data.datasets[0].data.splice(0, 1), i.data.labels.splice(0, 1)), i.update();
                        var d = e.packetsReceived - a.lastValuePacketReceived;
                        a.lastValueTimestamp = e.timestamp, a.lastValuePacketReceived = e.packetsReceived, n.ReceivePacketRate.push({ value: d, timestamp: t }), a.data.datasets[0].data.push(d), a.data.labels.push(""), a.data.datasets[0].data.length > 100 && (a.data.datasets[0].data.splice(0, 1), a.data.labels.splice(0, 1)), a.update();
                        var c = e.packetsLost - o.lastValuePacketLoss;
                        o.lastValueTimestamp = e.timestamp, o.lastValuePacketLoss = e.packetsLost, n.ReceivePacketLoss.push({ value: c, timestamp: t }), o.data.datasets[0].data.push(c), o.data.labels.push(""), o.data.datasets[0].data.length > 100 && (o.data.datasets[0].data.splice(0, 1), o.data.labels.splice(0, 1)), o.update(), n.ReceiveJitter.push({ value: e.jitter, timestamp: t }), s.data.datasets[0].data.push(e.jitter), s.data.labels.push(""), s.data.datasets[0].data.length > 100 && (s.data.datasets[0].data.splice(0, 1), s.data.labels.splice(0, 1)), s.update()
                    }
                    if ("track" == e.type) {
                        var u = 100 * e.audioLevel;
                        n.ReceiveLevels.push({ value: u, timestamp: t }), l.data.datasets[0].data.push(u), l.data.labels.push(""), l.data.datasets[0].data.length > 100 && (l.data.datasets[0].data.splice(0, 1), l.data.labels.splice(0, 1)), l.update()
                    }
                })
            })
        }, 1e3))
    }), n
}

function StartLocalAudioMediaMonitoring(e, t) {
    console.log("Creating LocalAudio AudioContext on line " + e);
    var n = new SoundMeter(t.id, e);
    if (null == n) return console.warn("AudioContext() LocalAudio not available... its fine."), null;
    var i = new MediaStream,
        a = null;
    t.sessionDescriptionHandler.peerConnection.getSenders().forEach(function(e) { e.track && "audio" == e.track.kind && (null == a ? (console.log("Adding Track to Monitor: ", e.track.label), i.addTrack(e.track), a = e) : (console.log("Found another Track, but audioSender not null"), console.log(e), console.log(e.track))) });
    n.startTime = Date.now(), Chart.defaults.global.defaultFontSize = 12;
    var o = { responsive: !1, maintainAspectRatio: !1, devicePixelRatio: 1, animation: !1, scales: { yAxes: [{ ticks: { beginAtZero: !0 } }] } };
    return n.SendBitRateChart = new Chart($("#line-" + e + "-AudioSendBitRate"), { type: "line", data: { labels: MakeDataArray("", 100), datasets: [{ label: lang.send_kilobits_per_second, data: MakeDataArray(0, 100), backgroundColor: "rgba(0, 121, 19, 0.5)", borderColor: "rgba(0, 121, 19, 1)", borderWidth: 1, pointRadius: 1 }] }, options: o }), n.SendBitRateChart.lastValueBytesSent = 0, n.SendBitRateChart.lastValueTimestamp = 0, n.SendPacketRateChart = new Chart($("#line-" + e + "-AudioSendPacketRate"), { type: "line", data: { labels: MakeDataArray("", 100), datasets: [{ label: lang.send_packets_per_second, data: MakeDataArray(0, 100), backgroundColor: "rgba(0, 121, 19, 0.5)", borderColor: "rgba(0, 121, 19, 1)", borderWidth: 1, pointRadius: 1 }] }, options: o }), n.SendPacketRateChart.lastValuePacketSent = 0, n.SendPacketRateChart.lastValueTimestamp = 0, n.connectToSource(i, function(t) {
        null == t && (console.log("SoundMeter for LocalAudio Connected, displaying levels for Line: " + e), n.levelsInterval = window.setInterval(function() {
            var t = n.instant / 255 * 100;
            $("#line-" + e + "-Mic").css("height", t.toFixed(2) + "%")
        }, 50), n.networkInterval = window.setInterval(function() {
            null != a && a.getStats().then(function(e) {
                e.forEach(function(e) {
                    var t = utcDateNow(),
                        i = n.SendBitRateChart,
                        a = n.SendPacketRateChart;
                    Math.floor((Date.now() - n.startTime) / 1e3);
                    if ("outbound-rtp" == e.type) {
                        if (0 == i.lastValueTimestamp) return i.lastValueTimestamp = e.timestamp, i.lastValueBytesSent = e.bytesSent, a.lastValueTimestamp = e.timestamp, void(a.lastValuePacketSent = e.packetsSent);
                        var o = 8 * (e.bytesSent - i.lastValueBytesSent) / 1e3;
                        i.lastValueTimestamp = e.timestamp, i.lastValueBytesSent = e.bytesSent, n.SendBitRate.push({ value: o, timestamp: t }), i.data.datasets[0].data.push(o), i.data.labels.push(""), i.data.datasets[0].data.length > 100 && (i.data.datasets[0].data.splice(0, 1), i.data.labels.splice(0, 1)), i.update();
                        var s = e.packetsSent - a.lastValuePacketSent;
                        a.lastValueTimestamp = e.timestamp, a.lastValuePacketSent = e.packetsSent, n.SendPacketRate.push({ value: s, timestamp: t }), a.data.datasets[0].data.push(s), a.data.labels.push(""), a.data.datasets[0].data.length > 100 && (a.data.datasets[0].data.splice(0, 1), a.data.labels.splice(0, 1)), a.update()
                    }
                    e.type
                })
            })
        }, 1e3))
    }), n
}
$(window).on("beforeunload", function() { Unregister() }), $(window).on("resize", function() { UpdateUI() }), $(document).ready(function() {
    var e = "undefined" != typeof phoneOptions ? phoneOptions : {};
    void 0 !== e.loadAlternateLang && (loadAlternateLang = e.loadAlternateLang), void 0 !== e.profileUser && (profileUser = e.profileUser), void 0 !== e.profileName && (profileName = e.profileName), void 0 !== e.wssServer && (wssServer = e.wssServer), void 0 !== e.WebSocketPort && (WebSocketPort = e.WebSocketPort), void 0 !== e.ServerPath && (ServerPath = e.ServerPath), void 0 !== e.SipUsername && (SipUsername = e.SipUsername), void 0 !== e.SipPassword && (SipPassword = e.SipPassword), void 0 !== e.TransportConnectionTimeout && (TransportConnectionTimeout = e.TransportConnectionTimeout), void 0 !== e.TransportReconnectionAttempts && (TransportReconnectionAttempts = e.TransportReconnectionAttempts), void 0 !== e.TransportReconnectionTimeout && (TransportReconnectionTimeout = e.TransportReconnectionTimeout), void 0 !== e.VoiceMailSubscribe && (VoiceMailSubscribe = e.VoiceMailSubscribe), void 0 !== e.userAgentStr && (userAgentStr = e.userAgentStr), void 0 !== e.hostingPrefex && (hostingPrefex = e.hostingPrefex), void 0 !== e.RegisterExpires && (RegisterExpires = e.RegisterExpires), void 0 !== e.WssInTransport && (WssInTransport = e.WssInTransport), void 0 !== e.IpInContact && (IpInContact = e.IpInContact), void 0 !== e.IceStunServerJson && (IceStunServerJson = e.IceStunServerJson), void 0 !== e.IceStunCheckTimeout && (IceStunCheckTimeout = e.IceStunCheckTimeout), void 0 !== e.AutoAnswerEnabled && (AutoAnswerEnabled = e.AutoAnswerEnabled), void 0 !== e.DoNotDisturbEnabled && (DoNotDisturbEnabled = e.DoNotDisturbEnabled), void 0 !== e.CallWaitingEnabled && (CallWaitingEnabled = e.CallWaitingEnabled), void 0 !== e.RecordAllCalls && (RecordAllCalls = e.RecordAllCalls), void 0 !== e.StartVideoFullScreen && (StartVideoFullScreen = e.StartVideoFullScreen), void 0 !== e.ShowCallAnswerWindow && (ShowCallAnswerWindow = e.ShowCallAnswerWindow), void 0 !== e.SelectRingingLine && (SelectRingingLine = e.SelectRingingLine), void 0 !== e.AutoGainControl && (AutoGainControl = e.AutoGainControl), void 0 !== e.EchoCancellation && (EchoCancellation = e.EchoCancellation), void 0 !== e.NoiseSuppression && (NoiseSuppression = e.NoiseSuppression), void 0 !== e.MirrorVideo && (MirrorVideo = e.MirrorVideo), void 0 !== e.maxFrameRate && (maxFrameRate = e.maxFrameRate), void 0 !== e.videoHeight && (videoHeight = e.videoHeight), void 0 !== e.MaxVideoBandwidth && (MaxVideoBandwidth = e.MaxVideoBandwidth), void 0 !== e.videoAspectRatio && (videoAspectRatio = e.videoAspectRatio), void 0 !== e.NotificationsActive && (NotificationsActive = e.NotificationsActive), void 0 !== e.StreamBuffer && (StreamBuffer = e.StreamBuffer), void 0 !== e.PosterJpegQuality && (PosterJpegQuality = e.PosterJpegQuality), void 0 !== e.VideoResampleSize && (VideoResampleSize = e.VideoResampleSize), void 0 !== e.RecordingVideoSize && (RecordingVideoSize = e.RecordingVideoSize), void 0 !== e.RecordingVideoFps && (RecordingVideoFps = e.RecordingVideoFps), void 0 !== e.RecordingLayout && (RecordingLayout = e.RecordingLayout), void 0 !== e.DidLength && (DidLength = e.DidLength), void 0 !== e.MaxDidLength && (MaxDidLength = e.MaxDidLength), void 0 !== e.DisplayDateFormat && (DisplayDateFormat = e.DisplayDateFormat), void 0 !== e.DisplayTimeFormat && (DisplayTimeFormat = e.DisplayTimeFormat), void 0 !== e.Language && (Language = e.Language), void 0 !== e.EnableTextMessaging && (EnableTextMessaging = e.EnableTextMessaging), void 0 !== e.DisableFreeDial && (DisableFreeDial = e.DisableFreeDial), void 0 !== e.DisableBuddies && (DisableBuddies = e.DisableBuddies), void 0 !== e.EnableTransfer && (EnableTransfer = e.EnableTransfer), void 0 !== e.EnableConference && (EnableConference = e.EnableConference), void 0 !== e.AutoAnswerPolicy && (AutoAnswerPolicy = e.AutoAnswerPolicy), void 0 !== e.DoNotDisturbPolicy && (DoNotDisturbPolicy = e.DoNotDisturbPolicy), void 0 !== e.CallWaitingPolicy && (CallWaitingPolicy = e.CallWaitingPolicy), void 0 !== e.CallRecordingPolicy && (CallRecordingPolicy = e.CallRecordingPolicy), void 0 !== e.IntercomPolicy && (IntercomPolicy = e.IntercomPolicy), void 0 !== e.EnableAccountSettings && (EnableAccountSettings = e.EnableAccountSettings), void 0 !== e.EnableAppearanceSettings && (EnableAppearanceSettings = e.EnableAppearanceSettings), void 0 !== e.EnableNotificationSettings && (EnableNotificationSettings = e.EnableNotificationSettings), void 0 !== e.EnableAlphanumericDial && (EnableAlphanumericDial = e.EnableAlphanumericDial), void 0 !== e.EnableVideoCalling && (EnableVideoCalling = e.EnableVideoCalling), void 0 !== e.ChatEngine && (ChatEngine = e.ChatEngine), void 0 !== e.XmppDomain && (XmppDomain = e.XmppDomain), void 0 !== e.XmppServer && (XmppServer = e.XmppServer), void 0 !== e.XmppWebsocketPort && (XmppWebsocketPort = e.XmppWebsocketPort), void 0 !== e.XmppWebsocketPath && (XmppWebsocketPath = e.XmppWebsocketPath), void 0 !== e.XmppRealm && (XmppRealm = e.XmppRealm), void 0 !== e.XmppRealmSeperator && (XmppRealmSeperator = e.XmppRealmSeperator), void 0 !== e.XmppChatGroupService && (XmppChatGroupService = e.XmppChatGroupService), $.getJSON(hostingPrefex + "lang/en.json", function(e) { if (lang = e, 1 == loadAlternateLang) { var t = GetAlternateLanguage(); "" != t ? $.getJSON(hostingPrefex + "lang/" + t + ".json", function(e) { lang = e }).always(function() { InitUi() }) : InitUi() } else InitUi() })
});
class SoundMeter {
    constructor(e, t) {
        var n = null;
        try { window.AudioContext = window.AudioContext || window.webkitAudioContext, n = new AudioContext } catch (e) { console.warn("AudioContext() LocalAudio not available... its fine.") }
        if (null == n) return null;
        this.context = n, this.source = null, this.lineNum = t, this.sessionId = e, this.captureInterval = null, this.levelsInterval = null, this.networkInterval = null, this.startTime = 0, this.ReceiveBitRateChart = null, this.ReceiveBitRate = [], this.ReceivePacketRateChart = null, this.ReceivePacketRate = [], this.ReceivePacketLossChart = null, this.ReceivePacketLoss = [], this.ReceiveJitterChart = null, this.ReceiveJitter = [], this.ReceiveLevelsChart = null, this.ReceiveLevels = [], this.SendBitRateChart = null, this.SendBitRate = [], this.SendPacketRateChart = null, this.SendPacketRate = [], this.instant = 0, this.AnalyserNode = this.context.createAnalyser(), this.AnalyserNode.minDecibels = -90, this.AnalyserNode.maxDecibels = -10, this.AnalyserNode.smoothingTimeConstant = .85
    }
    connectToSource(e, t) { console.log("SoundMeter connecting..."); try { this.source = this.context.createMediaStreamSource(e), this.source.connect(this.AnalyserNode), this._start(), t(null) } catch (e) { console.error(e), t(e) } }
    _start() {
        var e = this;
        e.instant = 0, e.AnalyserNode.fftSize = 32, e.dataArray = new Uint8Array(e.AnalyserNode.frequencyBinCount), this.captureInterval = window.setInterval(function() { e.AnalyserNode.getByteFrequencyData(e.dataArray), e.instant = 0; for (var t = 0; t < e.dataArray.length; t++) e.dataArray[t] > e.instant && (e.instant = e.dataArray[t]) }, 1)
    }
    stop() {
        console.log("Disconnecting SoundMeter..."), window.clearInterval(this.captureInterval), this.captureInterval = null, window.clearInterval(this.levelsInterval), this.levelsInterval = null, window.clearInterval(this.networkInterval), this.networkInterval = null;
        try { this.source.disconnect() } catch (e) {}
        this.source = null;
        try { this.AnalyserNode.disconnect() } catch (e) {}
        this.AnalyserNode = null;
        try { this.context.close() } catch (e) {}
        this.context = null;
        var e = FindLineByNumber(this.lineNum),
            t = { ReceiveBitRate: this.ReceiveBitRate, ReceivePacketRate: this.ReceivePacketRate, ReceivePacketLoss: this.ReceivePacketLoss, ReceiveJitter: this.ReceiveJitter, ReceiveLevels: this.ReceiveLevels, SendBitRate: this.SendBitRate, SendPacketRate: this.SendPacketRate };
        null != this.sessionId && SaveQosData(t, this.sessionId, e.BuddyObj.identity)
    }
}

function MeterSettingsOutput(e, t, n, i) {
    var a = new SoundMeter(null, null);
    return a.startTime = Date.now(), a.connectToSource(e, function(e) {
        null == e && (console.log("SoundMeter Connected, displaying levels to:" + t), a.levelsInterval = window.setInterval(function() {
            var e = a.instant / 255 * 100;
            $("#" + t).css(n, e.toFixed(2) + "%")
        }, i))
    }), a
}

function SaveQosData(e, t, n) {
    var i = window.indexedDB.open("CallQosData", 1);
    i.onerror = function(e) { console.error("IndexDB Request Error:", e) }, i.onupgradeneeded = function(e) {
        console.warn("Upgrade Required for IndexDB... probably because of first time use.");
        var t = e.target.result;
        if (0 == t.objectStoreNames.contains("CallQos")) {
            var n = t.createObjectStore("CallQos", { keyPath: "uID" });
            n.createIndex("sessionid", "sessionid", { unique: !1 }), n.createIndex("buddy", "buddy", { unique: !1 }), n.createIndex("QosData", "QosData", { unique: !1 })
        } else console.warn("IndexDB requested upgrade, but object store was in place")
    }, i.onsuccess = function(i) {
        console.log("IndexDB connected to CallQosData");
        var a = i.target.result;
        if (0 == a.objectStoreNames.contains("CallQos")) return console.warn("IndexDB CallQosData.CallQos does not exists"), a.close(), void window.indexedDB.deleteDatabase("CallQosData");
        a.onerror = function(e) { console.error("IndexDB Error:", e) };
        var o = { uID: uID(), sessionid: t, buddy: n, QosData: e };
        a.transaction(["CallQos"], "readwrite").objectStore("CallQos").add(o).onsuccess = function(e) { console.log("Call CallQos Sucess: ", t) }
    }
}

function DisplayQosData(e) {
    var t = window.indexedDB.open("CallQosData", 1);
    t.onerror = function(e) { console.error("IndexDB Request Error:", e) }, t.onupgradeneeded = function(e) { console.warn("Upgrade Required for IndexDB... probably because of first time use.") }, t.onsuccess = function(t) {
        console.log("IndexDB connected to CallQosData");
        var n = t.target.result;
        if (0 != n.objectStoreNames.contains("CallQos")) {
            var i = n.transaction(["CallQos"]).objectStore("CallQos").index("sessionid").getAll(e);
            i.onerror = function(e) { console.error("IndexDB Get Error:", e) }, i.onsuccess = function(e) {
                if (e.target.result && 2 == e.target.result.length) {
                    var t = e.target.result[0].QosData,
                        n = e.target.result[1].QosData;
                    Chart.defaults.global.defaultFontSize = 12;
                    var i = { responsive: !0, maintainAspectRatio: !1, animation: !1, scales: { yAxes: [{ ticks: { beginAtZero: !0 } }], xAxes: [{ display: !1 }] } },
                        a = [],
                        o = [],
                        s = t.ReceiveBitRate.length > 0 ? t.ReceiveBitRate : n.ReceiveBitRate;
                    $.each(s, function(e, t) { a.push(moment.utc(t.timestamp.replace(" UTC", "")).local().format(DisplayDateFormat + " " + DisplayTimeFormat)), o.push(t.value) });
                    new Chart($("#cdr-AudioReceiveBitRate"), { type: "line", data: { labels: a, datasets: [{ label: lang.receive_kilobits_per_second, data: o, backgroundColor: "rgba(168, 0, 0, 0.5)", borderColor: "rgba(168, 0, 0, 1)", borderWidth: 1, pointRadius: 1 }] }, options: i }), a = [], o = [], s = t.ReceivePacketRate.length > 0 ? t.ReceivePacketRate : n.ReceivePacketRate;
                    $.each(s, function(e, t) { a.push(moment.utc(t.timestamp.replace(" UTC", "")).local().format(DisplayDateFormat + " " + DisplayTimeFormat)), o.push(t.value) });
                    new Chart($("#cdr-AudioReceivePacketRate"), { type: "line", data: { labels: a, datasets: [{ label: lang.receive_packets_per_second, data: o, backgroundColor: "rgba(168, 0, 0, 0.5)", borderColor: "rgba(168, 0, 0, 1)", borderWidth: 1, pointRadius: 1 }] }, options: i }), a = [], o = [], s = t.ReceivePacketLoss.length > 0 ? t.ReceivePacketLoss : n.ReceivePacketLoss;
                    $.each(s, function(e, t) { a.push(moment.utc(t.timestamp.replace(" UTC", "")).local().format(DisplayDateFormat + " " + DisplayTimeFormat)), o.push(t.value) });
                    new Chart($("#cdr-AudioReceivePacketLoss"), { type: "line", data: { labels: a, datasets: [{ label: lang.receive_packet_loss, data: o, backgroundColor: "rgba(168, 99, 0, 0.5)", borderColor: "rgba(168, 99, 0, 1)", borderWidth: 1, pointRadius: 1 }] }, options: i }), a = [], o = [], s = t.ReceiveJitter.length > 0 ? t.ReceiveJitter : n.ReceiveJitter;
                    $.each(s, function(e, t) { a.push(moment.utc(t.timestamp.replace(" UTC", "")).local().format(DisplayDateFormat + " " + DisplayTimeFormat)), o.push(t.value) });
                    new Chart($("#cdr-AudioReceiveJitter"), { type: "line", data: { labels: a, datasets: [{ label: lang.receive_jitter, data: o, backgroundColor: "rgba(0, 38, 168, 0.5)", borderColor: "rgba(0, 38, 168, 1)", borderWidth: 1, pointRadius: 1 }] }, options: i }), a = [], o = [], s = t.ReceiveLevels.length > 0 ? t.ReceiveLevels : n.ReceiveLevels;
                    $.each(s, function(e, t) { a.push(moment.utc(t.timestamp.replace(" UTC", "")).local().format(DisplayDateFormat + " " + DisplayTimeFormat)), o.push(t.value) });
                    new Chart($("#cdr-AudioReceiveLevels"), { type: "line", data: { labels: a, datasets: [{ label: lang.receive_audio_levels, data: o, backgroundColor: "rgba(140, 0, 168, 0.5)", borderColor: "rgba(140, 0, 168, 1)", borderWidth: 1, pointRadius: 1 }] }, options: i }), a = [], o = [], s = t.SendPacketRate.length > 0 ? t.SendPacketRate : n.SendPacketRate;
                    $.each(s, function(e, t) { a.push(moment.utc(t.timestamp.replace(" UTC", "")).local().format(DisplayDateFormat + " " + DisplayTimeFormat)), o.push(t.value) });
                    new Chart($("#cdr-AudioSendPacketRate"), { type: "line", data: { labels: a, datasets: [{ label: lang.send_packets_per_second, data: o, backgroundColor: "rgba(0, 121, 19, 0.5)", borderColor: "rgba(0, 121, 19, 1)", borderWidth: 1, pointRadius: 1 }] }, options: i }), a = [], o = [], s = t.SendBitRate.length > 0 ? t.SendBitRate : n.SendBitRate;
                    $.each(s, function(e, t) { a.push(moment.utc(t.timestamp.replace(" UTC", "")).local().format(DisplayDateFormat + " " + DisplayTimeFormat)), o.push(t.value) });
                    new Chart($("#cdr-AudioSendBitRate"), { type: "line", data: { labels: a, datasets: [{ label: lang.send_kilobits_per_second, data: o, backgroundColor: "rgba(0, 121, 19, 0.5)", borderColor: "rgba(0, 121, 19, 1)", borderWidth: 1, pointRadius: 1 }] }, options: i })
                } else console.warn("Result not expected", e.target.result)
            }
        } else console.warn("IndexDB CallQosData.CallQos does not exists")
    }
}

function DeleteQosData(e, t) {
    var n = window.indexedDB.open("CallQosData", 1);
    n.onerror = function(e) { console.error("IndexDB Request Error:", e) }, n.onupgradeneeded = function(e) { console.warn("Upgrade Required for IndexDB... probably because of first time use.") }, n.onsuccess = function(e) {
        console.log("IndexDB connected to CallQosData");
        var n = e.target.result;
        0 != n.objectStoreNames.contains("CallQos") ? (n.onerror = function(e) { console.error("IndexDB Error:", e) }, $.each(t.DataCollection, function(e, t) {
            if ("CDR" == t.ItemType && t.SessionId && "" != t.SessionId) {
                console.log("Deleting CallQosData: ", t.SessionId);
                var i = n.transaction(["CallQos"], "readwrite").objectStore("CallQos"),
                    a = i.index("sessionid").getAll(t.SessionId);
                a.onerror = function(e) { console.error("IndexDB Get Error:", e) }, a.onsuccess = function(e) { e.target.result && e.target.result.length > 0 && $.each(e.target.result, function(e, t) { try { i.delete(t.uID) } catch (e) { console.log("Call CallQosData Delete failed: ", e) } }) }
            }
        })) : console.warn("IndexDB CallQosData.CallQos does not exists")
    }
}

function SubscribeAll() { if (userAgent.isRegistered() && (VoiceMailSubscribe && SubscribeVoicemail(), userAgent.BlfSubs && userAgent.BlfSubs.length > 0 && UnsubscribeAll(), userAgent.BlfSubs = [], Buddies.length >= 1)) { console.log("Starting Subscribe of all (" + Buddies.length + ") Extension Buddies..."); for (var e = 0; e < Buddies.length; e++) SubscribeBuddy(Buddies[e]) } }

function SubscribeVoicemail() {
    if (userAgent.isRegistered()) {
        userAgent.VoicemailSub && (console.log("Unsubscribe from old voicemail Messages..."), UnsubscribeVoicemail());
        var e = SIP.UserAgent.makeURI("sip:" + SipUsername + "@" + wssServer);
        userAgent.voicemailSub = new SIP.Subscriber(userAgent, e, "message-summary", { expires: 300 }), userAgent.voicemailSub.delegate = { onNotify: function(e) { VocemailNotify(e) } }, userAgent.voicemailSub.subscribe().catch(function(e) { console.warn("Error subscribing to voimail notifications:", e) })
    }
}

function SubscribeBuddy(e) {
    if (userAgent.isRegistered() && ("extension" == e.type || "xmpp" == e.type) && 1 == e.EnableSubscribe) {
        console.log("SUBSCRIBE: " + e.ExtNo + "@" + wssServer);
        var t = SIP.UserAgent.makeURI("sip:" + e.ExtNo + "@" + wssServer),
            n = new SIP.Subscriber(userAgent, t, "presence", { expires: 300, extraHeaders: ["Accept: application/pidf+xml"] });
        n.data = {}, n.data.buddyId = e.identity, n.delegate = { onNotify: function(e) { RecieveBlf(e) } }, n.subscribe().catch(function(e) { console.warn("Error subscribing to Buddy notifications:", e) }), userAgent.BlfSubs.push(n)
    }
}

function UnsubscribeAll() {
    if (userAgent.isRegistered() && (UnsubscribeVoicemail(), userAgent.BlfSubs && userAgent.BlfSubs.length > 0)) {
        console.log("Unsubscribing " + userAgent.BlfSubs.length + " subscriptions...");
        for (var e = 0; e < userAgent.BlfSubs.length; e++) UnsubscribeBlf(userAgent.BlfSubs[e]);
        userAgent.BlfSubs = [];
        for (var t = 0; t < Buddies.length; t++) { var n = Buddies[t]; "extension" != n.type && "xmpp" != n.type || ($("#contact-" + n.identity + "-devstate").prop("class", "dotOffline"), $("#contact-" + n.identity + "-devstate-main").prop("class", "dotOffline"), $("#contact-" + n.identity + "-presence").html(lang.state_unknown), $("#contact-" + n.identity + "-presence-main").html(lang.state_unknown)) }
    }
}

function UnsubscribeBlf(e) { userAgent.isRegistered() && (e.state == SIP.SubscriptionState.Subscribed && (console.log("Unsubscribe to BLF Messages...", e.data.buddyId), e.unsubscribe().catch(function(e) { console.warn("Error removing BLF notifications:", e) })), e.dispose().catch(function(e) { console.warn("Error disposing BLF notifications:", e) }), e = null) }

function UnsubscribeVoicemail() { userAgent.isRegistered() && (userAgent.VoicemailSub && (userAgent.VoicemailSub.state == SIP.SubscriptionState.Subscribed && (console.log("Unsubscribe to voicemail Messages..."), userAgent.VoicemailSub.unsubscribe().catch(function(e) { console.warn("Error removing voicemail notifications:", e) })), userAgent.VoicemailSub.dispose().catch(function(e) { console.warn("Error disposing voicemail notifications:", e) })), userAgent.VoicemailSub = null) }

function UnsubscribeBuddy(e) {
    if (("extension" == e.type || "xmpp" == e.type) && userAgent.BlfSubs && userAgent.BlfSubs.length > 0)
        for (var t = 0; t < userAgent.BlfSubs.length; t++) { if (userAgent.BlfSubs[t].data.buddyId == e.identity) { UnsubscribeBlf(userAgent.BlfSubs[t]), userAgent.BlfSubs.splice(t, 1); break } }
}

function VocemailNotify(e) { e.request.body.indexOf("Messages-Waiting: yes") > -1 ? (console.log("You have voicemail!"), e.accept()) : e.reject() }

function RecieveBlf(e) {
    if (null != userAgent && userAgent.isRegistered()) {
        e.accept();
        var t = "",
            n = "dotOffline",
            i = "Unknown",
            a = e.request.headers["Content-Type"][0].parsed;
        if ("application/pidf+xml" == a) {
            t = (o = $($.parseXML(e.request.body))).find("presence").find("tuple").attr("id");
            o.find("presence").attr("entity"), o.find("presence").find("tuple").find("contact").text(), o.find("presence").find("tuple").find("status"), o.find("presence").find("tuple").find("status").find("basic").text();
            i = o.find("presence").find("note").text()
        } else if ("application/dialog-info+xml" == a) {
            var o;
            t = (o = $($.parseXML(e.request.body))).find("dialog-info").attr("entity").split("@")[0].split(":")[1];
            o.find("dialog-info").attr("version"), o.find("dialog-info").attr("state"), o.find("dialog-info").find("dialog").attr("id");
            var s = o.find("dialog-info").find("dialog").find("state").text();
            "terminated" == s && (i = "Ready"), "trying" == s && (i = "On the phone"), "proceeding" == s && (i = "On the phone"), "early" == s && (i = "Ringing"), "confirmed" == s && (i = "On the phone")
        }
        var l = FindBuddyByExtNo(t);
        null != l ? ("Not online" == i && (n = "dotOffline"), "Ready" == i && (n = "dotOnline"), "On the phone" == i && (n = "dotInUse"), "Ringing" == i && (n = "dotRinging"), "On hold" == i && (n = "dotOnHold"), "Unavailable" == i && (n = "dotOffline"), console.log("Setting DevSate State for " + l.CallerIDName + " to " + n), l.devState = n, $("#contact-" + l.identity + "-devstate").prop("class", n), $("#contact-" + l.identity + "-devstate-main").prop("class", n), "xmpp" != l.type && (console.log("Setting Presence for " + l.CallerIDName + " to " + i), l.presence = i, "Not online" == i && (i = lang.state_not_online), "Ready" == i && (i = lang.state_ready), "On the phone" == i && (i = lang.state_on_the_phone), "Ringing" == i && (i = lang.state_ringing), "On hold" == i && (i = lang.state_on_hold), "Unavailable" == i && (i = lang.state_unavailable), $("#contact-" + l.identity + "-presence").html(i), $("#contact-" + l.identity + "-presence-main").html(i))) : console.warn("Buddy not found")
    }
}

function InitinaliseStream(e) { return localDB.setItem(e + "-stream", JSON.stringify({ TotalRows: 0, DataCollection: [] })), JSON.parse(localDB.getItem(e + "-stream")) }

function SendChatMessage(e) {
    if (null != userAgent && userAgent.isRegistered()) {
        var t = $("#contact-" + e + "-ChatMessage").val();
        if ("" != (t = $.trim(t))) {
            var n = uID(),
                i = FindBuddyByIdentity(e),
                a = moment.utc().format("YYYY-MM-DD HH:mm:ss UTC"),
                o = JSON.parse(localDB.getItem(e + "-stream"));
            null == o && (o = InitinaliseStream(e));
            var s = { ItemId: n, ItemType: "MSG", ItemDate: a, SrcUserId: profileUserID, Src: '"' + profileName + '" <' + profileUser + ">", DstUserId: e, Dst: "", MessageData: t };
            if (o.DataCollection.push(s), o.TotalRows = o.DataCollection.length, localDB.setItem(e + "-stream", JSON.stringify(o)), "extension" == i.type) {
                var l = SIP.UserAgent.makeURI("sip:" + i.ExtNo + "@" + wssServer);
                console.log("MESSAGE: " + l + " (extension)");
                var r = { requestDelegate: { onAccept: function(e) { console.log("Message Accepted:", n), MarkMessageSent(i, n, !0) }, onReject: function(e) { console.warn("Message Error", e.message.reasonPhrase), MarkMessageNotSent(i, n, !0) } }, requestOptions: { extraHeaders: [] } },
                    d = new SIP.Messager(userAgent, l, t, "text/plain");
                d.message(r).then(function() { "undefined" != typeof web_hook_on_message && web_hook_on_message(d) })
            }
            "xmpp" == i.type && (console.log("MESSAGE: " + i.jid + " (xmpp)"), XmppSendMessage(i, t, n), "undefined" != typeof web_hook_on_message && web_hook_on_message(t)), i.type, $("#contact-" + e + "-ChatMessage").val(""), $("#contact-" + e + "-dictate-message").hide(), $("#contact-" + e + "-emoji-menu").hide(), null != i.recognition && (i.recognition.abort(), i.recognition = null), ClearChatPreview(e), UpdateBuddyActivity(e), RefreshStream(i)
        } else Alert(lang.alert_empty_text_message, lang.no_message)
    }
}

function MarkMessageSent(e, t, n) {
    var i = JSON.parse(localDB.getItem(e.identity + "-stream"));
    null == i && null == i.DataCollection || ($.each(i.DataCollection, function(e, n) { if ("MSG" == n.ItemType && n.ItemId == t) return n.Sent = !0, !1 }), localDB.setItem(e.identity + "-stream", JSON.stringify(i)), n && RefreshStream(e))
}

function MarkMessageNotSent(e, t, n) {
    var i = JSON.parse(localDB.getItem(e.identity + "-stream"));
    null == i && null == i.DataCollection || ($.each(i.DataCollection, function(e, n) { if ("MSG" == n.ItemType && n.ItemId == t) return n.Sent = !1, !1 }), localDB.setItem(e.identity + "-stream", JSON.stringify(i)), n && RefreshStream(e))
}

function MarkDeliveryReceipt(e, t, n) {
    var i = JSON.parse(localDB.getItem(e.identity + "-stream"));
    null == i && null == i.DataCollection || ($.each(i.DataCollection, function(e, n) { if ("MSG" == n.ItemType && n.ItemId == t) return n.Delivered = { state: !0, eventTime: utcDateNow() }, !1 }), localDB.setItem(e.identity + "-stream", JSON.stringify(i)), n && RefreshStream(e))
}

function MarkDisplayReceipt(e, t, n) {
    var i = JSON.parse(localDB.getItem(e.identity + "-stream"));
    null == i && null == i.DataCollection || ($.each(i.DataCollection, function(e, n) { if ("MSG" == n.ItemType && n.ItemId == t) return n.Displayed = { state: !0, eventTime: utcDateNow() }, !1 }), localDB.setItem(e.identity + "-stream", JSON.stringify(i)), n && RefreshStream(e))
}

function MarkMessageRead(e, t) {
    var n = JSON.parse(localDB.getItem(e.identity + "-stream"));
    null == n && null == n.DataCollection || ($.each(n.DataCollection, function(e, n) { "MSG" == n.ItemType && n.ItemId == t && (n.Read = { state: !0, eventTime: utcDateNow() }) }), localDB.setItem(e.identity + "-stream", JSON.stringify(n)), console.log("Set message (" + t + ") as Read"))
}

function ReceiveOutOfDialogMessage(e) {
    var t = e.request.from.displayName,
        n = e.request.from.uri.normal.user,
        i = e.request.headers["Content-Type"].length >= 1 ? e.request.headers["Content-Type"][0].parsed : "Unknown";
    if (i.indexOf("text/plain") > -1) {
        if (console.log("New Incoming Message!", '"' + t + '" <' + n + ">"), n.length > DidLength) return void console.warn("DID length greater then extensions length");
        var a = countSessions("0"),
            o = FindBuddyByDid(n);
        if (null == o) {
            var s = JSON.parse(localDB.getItem(profileUserID + "-Buddies"));
            null == s && (s = InitUserBuddies());
            var l = uID(),
                r = utcDateNow();
            s.DataCollection.push({ Type: "extension", LastActivity: r, ExtensionNumber: n, MobileNumber: "", ContactNumber1: "", ContactNumber2: "", uID: l, cID: null, gID: null, jid: null, DisplayName: t, Description: "", Email: "", MemberCount: 0, EnableDuringDnd: !1, Subscribe: !1 }), AddBuddy(o = new Buddy("extension", l, t, n, "", "", "", r, "", "", jid, !1, !1), !0, 0 == a, !1), s.TotalRows = s.DataCollection.length, localDB.setItem(profileUserID + "-Buddies", JSON.stringify(s))
        }
        var d = e.request.body,
            c = uID(),
            u = utcDateNow();
        e.accept(), AddMessageToStream(o, c, "MSG", d, u), UpdateBuddyActivity(o.identity), RefreshStream(o), ActivateStream(o, d)
    } else console.warn("Unknown Out Of Dialog Message Type: ", i), e.reject();
    "undefined" != typeof web_hook_on_message && web_hook_on_message(e)
}

function AddMessageToStream(e, t, n, i, a) {
    var o = JSON.parse(localDB.getItem(e.identity + "-stream"));
    null == o && (o = InitinaliseStream(e.identity));
    var s = { ItemId: t, ItemType: n, ItemDate: a, SrcUserId: e.identity, Src: '"' + e.CallerIDName + '" <' + e.ExtNo + ">", DstUserId: profileUserID, Dst: "", MessageData: i };
    o.DataCollection.push(s), o.TotalRows = o.DataCollection.length, localDB.setItem(e.identity + "-stream", JSON.stringify(o)), MaxDataStoreDays && MaxDataStoreDays > 0 && (console.log("Cleaning up data: ", MaxDataStoreDays), RemoveBuddyMessageStream(FindBuddyByIdentity(buddy), MaxDataStoreDays))
}

function ActivateStream(e, t) {
    if (!$("#stream-" + e.identity).is(":visible")) {
        if (IncreaseMissedBadge(e.identity), "Notification" in window && "granted" === Notification.permission) {
            var n = getPicture(e.identity),
                i = { body: t.substring(0, 250), icon: n };
            new Notification(lang.message_from + " : " + e.CallerIDName, i).onclick = function(t) { SelectBuddy(e.identity) }
        }
        console.log("Audio:", audioBlobs.Alert.url);
        var a = new Audio(audioBlobs.Alert.blob);
        a.preload = "auto", a.loop = !1, a.oncanplaythrough = function(e) { void 0 !== a.sinkId && "default" != getRingerOutputID() && a.setSinkId(getRingerOutputID()).then(function() { console.log("Set sinkId to:", getRingerOutputID()) }).catch(function(e) { console.warn("Failed not apply setSinkId.", e) }), a.play().then(function() {}).catch(function(e) { console.warn("Unable to play audio file.", e) }) }
    }
}

function AddCallMessage(e, t) {
    var n = JSON.parse(localDB.getItem(e + "-stream"));
    null == n && (n = InitinaliseStream(e));
    var i = moment.utc(),
        a = 0,
        o = 0,
        s = 0,
        l = moment.utc(t.data.callstart.replace(" UTC", "")),
        r = null;
    t.data.startTime ? (r = moment.utc(t.data.startTime), a = moment.duration(i.diff(r)), s = moment.duration(r.diff(l))) : s = moment.duration(i.diff(l)), o = moment.duration(i.diff(l));
    var d = "",
        c = "",
        u = "",
        p = "";
    "inbound" == t.data.calldirection ? (d = e, u = profileUserID, c = "<" + t.remoteIdentity.uri.user + "> " + t.remoteIdentity.displayName, p = "<" + profileUser + "> " + profileName) : "outbound" == t.data.calldirection && (d = profileUserID, u = e, c = "<" + profileUser + "> " + profileName, p = t.remoteIdentity.uri.user);
    var g = t.data.calldirection,
        m = t.data.withvideo,
        f = t.id,
        v = t.data.terminateby,
        h = { CdrId: uID(), ItemType: "CDR", ItemDate: l.format("YYYY-MM-DD HH:mm:ss UTC"), CallAnswer: r ? r.format("YYYY-MM-DD HH:mm:ss UTC") : null, CallEnd: i.format("YYYY-MM-DD HH:mm:ss UTC"), SrcUserId: d, Src: c, DstUserId: u, Dst: p, RingTime: 0 != s ? s.asSeconds() : 0, Billsec: 0 != a ? a.asSeconds() : 0, TotalDuration: 0 != o ? o.asSeconds() : 0, ReasonCode: t.data.reasonCode, ReasonText: t.data.reasonText, WithVideo: m, SessionId: f, CallDirection: g, Terminate: v, MessageData: null, Tags: [], Transfers: t.data.transfer ? t.data.transfer : [], Mutes: t.data.mute ? t.data.mute : [], Holds: t.data.hold ? t.data.hold : [], Recordings: t.data.recordings ? t.data.recordings : [], ConfCalls: t.data.confcalls ? t.data.confcalls : [], ConfbridgeEvents: t.data.ConfbridgeEvents ? t.data.ConfbridgeEvents : [], QOS: [] };
    console.log("New CDR", h), n.DataCollection.push(h), n.TotalRows = n.DataCollection.length, localDB.setItem(e + "-stream", JSON.stringify(n)), UpdateBuddyActivity(e), MaxDataStoreDays && MaxDataStoreDays > 0 && (console.log("Cleaning up data: ", MaxDataStoreDays), RemoveBuddyMessageStream(FindBuddyByIdentity(e), MaxDataStoreDays))
}

function SendImageDataMessage(e, t) {
    if (null != userAgent && userAgent.isRegistered()) {
        var n = '<table class=ourChatMessage cellspacing=0 cellpadding=0><tr><td style="width: 80px"><div class=messageDate>' + moment.utc().format("YYYY-MM-DD HH:mm:ss UTC") + "</div></td><td><div class=ourChatMessageText>" + ('<IMG class=previewImage onClick="PreviewImage(this)" src="' + t + '">') + "</div></td></tr></table>";
        $("#contact-" + e + "-ChatHistory").append(n), updateScroll(e), ImageEditor_Cancel(e), UpdateBuddyActivity(e)
    }
}

function SendFileDataMessage(e, t, n, i) {
    if (null != userAgent && userAgent.isRegistered()) {
        var a = uID();
        $.ajax({
            type: "POST",
            url: "/api/",
            data: "<XML>" + t + "</XML>",
            xhr: function(t) {
                var n = $.ajaxSettings.xhr();
                return n.upload && n.upload.addEventListener("progress", function(t) {
                    var n = t.loaded / t.total * 100;
                    console.log("Progress for upload to " + e + " (" + a + "):" + n), $("#FileProgress-Bar-" + a).css("width", n + "%")
                }, !1), n
            },
            success: function(e, t, n) { $("#FileUpload-" + a).html("Sent"), $("#FileProgress-" + a).hide(), $("#FileProgress-Bar-" + a).css("width", "0%") },
            error: function(e, t, n) { $("#FileUpload-" + a).html("Failed (" + e.status + ")"), $("#FileProgress-" + a).hide(), $("#FileProgress-Bar-" + a).css("width", "100%") }
        });
        var o = utcDateNow(),
            s = !1,
            l = '<i class="fa fa-file"></i>';
        n.toLowerCase().endsWith(".png") && (l = '<i class="fa fa-file-image-o"></i>', s = !0), n.toLowerCase().endsWith(".jpg") && (l = '<i class="fa fa-file-image-o"></i>', s = !0), n.toLowerCase().endsWith(".jpeg") && (l = '<i class="fa fa-file-image-o"></i>', s = !0), n.toLowerCase().endsWith(".bmp") && (l = '<i class="fa fa-file-image-o"></i>', s = !0), n.toLowerCase().endsWith(".gif") && (l = '<i class="fa fa-file-image-o"></i>', s = !0), n.toLowerCase().endsWith(".mov") && (l = '<i class="fa fa-file-video-o"></i>'), n.toLowerCase().endsWith(".avi") && (l = '<i class="fa fa-file-video-o"></i>'), n.toLowerCase().endsWith(".mpeg") && (l = '<i class="fa fa-file-video-o"></i>'), n.toLowerCase().endsWith(".mp4") && (l = '<i class="fa fa-file-video-o"></i>'), n.toLowerCase().endsWith(".mvk") && (l = '<i class="fa fa-file-video-o"></i>'), n.toLowerCase().endsWith(".webm") && (l = '<i class="fa fa-file-video-o"></i>'), n.toLowerCase().endsWith(".wav") && (l = '<i class="fa fa-file-audio-o"></i>'), n.toLowerCase().endsWith(".mp3") && (l = '<i class="fa fa-file-audio-o"></i>'), n.toLowerCase().endsWith(".ogg") && (l = '<i class="fa fa-file-audio-o"></i>'), n.toLowerCase().endsWith(".zip") && (l = '<i class="fa fa-file-archive-o"></i>'), n.toLowerCase().endsWith(".rar") && (l = '<i class="fa fa-file-archive-o"></i>'), n.toLowerCase().endsWith(".tar.gz") && (l = '<i class="fa fa-file-archive-o"></i>'), n.toLowerCase().endsWith(".pdf") && (l = '<i class="fa fa-file-pdf-o"></i>');
        var r = '<DIV><SPAN id="FileUpload-' + a + '">Sending</SPAN>: ' + l + " " + n + "</DIV>";
        r += '<DIV id="FileProgress-' + a + '" class="progressBarContainer"><DIV id="FileProgress-Bar-' + a + '" class="progressBarTrack"></DIV></DIV>', s && (r += '<DIV><IMG class=previewImage onClick="PreviewImage(this)" src="' + t + '"></DIV>');
        var d = '<table class=ourChatMessage cellspacing=0 cellpadding=0><tr><td style="width: 80px"><div class=messageDate>' + o + "</div></td><td><div class=ourChatMessageText>" + r + "</div></td></tr></table>";
        $("#contact-" + e + "-ChatHistory").append(d), updateScroll(e), ImageEditor_Cancel(e), UpdateBuddyActivity(e)
    }
}

function updateLineScroll(e) {
    RefreshLineActivity(e);
    var t = $("#line-" + e + "-CallDetails").get(0);
    t && (t.scrollTop = t.scrollHeight)
}

function updateScroll(e) {
    var t = $("#contact-" + e + "-ChatHistory");
    t.children().length > 0 && t.children().last().get(0).scrollIntoView(!1), t.get(0).scrollTop = t.get(0).scrollHeight
}

function PreviewImage(e) { OpenWindow(e.src, "Preview Image", 600, 800, !1, !0) }

function IncreaseMissedBadge(e) {
    var t = FindBuddyByIdentity(e);
    if (null != t) {
        t.missed += 1;
        var n = JSON.parse(localDB.getItem(profileUserID + "-Buddies"));
        null != n && ($.each(n.DataCollection, function(t, n) { if (n.uID == e || n.cID == e || n.gID == e) return n.missed = n.missed + 1, !1 }), localDB.setItem(profileUserID + "-Buddies", JSON.stringify(n))), $("#contact-" + e + "-missed").text(t.missed), $("#contact-" + e + "-missed").show(), console.log("Set Missed badge for " + t.CallerIDName + " to: " + t.missed)
    }
}

function UpdateBuddyActivity(e, t) {
    var n = FindBuddyByIdentity(e);
    if (null != n) {
        if (t) n.lastActivity = t;
        else {
            var i = utcDateNow();
            n.lastActivity = i
        }
        console.log("Last Activity for " + n.CallerIDName + " is now: " + n.lastActivity);
        var a = JSON.parse(localDB.getItem(profileUserID + "-Buddies"));
        null != a && ($.each(a.DataCollection, function(t, n) { if (n.uID == e || n.cID == e || n.gID == e) return n.LastActivity = i, !1 }), localDB.setItem(profileUserID + "-Buddies", JSON.stringify(a))), UpdateBuddyList()
    }
}

function ClearMissedBadge(e) {
    var t = FindBuddyByIdentity(e);
    if (null != t) {
        t.missed = 0;
        var n = JSON.parse(localDB.getItem(profileUserID + "-Buddies"));
        null != n && ($.each(n.DataCollection, function(t, n) { if (n.uID == e || n.cID == e || n.gID == e) return n.missed = 0, !1 }), localDB.setItem(profileUserID + "-Buddies", JSON.stringify(n))), $("#contact-" + e + "-missed").text(t.missed), $("#contact-" + e + "-missed").hide(400)
    }
}

function VideoCall(e, t, n) {
    if (null != userAgent && userAgent.isRegistered() && null != e)
        if (0 != HasAudioDevice) {
            if (0 == HasVideoDevice) return console.warn("No video devices (webcam) found, switching to audio call."), void AudioCall(e, t);
            var i = navigator.mediaDevices.getSupportedConstraints(),
                a = { earlyMedia: !0, sessionDescriptionHandlerOptions: { constraints: { audio: { deviceId: "default" }, video: { deviceId: "default" } } } },
                o = getAudioSrcID();
            if ("default" != o) {
                for (var s = !1, l = 0; l < AudioinputDevices.length; ++l)
                    if (o == AudioinputDevices[l].deviceId) { s = !0; break }
                s ? a.sessionDescriptionHandlerOptions.constraints.audio.deviceId = { exact: o } : (console.warn("The audio device you used before is no longer available, default settings applied."), localDB.setItem("AudioSrcId", "default"))
            }
            i.autoGainControl && (a.sessionDescriptionHandlerOptions.constraints.audio.autoGainControl = AutoGainControl), i.echoCancellation && (a.sessionDescriptionHandlerOptions.constraints.audio.echoCancellation = EchoCancellation), i.noiseSuppression && (a.sessionDescriptionHandlerOptions.constraints.audio.noiseSuppression = NoiseSuppression);
            var r = getVideoSrcID();
            if ("default" != r) {
                var d = !1;
                for (l = 0; l < VideoinputDevices.length; ++l)
                    if (r == VideoinputDevices[l].deviceId) { d = !0; break }
                d ? a.sessionDescriptionHandlerOptions.constraints.video.deviceId = { exact: r } : (console.warn("The video device you used before is no longer available, default settings applied."), localDB.setItem("VideoSrcId", "default"))
            }
            i.frameRate && "" != maxFrameRate && (a.sessionDescriptionHandlerOptions.constraints.video.frameRate = maxFrameRate), i.height && "" != videoHeight && (a.sessionDescriptionHandlerOptions.constraints.video.height = videoHeight), i.aspectRatio && "" != videoAspectRatio && (a.sessionDescriptionHandlerOptions.constraints.video.aspectRatio = videoAspectRatio), n && (a.extraHeaders = n), $("#line-" + e.LineNumber + "-msg").html(lang.starting_video_call), $("#line-" + e.LineNumber + "-timer").show();
            var c = moment.utc();
            console.log("INVITE (video): " + t + "@" + wssServer);
            var u = SIP.UserAgent.makeURI("sip:" + t + "@" + wssServer);
            e.SipSession = new SIP.Inviter(userAgent, u, a), e.SipSession.data = {}, e.SipSession.data.line = e.LineNumber, e.SipSession.data.buddyId = e.BuddyObj.identity, e.SipSession.data.calldirection = "outbound", e.SipSession.data.dst = t, e.SipSession.data.callstart = c.format("YYYY-MM-DD HH:mm:ss UTC"), e.SipSession.data.callTimer = window.setInterval(function() {
                var t = moment.utc(),
                    n = moment.duration(t.diff(c));
                $("#line-" + e.LineNumber + "-timer").html(formatShortDuration(n.asSeconds()))
            }, 1e3), e.SipSession.data.VideoSourceDevice = getVideoSrcID(), e.SipSession.data.AudioSourceDevice = getAudioSrcID(), e.SipSession.data.AudioOutputDevice = getAudioOutputID(), e.SipSession.data.terminateby = "them", e.SipSession.data.withvideo = !0, e.SipSession.data.earlyReject = !1, e.SipSession.isOnHold = !1, e.SipSession.delegate = { onBye: function(t) { onSessionRecievedBye(e, t) }, onMessage: function(t) { onSessionRecievedMessage(e, t) }, onInvite: function(t) { onSessionReinvited(e, t) }, onSessionDescriptionHandler: function(t, n) { onSessionDescriptionHandlerCreated(e, t, n, !0) } };
            var p = { requestDelegate: { onTrying: function(t) { onInviteTrying(e, t) }, onProgress: function(t) { onInviteProgress(e, t) }, onRedirect: function(t) { onInviteRedirected(e, t) }, onAccept: function(t) { onInviteAccepted(e, !0, t) }, onReject: function(t) { onInviteRejected(e, t) } } };
            e.SipSession.invite(p).catch(function(e) { console.warn("Failed to send INVITE:", e) }), $("#line-" + e.LineNumber + "-btn-settings").removeAttr("disabled"), $("#line-" + e.LineNumber + "-btn-audioCall").prop("disabled", "disabled"), $("#line-" + e.LineNumber + "-btn-videoCall").prop("disabled", "disabled"), $("#line-" + e.LineNumber + "-btn-search").removeAttr("disabled"), $("#line-" + e.LineNumber + "-btn-remove").prop("disabled", "disabled"), $("#line-" + e.LineNumber + "-progress").show(), $("#line-" + e.LineNumber + "-msg").show(), UpdateUI(), UpdateBuddyList(), updateLineScroll(e.LineNumber), "undefined" != typeof web_hook_on_invite && web_hook_on_invite(e.SipSession)
        } else Alert(lang.alert_no_microphone)
}

function AudioCallMenu(e, t) {
    var n = FindBuddyByIdentity(e);
    if (null != n) {
        var i = [];
        if ("extension" == n.type || "xmpp" == n.type ? (i.push({ icon: "fa fa-phone-square", text: lang.call_extension + " (" + n.ExtNo + ")", value: n.ExtNo }), null != n.MobileNumber && "" != n.MobileNumber && i.push({ icon: "fa fa-mobile", text: lang.call_mobile + " (" + n.MobileNumber + ")", value: n.MobileNumber }), null != n.ContactNumber1 && "" != n.ContactNumber1 && i.push({ icon: "fa fa-phone", text: lang.call_number + " (" + n.ContactNumber1 + ")", value: n.ContactNumber1 }), null != n.ContactNumber2 && "" != n.ContactNumber2 && i.push({ icon: "fa fa-phone", text: lang.call_number + " (" + n.ContactNumber2 + ")", value: n.ContactNumber2 })) : "contact" == n.type ? (null != n.MobileNumber && "" != n.MobileNumber && i.push({ icon: "fa fa-mobile", text: lang.call_mobile + " (" + n.MobileNumber + ")", value: n.MobileNumber }), null != n.ContactNumber1 && "" != n.ContactNumber1 && i.push({ icon: "fa fa-phone", text: lang.call_number + " (" + n.ContactNumber1 + ")", value: n.ContactNumber1 }), null != n.ContactNumber2 && "" != n.ContactNumber2 && i.push({ icon: "fa fa-phone", text: lang.call_number + " (" + n.ContactNumber2 + ")", value: n.ContactNumber2 })) : "group" == n.type && null != n.MobileNumber && "" != n.MobileNumber && i.push({ icon: "fa fa-users", text: lang.call_group, value: n.ExtNo }), 0 != i.length)
            if (1 == i.length) console.log("Automatically calling only number - AudioCall(" + e + ", " + i[0].value + ")"), DialByLine("audio", e, i[0].value);
            else PopupMenu(t, {
                selectEvent: function(t, n) {
                    var i = n.item.attr("value");
                    HidePopup(), null != i && (console.log("Menu click AudioCall(" + e + ", " + i + ")"), DialByLine("audio", e, i))
                },
                createEvent: null,
                autoFocus: !0,
                items: i
            });
        else console.error("No numbers to dial")
    }
}

function AudioCall(e, t, n) {
    if (null != userAgent && 0 != userAgent.isRegistered() && null != e)
        if (0 != HasAudioDevice) {
            var i = navigator.mediaDevices.getSupportedConstraints(),
                a = { earlyMedia: !0, sessionDescriptionHandlerOptions: { constraints: { audio: { deviceId: "default" }, video: !1 } } },
                o = getAudioSrcID();
            if ("default" != o) {
                for (var s = !1, l = 0; l < AudioinputDevices.length; ++l)
                    if (o == AudioinputDevices[l].deviceId) { s = !0; break }
                s ? a.sessionDescriptionHandlerOptions.constraints.audio.deviceId = { exact: o } : (console.warn("The audio device you used before is no longer available, default settings applied."), localDB.setItem("AudioSrcId", "default"))
            }
            i.autoGainControl && (a.sessionDescriptionHandlerOptions.constraints.audio.autoGainControl = AutoGainControl), i.echoCancellation && (a.sessionDescriptionHandlerOptions.constraints.audio.echoCancellation = EchoCancellation), i.noiseSuppression && (a.sessionDescriptionHandlerOptions.constraints.audio.noiseSuppression = NoiseSuppression), n && (a.extraHeaders = n), $("#line-" + e.LineNumber + "-msg").html(lang.starting_audio_call), $("#line-" + e.LineNumber + "-timer").show();
            var r = moment.utc();
            console.log("INVITE (audio): " + t + "@" + wssServer);
            var d = SIP.UserAgent.makeURI("sip:" + t + "@" + wssServer);
            e.SipSession = new SIP.Inviter(userAgent, d, a), e.SipSession.data = {}, e.SipSession.data.line = e.LineNumber, e.SipSession.data.buddyId = e.BuddyObj.identity, e.SipSession.data.calldirection = "outbound", e.SipSession.data.dst = t, e.SipSession.data.callstart = r.format("YYYY-MM-DD HH:mm:ss UTC"), e.SipSession.data.callTimer = window.setInterval(function() {
                var t = moment.utc(),
                    n = moment.duration(t.diff(r));
                $("#line-" + e.LineNumber + "-timer").html(formatShortDuration(n.asSeconds()))
            }, 1e3), e.SipSession.data.VideoSourceDevice = null, e.SipSession.data.AudioSourceDevice = getAudioSrcID(), e.SipSession.data.AudioOutputDevice = getAudioOutputID(), e.SipSession.data.terminateby = "them", e.SipSession.data.withvideo = !1, e.SipSession.data.earlyReject = !1, e.SipSession.isOnHold = !1, e.SipSession.delegate = { onBye: function(t) { onSessionRecievedBye(e, t) }, onMessage: function(t) { onSessionRecievedMessage(e, t) }, onInvite: function(t) { onSessionReinvited(e, t) }, onSessionDescriptionHandler: function(t, n) { onSessionDescriptionHandlerCreated(e, t, n, !1) } };
            var c = { requestDelegate: { onTrying: function(t) { onInviteTrying(e, t) }, onProgress: function(t) { onInviteProgress(e, t) }, onRedirect: function(t) { onInviteRedirected(e, t) }, onAccept: function(t) { onInviteAccepted(e, !1, t) }, onReject: function(t) { onInviteRejected(e, t) } } };
            e.SipSession.invite(c).catch(function(e) { console.warn("Failed to send INVITE:", e) }), $("#line-" + e.LineNumber + "-btn-settings").removeAttr("disabled"), $("#line-" + e.LineNumber + "-btn-audioCall").prop("disabled", "disabled"), $("#line-" + e.LineNumber + "-btn-videoCall").prop("disabled", "disabled"), $("#line-" + e.LineNumber + "-btn-search").removeAttr("disabled"), $("#line-" + e.LineNumber + "-btn-remove").prop("disabled", "disabled"), $("#line-" + e.LineNumber + "-progress").show(), $("#line-" + e.LineNumber + "-msg").show(), UpdateUI(), UpdateBuddyList(), updateLineScroll(e.LineNumber), "undefined" != typeof web_hook_on_invite && web_hook_on_invite(e.SipSession)
        } else Alert(lang.alert_no_microphone)
}

function getSession(e) { if (null == userAgent) return console.warn("userAgent is null"), null; if (0 == userAgent.isRegistered()) return console.warn("userAgent is not registered"), null; var t = null; return $.each(userAgent.sessions, function(n, i) { if (i.data.buddyId == e) return t = i, !1 }), t }

function countSessions(e) { var t = 0; return null == userAgent ? (console.warn("userAgent is null"), 0) : ($.each(userAgent.sessions, function(n, i) { e != i.id && t++ }), t) }

function SaveCallRecording(e, t, n, i) {
    var a = window.indexedDB.open("CallRecordings", 1);
    a.onerror = function(e) { console.error("IndexDB Request Error:", e) }, a.onupgradeneeded = function(e) {
        console.warn("Upgrade Required for IndexDB... probably because of first time use.");
        var t = e.target.result;
        if (0 == t.objectStoreNames.contains("Recordings")) {
            var n = t.createObjectStore("Recordings", { keyPath: "uID" });
            n.createIndex("sessionid", "sessionid", { unique: !1 }), n.createIndex("bytes", "bytes", { unique: !1 }), n.createIndex("type", "type", { unique: !1 }), n.createIndex("mediaBlob", "mediaBlob", { unique: !1 })
        } else console.warn("IndexDB requested upgrade, but object store was in place.")
    }, a.onsuccess = function(a) {
        console.log("IndexDB connected to CallRecordings");
        var o = a.target.result;
        if (0 == o.objectStoreNames.contains("Recordings")) return console.warn("IndexDB CallRecordings.Recordings does not exists, this call recoding will not be saved."), o.close(), void window.indexedDB.deleteDatabase("CallRecordings");
        o.onerror = function(e) { console.error("IndexDB Error:", e) };
        var s = { uID: t, sessionid: i, bytes: e.size, type: e.type, mediaBlob: e };
        o.transaction(["Recordings"], "readwrite").objectStore("Recordings").add(s).onsuccess = function(a) { console.log("Call Recording Sucess: ", t, e.size, e.type, n, i) }
    }
}

function StopRecording(e, t) { var n = FindLineByNumber(e); if (null != n && null != n.SipSession) { var i = n.SipSession; if (1 == t) return $("#line-" + n.LineNumber + "-btn-start-recording").show(), $("#line-" + n.LineNumber + "-btn-stop-recording").hide(), void(i.data.mediaRecorder && ("recording" == i.data.mediaRecorder.state ? (console.log("Stopping Call Recording"), i.data.mediaRecorder.stop(), i.data.recordings[i.data.recordings.length - 1].stopTime = utcDateNow(), window.clearInterval(i.data.recordingRedrawInterval), $("#line-" + n.LineNumber + "-msg").html(lang.call_recording_stopped), updateLineScroll(e)) : console.warn("Recorder is in an unknow state"))); "enabled" != CallRecordingPolicy ? (RestoreVideoArea(e), Confirm(lang.confirm_stop_recording, lang.stop_recording, function() { StopRecording(e, !0) })) : console.warn("Policy Enabled: Call Recording") } }

function PlayAudioCallRecording(e, t, n) {
    var i = $(e).parent();
    i.empty();
    var a = new Audio;
    a.autoplay = !1, a.controls = !0;
    var o = getAudioOutputID();
    void 0 !== a.sinkId ? a.setSinkId(o).then(function() { console.log("sinkId applied: " + o) }).catch(function(e) { console.warn("Error using setSinkId: ", e) }) : console.warn("setSinkId() is not possible using this browser."), i.append(a);
    var s = window.indexedDB.open("CallRecordings", 1);
    s.onerror = function(e) { console.error("IndexDB Request Error:", e) }, s.onupgradeneeded = function(e) { console.warn("Upgrade Required for IndexDB... probably because of first time use.") }, s.onsuccess = function(e) {
        console.log("IndexDB connected to CallRecordings");
        var i = e.target.result;
        if (0 != i.objectStoreNames.contains("Recordings")) {
            var o = i.transaction(["Recordings"]).objectStore("Recordings").get(n);
            o.onerror = function(e) { console.error("IndexDB Get Error:", e) }, o.onsuccess = function(e) { $("#cdr-media-meta-size-" + t + "-" + n).html(" Size: " + formatBytes(e.target.result.bytes)), $("#cdr-media-meta-codec-" + t + "-" + n).html(" Codec: " + e.target.result.type), a.src = window.URL.createObjectURL(e.target.result.mediaBlob), a.oncanplaythrough = function() { a.play().then(function() { console.log("Playback started") }).catch(function(e) { console.error("Error playing back file: ", e) }) } }
        } else console.warn("IndexDB CallRecordings.Recordings does not exists")
    }
}

function PlayVideoCallRecording(e, t, n, i) {
    var a = $(e).parent();
    a.empty();
    var o = $("<video>").get(0);
    o.id = "callrecording-video-" + t, o.autoplay = !1, o.controls = !0, o.ontimeupdate = function(e) { $("#cdr-video-meta-width-" + t + "-" + n).html(lang.width + " : " + e.target.videoWidth + "px"), $("#cdr-video-meta-height-" + t + "-" + n).html(lang.height + " : " + e.target.videoHeight + "px") };
    var s = getAudioOutputID();
    void 0 !== o.sinkId ? o.setSinkId(s).then(function() { console.log("sinkId applied: " + s) }).catch(function(e) { console.warn("Error using setSinkId: ", e) }) : console.warn("setSinkId() is not possible using this browser."), a.append(o);
    var l = window.indexedDB.open("CallRecordings", 1);
    l.onerror = function(e) { console.error("IndexDB Request Error:", e) }, l.onupgradeneeded = function(e) { console.warn("Upgrade Required for IndexDB... probably because of first time use.") }, l.onsuccess = function(e) {
        console.log("IndexDB connected to CallRecordings");
        var a = e.target.result;
        if (0 != a.objectStoreNames.contains("Recordings")) {
            var s = a.transaction(["Recordings"]).objectStore("Recordings").get(n);
            s.onerror = function(e) { console.error("IndexDB Get Error:", e) }, s.onsuccess = function(e) {
                $("#cdr-media-meta-size-" + t + "-" + n).html(" Size: " + formatBytes(e.target.result.bytes)), $("#cdr-media-meta-codec-" + t + "-" + n).html(" Codec: " + e.target.result.type), o.src = window.URL.createObjectURL(e.target.result.mediaBlob), o.oncanplaythrough = function() {
                    try { o.scrollIntoViewIfNeeded(!1) } catch (e) {}
                    o.play().then(function() { console.log("Playback started") }).catch(function(e) { console.error("Error playing back file: ", e) }), i && window.setTimeout(function() {
                        var e = $("<canvas>").get(0),
                            a = o.videoWidth,
                            s = o.videoHeight;
                        if (a > s) {
                            if (s > 225) {
                                var l = 225 / s;
                                s = 225, a *= l
                            }
                        } else if (s > 225) {
                            l = 225 / a;
                            a = 225, s *= l
                        }
                        e.width = a, e.height = s, e.getContext("2d").drawImage(o, 0, 0, a, s), e.toBlob(function(e) {
                            var o = new FileReader;
                            o.readAsDataURL(e), o.onloadend = function() {
                                var e = { width: a, height: s, posterBase64: o.result };
                                console.log("Capturing Video Poster...");
                                var l = JSON.parse(localDB.getItem(i + "-stream"));
                                null == l && null == l.DataCollection || ($.each(l.DataCollection, function(i, a) { if ("CDR" == a.ItemType && a.CdrId == t) return a.Recordings && a.Recordings.length >= 1 && $.each(a.Recordings, function(t, i) { i.uID == n && (i.Poster = e) }), !1 }), localDB.setItem(i + "-stream", JSON.stringify(l)), console.log("Capturing Video Poster, Done"))
                            }
                        }, "image/jpeg", PosterJpegQuality)
                    }, 1e3)
                }
            }
        } else console.warn("IndexDB CallRecordings.Recordings does not exists")
    }
}

function MixAudioStreams(e) {
    var t = null;
    try { window.AudioContext = window.AudioContext || window.webkitAudioContext, t = new AudioContext } catch (t) { return console.warn("AudioContext() not available, cannot record"), e }
    var n = t.createMediaStreamDestination();
    return e.getAudioTracks().forEach(function(e) {
        var i = new MediaStream;
        i.addTrack(e), t.createMediaStreamSource(i).connect(n)
    }), n.stream
}

function QuickFindBuddy(e) {
    var t = e.value;
    if ("" != t) {
        console.log("Find Buddy: ", t), Buddies.sort(function(e, t) { return e.CallerIDName < t.CallerIDName ? -1 : e.CallerIDName > t.CallerIDName ? 1 : 0 });
        for (var n = [], i = 0, a = 0; a < Buddies.length; a++) {
            var o = Buddies[a],
                s = !1;
            if (o.CallerIDName.toLowerCase().indexOf(t.toLowerCase()) > -1 && (s = !0), o.ExtNo.toLowerCase().indexOf(t.toLowerCase()) > -1 && (s = !0), o.Desc.toLowerCase().indexOf(t.toLowerCase()) > -1 && (s = !0), o.MobileNumber.toLowerCase().indexOf(t.toLowerCase()) > -1 && (s = !0), o.ContactNumber1.toLowerCase().indexOf(t.toLowerCase()) > -1 && (s = !0), o.ContactNumber2.toLowerCase().indexOf(t.toLowerCase()) > -1 && (s = !0), s) { "Unknown" != o.presence && "Not online" != o.presence && "Unavailable" != o.presence || "#666666", "Ready" == o.presence && "#3fbd3f", "On the phone" != o.presence && "Ringing" != o.presence && "On hold" != o.presence || "#c99606", i > 0 && n.push({ value: null, text: "-" }), n.push({ value: null, text: o.CallerIDName, isHeader: !0 }), "" != o.ExtNo && n.push({ icon: "fa fa-phone-square", text: lang.extension + " (" + o.presence + "): " + o.ExtNo, value: o.ExtNo }), "" != o.MobileNumber && n.push({ icon: "fa fa-mobile", text: lang.mobile + ": " + o.MobileNumber, value: o.MobileNumber }), "" != o.ContactNumber1 && n.push({ icon: "fa fa-phone", text: lang.call + ": " + o.ContactNumber1, value: o.ContactNumber1 }), "" != o.ContactNumber2 && n.push({ icon: "fa fa-phone", text: lang.call + ": " + o.ContactNumber2, value: o.ContactNumber2 }), i++ }
            if (i >= 5) break
        }
        if (n.length > 1) {
            var l = {
                selectEvent: function(t, n) {
                    var i = n.item.attr("value");
                    null == i && HidePopup(), "null" != i && "" != i && null != i && (HidePopup(), e.value = i)
                },
                createEvent: null,
                autoFocus: !1,
                items: n
            };
            PopupMenu(e, l)
        } else HidePopup()
    }
}

function StartTransferSession(e) { $("#line-" + e + "-btn-CancelConference").is(":visible") ? CancelConference(e) : ($("#line-" + e + "-btn-Transfer").hide(), $("#line-" + e + "-btn-CancelTransfer").show(), holdSession(e), $("#line-" + e + "-txt-FindTransferBuddy").val(""), $("#line-" + e + "-txt-FindTransferBuddy").parent().show(), $("#line-" + e + "-btn-blind-transfer").show(), $("#line-" + e + "-btn-attended-transfer").show(), $("#line-" + e + "-btn-complete-transfer").hide(), $("#line-" + e + "-btn-cancel-transfer").hide(), $("#line-" + e + "-btn-complete-attended-transfer").hide(), $("#line-" + e + "-btn-cancel-attended-transfer").hide(), $("#line-" + e + "-btn-terminate-attended-transfer").hide(), $("#line-" + e + "-transfer-status").hide(), $("#line-" + e + "-Transfer").show(), updateLineScroll(e)) }

function CancelTransferSession(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        var n = t.SipSession;
        n.data.childsession && (console.log("Child Transfer call detected:", n.data.childsession.state), n.data.childsession.dispose().then(function() { n.data.childsession = null }).catch(function(e) { n.data.childsession = null })), $("#line-" + e + "-btn-Transfer").show(), $("#line-" + e + "-btn-CancelTransfer").hide(), unholdSession(e), $("#line-" + e + "-Transfer").hide(), updateLineScroll(e)
    } else console.warn("Null line or session")
}

function BlindTransfer(e) {
    var t = $("#line-" + e + "-txt-FindTransferBuddy").val().replace(/[^0-9\*\#\+]/g, "");
    if ("" != t) {
        var n = FindLineByNumber(e);
        if (null != n && null != n.SipSession) {
            var i = n.SipSession;
            i.data.transfer || (i.data.transfer = []), i.data.transfer.push({ type: "Blind", to: t, transferTime: utcDateNow(), disposition: "refer", dispositionTime: utcDateNow(), accept: { complete: null, eventTime: null, disposition: "" } });
            var a = i.data.transfer.length - 1,
                o = { requestDelegate: { onAccept: function(t) { console.log("Blind transfer Accepted"), i.data.terminateby = "us", i.data.reasonCode = 202, i.data.reasonText = "Transfer", i.data.transfer[a].accept.complete = !0, i.data.transfer[a].accept.disposition = t.message.reasonPhrase, i.data.transfer[a].accept.eventTime = utcDateNow(), $("#line-" + e + "-msg").html("Call Blind Transfered (Accepted)"), updateLineScroll(e), i.bye().catch(function(e) { console.warn("Could not BYE after blind transfer:", e) }), teardownSession(n) }, onReject: function(t) { console.warn("REFER rejected:", t), i.data.transfer[a].accept.complete = !1, i.data.transfer[a].accept.disposition = t.message.reasonPhrase, i.data.transfer[a].accept.eventTime = utcDateNow(), $("#line-" + e + "-msg").html("Call Blind Failed!"), updateLineScroll(e) } } };
            console.log("REFER: ", t + "@" + wssServer);
            var s = SIP.UserAgent.makeURI("sip:" + t + "@" + wssServer);
            i.refer(s, o).catch(function(e) { console.warn("Failed to REFER", e) }), $("#line-" + e + "-msg").html(lang.call_blind_transfered), updateLineScroll(e)
        } else console.warn("Null line or session")
    } else console.warn("Cannot transfer, must be [0-9*+#]")
}

function AttendedTransfer(e) {
    var t = $("#line-" + e + "-txt-FindTransferBuddy").val().replace(/[^0-9\*\#\+]/g, "");
    if ("" != t) {
        var n = FindLineByNumber(e);
        if (null != n && null != n.SipSession) {
            var i = n.SipSession;
            HidePopup(), $("#line-" + e + "-txt-FindTransferBuddy").parent().hide(), $("#line-" + e + "-btn-blind-transfer").hide(), $("#line-" + e + "-btn-attended-transfer").hide(), $("#line-" + e + "-btn-complete-attended-transfer").hide(), $("#line-" + e + "-btn-cancel-attended-transfer").hide(), $("#line-" + e + "-btn-terminate-attended-transfer").hide();
            var a = $("#line-" + e + "-transfer-status");
            a.html(lang.connecting), a.show(), i.data.transfer || (i.data.transfer = []), i.data.transfer.push({ type: "Attended", to: t, transferTime: utcDateNow(), disposition: "invite", dispositionTime: utcDateNow(), accept: { complete: null, eventTime: null, disposition: "" } });
            var o = i.data.transfer.length - 1;
            updateLineScroll(e);
            var s = navigator.mediaDevices.getSupportedConstraints(),
                l = { earlyMedia: !0, sessionDescriptionHandlerOptions: { constraints: { audio: { deviceId: "default" }, video: !1 } } };
            "default" != i.data.AudioSourceDevice && (l.sessionDescriptionHandlerOptions.constraints.audio.deviceId = { exact: i.data.AudioSourceDevice }), s.autoGainControl && (l.sessionDescriptionHandlerOptions.constraints.audio.autoGainControl = AutoGainControl), s.echoCancellation && (l.sessionDescriptionHandlerOptions.constraints.audio.echoCancellation = EchoCancellation), s.noiseSuppression && (l.sessionDescriptionHandlerOptions.constraints.audio.noiseSuppression = NoiseSuppression), i.data.withvideo && (l.sessionDescriptionHandlerOptions.constraints.video = !0, "default" != i.data.VideoSourceDevice && (l.sessionDescriptionHandlerOptions.constraints.video.deviceId = { exact: i.data.VideoSourceDevice }), s.frameRate && "" != maxFrameRate && (l.sessionDescriptionHandlerOptions.constraints.video.frameRate = maxFrameRate), s.height && "" != videoHeight && (l.sessionDescriptionHandlerOptions.constraints.video.height = videoHeight), s.aspectRatio && "" != videoAspectRatio && (l.sessionDescriptionHandlerOptions.constraints.video.aspectRatio = videoAspectRatio)), console.log("TRANSFER INVITE: ", "sip:" + t + "@" + wssServer);
            var r = SIP.UserAgent.makeURI("sip:" + t + "@" + wssServer),
                d = new SIP.Inviter(userAgent, r, l);
            d.data = {}, d.delegate = {
                onBye: function(t) { console.log("New call session ended with BYE"), a.html(lang.call_ended), i.data.transfer[o].disposition = "bye", i.data.transfer[o].dispositionTime = utcDateNow(), $("#line-" + e + "-txt-FindTransferBuddy").parent().show(), $("#line-" + e + "-btn-blind-transfer").show(), $("#line-" + e + "-btn-attended-transfer").show(), $("#line-" + e + "-btn-complete-attended-transfer").hide(), $("#line-" + e + "-btn-cancel-attended-transfer").hide(), $("#line-" + e + "-btn-terminate-attended-transfer").hide(), $("#line-" + e + "-msg").html(lang.attended_transfer_call_terminated), updateLineScroll(e), window.setTimeout(function() { a.hide(), updateLineScroll(e) }, 1e3) },
                onSessionDescriptionHandler: function(t, n) {
                    t ? t.peerConnection ? t.peerConnection.ontrack = function(n) {
                        var a = t.peerConnection,
                            o = new MediaStream;
                        a.getReceivers().forEach(function(e) { e.track && "audio" == e.track.kind && o.addTrack(e.track) });
                        var s = $("#line-" + e + "-transfer-remoteAudio").get(0);
                        s.srcObject = o, s.onloadedmetadata = function(e) { void 0 !== s.sinkId && s.setSinkId(i.data.AudioOutputDevice).then(function() { console.log("sinkId applied: " + i.data.AudioOutputDevice) }).catch(function(e) { console.warn("Error using setSinkId: ", e) }), s.play() }
                    } : console.warn("onSessionDescriptionHandler fired without a peerConnection") : console.warn("onSessionDescriptionHandler fired without a sessionDescriptionHandler")
                }
            }, i.data.childsession = d;
            var c = {
                requestDelegate: {
                    onTrying: function(t) { a.html(lang.trying), i.data.transfer[o].disposition = "trying", i.data.transfer[o].dispositionTime = utcDateNow(), $("#line-" + e + "-msg").html(lang.attended_transfer_call_started) },
                    onProgress: function(t) {
                        a.html(lang.ringing), i.data.transfer[o].disposition = "progress", i.data.transfer[o].dispositionTime = utcDateNow(), $("#line-" + e + "-msg").html(lang.attended_transfer_call_started);
                        var n = $("#line-" + e + "-btn-cancel-attended-transfer");
                        n.off("click"), n.on("click", function() { d.cancel().catch(function(e) { console.warn("Failed to CANCEL", e) }), a.html(lang.call_cancelled), console.log("New call session canceled"), i.data.transfer[o].accept.complete = !1, i.data.transfer[o].accept.disposition = "cancel", i.data.transfer[o].accept.eventTime = utcDateNow(), $("#line-" + e + "-msg").html(lang.attended_transfer_call_cancelled), updateLineScroll(e) }), n.show(), updateLineScroll(e)
                    },
                    onRedirect: function(e) { console.log("Redirect received:", e) },
                    onAccept: function(t) {
                        a.html(lang.call_in_progress), $("#line-" + e + "-btn-cancel-attended-transfer").hide(), i.data.transfer[o].disposition = "accepted", i.data.transfer[o].dispositionTime = utcDateNow();
                        var s = $("#line-" + e + "-btn-complete-attended-transfer");
                        s.off("click"), s.on("click", function() {
                            var t = { requestDelegate: { onAccept: function(t) { console.log("Attended transfer Accepted"), i.data.terminateby = "us", i.data.reasonCode = 202, i.data.reasonText = "Attended Transfer", i.data.transfer[o].accept.complete = !0, i.data.transfer[o].accept.disposition = t.message.reasonPhrase, i.data.transfer[o].accept.eventTime = utcDateNow(), $("#line-" + e + "-msg").html(lang.attended_transfer_complete_accepted), updateLineScroll(e), i.bye().catch(function(e) { console.warn("Could not BYE after blind transfer:", e) }), teardownSession(n) }, onReject: function(t) { console.warn("Attended transfer rejected:", t), i.data.transfer[o].accept.complete = !1, i.data.transfer[o].accept.disposition = t.message.reasonPhrase, i.data.transfer[o].accept.eventTime = utcDateNow(), $("#line-" + e + "-msg").html("Attended Transfer Failed!"), updateLineScroll(e) } } };
                            i.refer(d, t).catch(function(e) { console.warn("Failed to REFER", e) }), a.html(lang.attended_transfer_complete), updateLineScroll(e)
                        }), s.show(), updateLineScroll(e);
                        var l = $("#line-" + e + "-btn-terminate-attended-transfer");
                        l.off("click"), l.on("click", function() { d.bye().catch(function(e) { console.warn("Failed to BYE", e) }), a.html(lang.call_ended), console.log("New call session end"), i.data.transfer[o].accept.complete = !1, i.data.transfer[o].accept.disposition = "bye", i.data.transfer[o].accept.eventTime = utcDateNow(), $("#line-" + e + "-btn-complete-attended-transfer").hide(), $("#line-" + e + "-btn-cancel-attended-transfer").hide(), $("#line-" + e + "-btn-terminate-attended-transfer").hide(), $("#line-" + e + "-msg").html(lang.attended_transfer_call_ended), updateLineScroll(e), window.setTimeout(function() { a.hide(), CancelTransferSession(e), updateLineScroll(e) }, 1e3) }), l.show(), updateLineScroll(e)
                    },
                    onReject: function(t) { console.log("New call session rejected: ", t.message.reasonPhrase), a.html(lang.call_rejected), i.data.transfer[o].disposition = t.message.reasonPhrase, i.data.transfer[o].dispositionTime = utcDateNow(), $("#line-" + e + "-txt-FindTransferBuddy").parent().show(), $("#line-" + e + "-btn-blind-transfer").show(), $("#line-" + e + "-btn-attended-transfer").show(), $("#line-" + e + "-btn-complete-attended-transfer").hide(), $("#line-" + e + "-btn-cancel-attended-transfer").hide(), $("#line-" + e + "-btn-terminate-attended-transfer").hide(), $("#line-" + e + "-msg").html(lang.attended_transfer_call_rejected), updateLineScroll(e), window.setTimeout(function() { a.hide(), updateLineScroll(e) }, 1e3) }
                }
            };
            d.invite(c).catch(function(e) { console.warn("Failed to send INVITE:", e) })
        } else console.warn("Null line or session")
    } else console.warn("Cannot transfer, must be [0-9*+#]")
}

function StartConferenceCall(e) { $("#line-" + e + "-btn-CancelTransfer").is(":visible") ? CancelTransferSession(e) : ($("#line-" + e + "-btn-Conference").hide(), $("#line-" + e + "-btn-CancelConference").show(), holdSession(e), $("#line-" + e + "-txt-FindConferenceBuddy").val(""), $("#line-" + e + "-txt-FindConferenceBuddy").parent().show(), $("#line-" + e + "-btn-conference-dial").show(), $("#line-" + e + "-btn-cancel-conference-dial").hide(), $("#line-" + e + "-btn-join-conference-call").hide(), $("#line-" + e + "-btn-terminate-conference-call").hide(), $("#line-" + e + "-conference-status").hide(), $("#line-" + e + "-Conference").show(), updateLineScroll(e)) }

function CancelConference(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        var n = t.SipSession;
        n.data.childsession && (console.log("Child Conference call detected:", n.data.childsession.state), n.data.childsession.dispose().then(function() { n.data.childsession = null }).catch(function(e) { n.data.childsession = null })), $("#line-" + e + "-btn-Conference").show(), $("#line-" + e + "-btn-CancelConference").hide(), unholdSession(e), $("#line-" + e + "-Conference").hide(), updateLineScroll(e)
    } else console.warn("Null line or session")
}

function ConferenceDail(t) {
    var n = $("#line-" + t + "-txt-FindConferenceBuddy").val().replace(/[^0-9\*\#\+]/g, "");
    if ("" != n) {
        var i = FindLineByNumber(t);
        if (null != i && null != i.SipSession) {
            var a = i.SipSession;
            HidePopup(), $("#line-" + t + "-txt-FindConferenceBuddy").parent().hide(), $("#line-" + t + "-btn-conference-dial").hide(), $("#line-" + t + "-btn-cancel-conference-dial"), $("#line-" + t + "-btn-join-conference-call").hide(), $("#line-" + t + "-btn-terminate-conference-call").hide();
            var o = $("#line-" + t + "-conference-status");
            o.html(lang.connecting), o.show(), a.data.confcalls || (a.data.confcalls = []), a.data.confcalls.push({ to: n, startTime: utcDateNow(), disposition: "invite", dispositionTime: utcDateNow(), accept: { complete: null, eventTime: null, disposition: "" } });
            var s = a.data.confcalls.length - 1;
            updateLineScroll(t);
            var l = navigator.mediaDevices.getSupportedConstraints(),
                r = { sessionDescriptionHandlerOptions: { earlyMedia: !0, constraints: { audio: { deviceId: "default" }, video: !1 } } };
            "default" != a.data.AudioSourceDevice && (r.sessionDescriptionHandlerOptions.constraints.audio.deviceId = { exact: a.data.AudioSourceDevice }), l.autoGainControl && (r.sessionDescriptionHandlerOptions.constraints.audio.autoGainControl = AutoGainControl), l.echoCancellation && (r.sessionDescriptionHandlerOptions.constraints.audio.echoCancellation = EchoCancellation), l.noiseSuppression && (r.sessionDescriptionHandlerOptions.constraints.audio.noiseSuppression = NoiseSuppression), a.data.withvideo && (r.sessionDescriptionHandlerOptions.constraints.video = !0, "default" != a.data.VideoSourceDevice && (r.sessionDescriptionHandlerOptions.constraints.video.deviceId = { exact: a.data.VideoSourceDevice }), l.frameRate && "" != maxFrameRate && (r.sessionDescriptionHandlerOptions.constraints.video.frameRate = maxFrameRate), l.height && "" != videoHeight && (r.sessionDescriptionHandlerOptions.constraints.video.height = videoHeight), l.aspectRatio && "" != videoAspectRatio && (r.sessionDescriptionHandlerOptions.constraints.video.aspectRatio = videoAspectRatio)), console.log("CONFERENCE INVITE: ", "sip:" + n + "@" + wssServer);
            var d = SIP.UserAgent.makeURI("sip:" + n + "@" + wssServer),
                c = new SIP.Inviter(userAgent, d, r);
            c.data = {}, c.delegate = {
                onBye: function(e) { console.log("New call session ended with BYE"), o.html(lang.call_ended), a.data.confcalls[s].disposition = "bye", a.data.confcalls[s].dispositionTime = utcDateNow(), $("#line-" + t + "-txt-FindConferenceBuddy").parent().show(), $("#line-" + t + "-btn-conference-dial").show(), $("#line-" + t + "-btn-cancel-conference-dial").hide(), $("#line-" + t + "-btn-join-conference-call").hide(), $("#line-" + t + "-btn-terminate-conference-call").hide(), $("#line-" + t + "-msg").html(lang.conference_call_terminated), updateLineScroll(t), window.setTimeout(function() { o.hide(), updateLineScroll(t) }, 1e3) },
                onSessionDescriptionHandler: function(e, n) {
                    e ? e.peerConnection ? e.peerConnection.ontrack = function(n) {
                        var i = e.peerConnection,
                            o = new MediaStream;
                        i.getReceivers().forEach(function(e) { e.track && "audio" == e.track.kind && o.addTrack(e.track) });
                        var s = $("#line-" + t + "-conference-remoteAudio").get(0);
                        s.srcObject = o, s.onloadedmetadata = function(e) { void 0 !== s.sinkId && s.setSinkId(a.data.AudioOutputDevice).then(function() { console.log("sinkId applied: " + a.data.AudioOutputDevice) }).catch(function(e) { console.warn("Error using setSinkId: ", e) }), s.play() }
                    } : console.warn("onSessionDescriptionHandler fired without a peerConnection") : console.warn("onSessionDescriptionHandler fired without a sessionDescriptionHandler")
                }
            }, c.stateChange.addListener(function(t) { t == SIP.SessionState.Terminated && (a.data.childsession.data.AudioSourceTrack && "audio" == a.data.childsession.data.AudioSourceTrack.kind && a.data.childsession.data.AudioSourceTrack.stop(), a.data.AudioSourceTrack && "audio" == a.data.AudioSourceTrack.kind && a.sessionDescriptionHandler.peerConnection.getSenders().forEach(function(t) { t.track && "audio" == t.track.kind && (t.replaceTrack(a.data.AudioSourceTrack).then(function() { a.data.ismute ? t.track.enabled = !1 : t.track.enabled = !0 }).catch(function() { console.error(e) }), a.data.AudioSourceTrack = null) })) }), a.data.childsession = c;
            var u = {
                requestDelegate: {
                    onTrying: function(e) { o.html(lang.ringing), a.data.confcalls[s].disposition = "trying", a.data.confcalls[s].dispositionTime = utcDateNow(), $("#line-" + t + "-msg").html(lang.conference_call_started) },
                    onProgress: function(e) {
                        o.html(lang.ringing), a.data.confcalls[s].disposition = "progress", a.data.confcalls[s].dispositionTime = utcDateNow(), $("#line-" + t + "-msg").html(lang.conference_call_started);
                        var n = $("#line-" + t + "-btn-cancel-conference-dial");
                        n.off("click"), n.on("click", function() { c.cancel().catch(function(e) { console.warn("Failed to CANCEL", e) }), o.html(lang.call_cancelled), console.log("New call session canceled"), a.data.confcalls[s].accept.complete = !1, a.data.confcalls[s].accept.disposition = "cancel", a.data.confcalls[s].accept.eventTime = utcDateNow(), $("#line-" + t + "-msg").html(lang.canference_call_cancelled), updateLineScroll(t) }), n.show(), updateLineScroll(t)
                    },
                    onRedirect: function(e) { console.log("Redirect received:", e) },
                    onAccept: function(e) {
                        o.html(lang.call_in_progress), $("#line-" + t + "-btn-cancel-conference-dial").hide(), a.data.confcalls[s].complete = !0, a.data.confcalls[s].disposition = "accepted", a.data.confcalls[s].dispositionTime = utcDateNow();
                        var n = $("#line-" + t + "-btn-join-conference-call");
                        n.off("click"), n.on("click", function() {
                            if (a.data.childsession) {
                                var e = new MediaStream,
                                    i = new MediaStream,
                                    l = a.sessionDescriptionHandler.peerConnection,
                                    r = a.data.childsession.sessionDescriptionHandler.peerConnection;
                                r.getReceivers().forEach(function(t) { t.track && "audio" == t.track.kind && (console.log("Adding conference session:", t.track.label), e.addTrack(t.track)) }), l.getReceivers().forEach(function(e) { e.track && "audio" == e.track.kind && (console.log("Adding conference session:", e.track.label), i.addTrack(e.track)) }), l.getSenders().forEach(function(t) {
                                    if (t.track && "audio" == t.track.kind) {
                                        console.log("Switching to mixed Audio track on session"), a.data.AudioSourceTrack = t.track, e.addTrack(t.track);
                                        var n = MixAudioStreams(e).getAudioTracks()[0];
                                        n.IsMixedTrack = !0, t.replaceTrack(n)
                                    }
                                }), r.getSenders().forEach(function(e) {
                                    if (e.track && "audio" == e.track.kind) {
                                        console.log("Switching to mixed Audio track on conf call"), a.data.childsession.data.AudioSourceTrack = e.track, i.addTrack(e.track);
                                        var t = MixAudioStreams(i).getAudioTracks()[0];
                                        t.IsMixedTrack = !0, e.replaceTrack(t)
                                    }
                                }), o.html(lang.call_in_progress), console.log("Conference Call In Progress"), a.data.confcalls[s].accept.complete = !0, a.data.confcalls[s].accept.disposition = "join", a.data.confcalls[s].accept.eventTime = utcDateNow(), $("#line-" + t + "-btn-terminate-conference-call").show(), $("#line-" + t + "-msg").html(lang.conference_call_in_progress), n.hide(), updateLineScroll(t), window.setTimeout(function() { unholdSession(t), updateLineScroll(t) }, 1e3)
                            } else console.warn("Conference session lost")
                        }), n.show(), updateLineScroll(t);
                        var i = $("#line-" + t + "-btn-terminate-conference-call");
                        i.off("click"), i.on("click", function() { c.bye().catch(function(e) { console.warn("Failed to BYE", e) }), o.html(lang.call_ended), console.log("New call session end"), a.data.confcalls[s].accept.disposition = "bye", a.data.confcalls[s].accept.eventTime = utcDateNow(), $("#line-" + t + "-msg").html(lang.conference_call_ended), updateLineScroll(t), window.setTimeout(function() { o.hide(), CancelConference(t), updateLineScroll(t) }, 1e3) }), i.show(), updateLineScroll(t)
                    },
                    onReject: function(e) { console.log("New call session rejected: ", e.message.reasonPhrase), o.html(lang.call_rejected), a.data.confcalls[s].disposition = e.message.reasonPhrase, a.data.confcalls[s].dispositionTime = utcDateNow(), $("#line-" + t + "-txt-FindConferenceBuddy").parent().show(), $("#line-" + t + "-btn-conference-dial").show(), $("#line-" + t + "-btn-cancel-conference-dial").hide(), $("#line-" + t + "-btn-join-conference-call").hide(), $("#line-" + t + "-btn-terminate-conference-call").hide(), $("#line-" + t + "-msg").html(lang.conference_call_rejected), updateLineScroll(t), window.setTimeout(function() { o.hide(), updateLineScroll(t) }, 1e3) }
                }
            };
            c.invite(u).catch(function(e) { console.warn("Failed to send INVITE:", e) })
        } else console.warn("Null line or session")
    } else console.warn("Cannot transfer, must be [0-9*+#]")
}

function cancelSession(e) {
    var t = FindLineByNumber(e);
    null != t && null != t.SipSession && (t.SipSession.data.terminateby = "us", t.SipSession.data.reasonCode = 0, t.SipSession.data.reasonText = "Call Cancelled", console.log("Cancelling session : " + e), t.SipSession.state == SIP.SessionState.Initial || t.SipSession.state == SIP.SessionState.Establishing ? t.SipSession.cancel() : (console.warn("Session not in correct state for cancel.", t.SipSession.state), console.log("Attempting teardown : " + e), teardownSession(t)), $("#line-" + e + "-msg").html(lang.call_cancelled))
}

function holdSession(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        var n = t.SipSession;
        if (1 != n.isOnHold) {
            console.log("Putting Call on hold:", e), n.isOnHold = !0;
            var i = n.sessionDescriptionHandlerOptionsReInvite;
            i.hold = !0, n.sessionDescriptionHandlerOptionsReInvite = i;
            var a = {
                requestDelegate: {
                    onAccept: function() {
                        if (n && n.sessionDescriptionHandler && n.sessionDescriptionHandler.peerConnection) {
                            var t = n.sessionDescriptionHandler.peerConnection;
                            t.getReceivers().forEach(function(e) { e.track && (e.track.enabled = !1) }), t.getSenders().forEach(function(e) { e.track && "audio" == e.track.kind ? (1 == e.track.IsMixedTrack && n.data.AudioSourceTrack && "audio" == n.data.AudioSourceTrack.kind && (console.log("Muting Mixed Audio Track : " + n.data.AudioSourceTrack.label), n.data.AudioSourceTrack.enabled = !1), console.log("Muting Audio Track : " + e.track.label), e.track.enabled = !1) : e.track && "video" == e.track.kind && (e.track.enabled = !1) })
                        }
                        n.isOnHold = !0, console.log("Call is is on hold:", e), $("#line-" + e + "-btn-Hold").hide(), $("#line-" + e + "-btn-Unhold").show(), $("#line-" + e + "-msg").html(lang.call_on_hold), n.data.hold || (n.data.hold = []), n.data.hold.push({ event: "hold", eventTime: utcDateNow() }), updateLineScroll(e), "undefined" != typeof web_hook_on_modify && web_hook_on_modify("hold", n)
                    },
                    onReject: function() { n.isOnHold = !1, console.warn("Failed to put the call on hold:", e) }
                }
            };
            n.invite(a).catch(function(e) { n.isOnHold = !1, console.warn("Error attempting to put the call on hold:", e) })
        } else console.log("Call is is already on hold:", e)
    }
}

function unholdSession(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        var n = t.SipSession;
        if (0 != n.isOnHold) {
            console.log("Taking call off hold:", e), n.isOnHold = !1;
            var i = n.sessionDescriptionHandlerOptionsReInvite;
            i.hold = !1, n.sessionDescriptionHandlerOptionsReInvite = i;
            var a = {
                requestDelegate: {
                    onAccept: function() {
                        if (n && n.sessionDescriptionHandler && n.sessionDescriptionHandler.peerConnection) {
                            var t = n.sessionDescriptionHandler.peerConnection;
                            t.getReceivers().forEach(function(e) { e.track && (e.track.enabled = !0) }), t.getSenders().forEach(function(e) { e.track && "audio" == e.track.kind ? (1 == e.track.IsMixedTrack && n.data.AudioSourceTrack && "audio" == n.data.AudioSourceTrack.kind && (console.log("Unmuting Mixed Audio Track : " + n.data.AudioSourceTrack.label), n.data.AudioSourceTrack.enabled = !0), console.log("Unmuting Audio Track : " + e.track.label), e.track.enabled = !0) : e.track && "video" == e.track.kind && (e.track.enabled = !0) })
                        }
                        n.isOnHold = !1, console.log("Call is off hold:", e), $("#line-" + e + "-btn-Hold").show(), $("#line-" + e + "-btn-Unhold").hide(), $("#line-" + e + "-msg").html(lang.call_in_progress), n.data.hold || (n.data.hold = []), n.data.hold.push({ event: "unhold", eventTime: utcDateNow() }), updateLineScroll(e), "undefined" != typeof web_hook_on_modify && web_hook_on_modify("unhold", n)
                    },
                    onReject: function() { n.isOnHold = !0, console.warn("Failed to put the call on hold", e) }
                }
            };
            n.invite(a).catch(function(e) { n.isOnHold = !0, console.warn("Error attempting to take to call off hold", e) })
        } else console.log("Call is already off hold:", e)
    }
}

function MuteSession(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        $("#line-" + e + "-btn-Unmute").show(), $("#line-" + e + "-btn-Mute").hide();
        var n = t.SipSession;
        n.sessionDescriptionHandler.peerConnection.getSenders().forEach(function(e) { e.track && "audio" == e.track.kind && (1 == e.track.IsMixedTrack && n.data.AudioSourceTrack && "audio" == n.data.AudioSourceTrack.kind && (console.log("Muting Mixed Audio Track : " + n.data.AudioSourceTrack.label), n.data.AudioSourceTrack.enabled = !1), console.log("Muting Audio Track : " + e.track.label), e.track.enabled = !1) }), n.data.mute || (n.data.mute = []), n.data.mute.push({ event: "mute", eventTime: utcDateNow() }), n.data.ismute = !0, $("#line-" + e + "-msg").html(lang.call_on_mute), updateLineScroll(e), "undefined" != typeof web_hook_on_modify && web_hook_on_modify("mute", n)
    }
}

function UnmuteSession(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        $("#line-" + e + "-btn-Unmute").hide(), $("#line-" + e + "-btn-Mute").show();
        var n = t.SipSession;
        n.sessionDescriptionHandler.peerConnection.getSenders().forEach(function(e) { e.track && "audio" == e.track.kind && (1 == e.track.IsMixedTrack && n.data.AudioSourceTrack && "audio" == n.data.AudioSourceTrack.kind && (console.log("Unmuting Mixed Audio Track : " + n.data.AudioSourceTrack.label), n.data.AudioSourceTrack.enabled = !0), console.log("Unmuting Audio Track : " + e.track.label), e.track.enabled = !0) }), n.data.mute || (n.data.mute = []), n.data.mute.push({ event: "unmute", eventTime: utcDateNow() }), n.data.ismute = !1, $("#line-" + e + "-msg").html(lang.call_off_mute), updateLineScroll(e), "undefined" != typeof web_hook_on_modify && web_hook_on_modify("unmute", n)
    }
}

function endSession(e) {
    var t = FindLineByNumber(e);
    null != t && null != t.SipSession && (console.log("Ending call with: " + e), t.SipSession.data.terminateby = "us", t.SipSession.data.reasonCode = 16, t.SipSession.data.reasonText = "Normal Call clearing", t.SipSession.bye().catch(function(e) { console.warn("Failed to bye the session!", e) }), $("#line-" + e + "-msg").html(lang.call_ended), $("#line-" + e + "-ActiveCall").hide(), teardownSession(t), updateLineScroll(e))
}

function sendDTMF(e, t) {
    var n = FindLineByNumber(e);
    if (null != n && null != n.SipSession) {
        console.log("Sending DTMF (" + t + "): " + n.LineNumber);
        n.SipSession.sessionDescriptionHandler.sendDtmf(t, { duration: 100, interToneGap: 70 }) ? console.log("Sent DTMF (" + t + ")") : console.log("Failed to send DTMF (" + t + ")"), $("#line-" + e + "-msg").html(lang.send_dtmf + ": " + t), updateLineScroll(e), "undefined" != typeof web_hook_on_dtmf && web_hook_on_dtmf(t, n.SipSession)
    }
}

function switchVideoSource(t, n) {
    var i = FindLineByNumber(t);
    if (null != i && null != i.SipSession) {
        var a = i.SipSession;
        $("#line-" + t + "-msg").html(lang.switching_video_source);
        var o = navigator.mediaDevices.getSupportedConstraints(),
            s = { audio: !1, video: { deviceId: "default" } };
        "default" != n && (s.video.deviceId = { exact: n }), o.frameRate && "" != maxFrameRate && (s.video.frameRate = maxFrameRate), o.height && "" != videoHeight && (s.video.height = videoHeight), o.aspectRatio && "" != videoAspectRatio && (s.video.aspectRatio = videoAspectRatio), a.data.VideoSourceDevice = n;
        var l = a.sessionDescriptionHandler.peerConnection,
            r = new MediaStream;
        navigator.mediaDevices.getUserMedia(s).then(function(e) {
            var t = e.getVideoTracks()[0];
            l.getSenders().forEach(function(e) { e.track && "video" == e.track.kind && (console.log("Switching Video Track : " + e.track.label + " to " + t.label), e.track.stop(), e.replaceTrack(t), r.addTrack(t)) })
        }).catch(function(e) { console.error("Error on getUserMedia", e, s) }), a.data.AudioSourceTrack && "audio" == a.data.AudioSourceTrack.kind && l.getSenders().forEach(function(t) { t.track && "audio" == t.track.kind && (t.replaceTrack(a.data.AudioSourceTrack).then(function() { a.data.ismute ? t.track.enabled = !1 : t.track.enabled = !0 }).catch(function() { console.error(e) }), a.data.AudioSourceTrack = null) }), console.log("Showing as preview...");
        var d = $("#line-" + t + "-localVideo").get(0);
        d.srcObject = r, d.onloadedmetadata = function(e) { d.play() }
    } else console.warn("Line or Session is Null")
}

function SendCanvas(t) {
    var n = FindLineByNumber(t);
    if (null != n && null != n.SipSession) {
        var i = n.SipSession;
        $("#line-" + t + "-msg").html(lang.switching_to_canvas), RemoveScratchpad(t);
        var a = $("<canvas/>");
        a.prop("id", "line-" + t + "-scratchpad"), $("#line-" + t + "-scratchpad-container").append(a), $("#line-" + t + "-scratchpad").css("display", "inline-block"), $("#line-" + t + "-scratchpad").css("width", "640px"), $("#line-" + t + "-scratchpad").css("height", "360px"), $("#line-" + t + "-scratchpad").prop("width", 640), $("#line-" + t + "-scratchpad").prop("height", 360), $("#line-" + t + "-scratchpad-container").show(), console.log("Canvas for Scratchpad created..."), scratchpad = new fabric.Canvas("line-" + t + "-scratchpad"), scratchpad.id = "line-" + t + "-scratchpad", scratchpad.backgroundColor = "#FFFFFF", scratchpad.isDrawingMode = !0, scratchpad.renderAll(), scratchpad.redrawIntrtval = window.setInterval(function() { scratchpad.renderAll() }, 1e3), CanvasCollection.push(scratchpad);
        var o = $("#line-" + t + "-scratchpad").get(0).captureStream(25),
            s = o.getVideoTracks()[0],
            l = i.sessionDescriptionHandler.peerConnection;
        l.getSenders().forEach(function(e) { e.track && "video" == e.track.kind && (console.log("Switching Track : " + e.track.label + " to Scratchpad Canvas"), e.track.stop(), e.replaceTrack(s)) }), i.data.AudioSourceTrack && "audio" == i.data.AudioSourceTrack.kind && l.getSenders().forEach(function(t) { t.track && "audio" == t.track.kind && (t.replaceTrack(i.data.AudioSourceTrack).then(function() { i.data.ismute ? t.track.enabled = !1 : t.track.enabled = !0 }).catch(function() { console.error(e) }), i.data.AudioSourceTrack = null) }), console.log("Showing as preview...");
        var r = $("#line-" + t + "-localVideo").get(0);
        r.srcObject = o, r.onloadedmetadata = function(e) { r.play() }
    } else console.warn("Line or Session is Null")
}

function SendVideo(e, t) {
    var n = FindLineByNumber(e);
    if (null != n && null != n.SipSession) {
        var i = n.SipSession;
        $("#line-" + e + "-src-camera").prop("disabled", !1), $("#line-" + e + "-src-canvas").prop("disabled", !1), $("#line-" + e + "-src-desktop").prop("disabled", !1), $("#line-" + e + "-src-video").prop("disabled", !0), $("#line-" + e + "-src-blank").prop("disabled", !1), $("#line-" + e + "-msg").html(lang.switching_to_shared_video), $("#line-" + e + "-scratchpad-container").hide(), RemoveScratchpad(e), $("#line-" + e + "-sharevideo").hide(), $("#line-" + e + "-sharevideo").get(0).pause(), $("#line-" + e + "-sharevideo").get(0).removeAttribute("src"), $("#line-" + e + "-sharevideo").get(0).load(), $("#line-" + e + "-localVideo").hide(), $("#line-" + e + "-remote-videos").hide();
        var a = $("#line-" + e + "-sharevideo");
        a.prop("src", t), a.off("loadedmetadata"), a.on("loadedmetadata", function() {
            console.log("Video can play now... ");
            var t = 360;
            "HD" == VideoResampleSize && (t = 720), "FHD" == VideoResampleSize && (t = 1080);
            var n = a.get(0),
                o = $("<canvas/>").get(0),
                s = n.videoWidth,
                l = n.videoHeight;
            if (s >= l) {
                if (l > t) {
                    var r = t / l;
                    l = t, s *= r
                }
            } else if (s > t) {
                r = t / s;
                s = t, l *= r
            }
            o.width = s, o.height = l;
            var d = o.getContext("2d");
            window.clearInterval(i.data.videoResampleInterval), i.data.videoResampleInterval = window.setInterval(function() { d.drawImage(n, 0, 0, s, l) }, 40);
            var c = null;
            "captureStream" in n ? c = n.captureStream() : "mozCaptureStream" in n ? c = n.mozCaptureStream() : console.warn("Cannot capture stream from video, this will result in no audio being transmitted.");
            var u = o.captureStream(25).getVideoTracks()[0],
                p = null != c ? c.getAudioTracks()[0] : null;
            i.sessionDescriptionHandler.peerConnection.getSenders().forEach(function(e) {
                if (e.track && "video" == e.track.kind && (console.log("Switching Track : " + e.track.label), e.track.stop(), e.replaceTrack(u)), e.track && "audio" == e.track.kind) {
                    console.log("Switching to mixed Audio track on session"), i.data.AudioSourceTrack = e.track;
                    var t = new MediaStream;
                    p && t.addTrack(p), t.addTrack(e.track);
                    var n = MixAudioStreams(t).getAudioTracks()[0];
                    n.IsMixedTrack = !0, e.replaceTrack(n)
                }
            }), console.log("Showing as preview...");
            var g = $("#line-" + e + "-localVideo").get(0);
            g.srcObject = c, g.onloadedmetadata = function(e) { g.play().then(function() { console.log("Playing Preview Video File") }).catch(function(e) { console.error("Cannot play back video", e) }) }, console.log("Starting Video..."), $("#line-" + e + "-sharevideo").get(0).play()
        }), $("#line-" + e + "-sharevideo").show(), console.log("Video for Sharing created...")
    } else console.warn("Line or Session is Null")
}

function ShareScreen(t) {
    var n = FindLineByNumber(t);
    if (null != n && null != n.SipSession) {
        var i = n.SipSession;
        $("#line-" + t + "-msg").html(lang.switching_to_shared_screeen);
        var a = new MediaStream,
            o = i.sessionDescriptionHandler.peerConnection;
        if (navigator.getDisplayMedia) {
            var s = { video: !0, audio: !1 };
            navigator.getDisplayMedia(s).then(function(e) {
                console.log("navigator.getDisplayMedia");
                var n = e.getVideoTracks()[0];
                o.getSenders().forEach(function(e) { e.track && "video" == e.track.kind && (console.log("Switching Video Track : " + e.track.label + " to Screen"), e.track.stop(), e.replaceTrack(n), a.addTrack(n)) }), console.log("Showing as preview...");
                var i = $("#line-" + t + "-localVideo").get(0);
                i.srcObject = a, i.onloadedmetadata = function(e) { i.play() }
            }).catch(function(e) { console.error("Error on getUserMedia") })
        } else if (navigator.mediaDevices.getDisplayMedia) {
            s = { video: !0, audio: !1 };
            navigator.mediaDevices.getDisplayMedia(s).then(function(e) {
                console.log("navigator.mediaDevices.getDisplayMedia");
                var n = e.getVideoTracks()[0];
                o.getSenders().forEach(function(e) { e.track && "video" == e.track.kind && (console.log("Switching Video Track : " + e.track.label + " to Screen"), e.track.stop(), e.replaceTrack(n), a.addTrack(n)) }), console.log("Showing as preview...");
                var i = $("#line-" + t + "-localVideo").get(0);
                i.srcObject = a, i.onloadedmetadata = function(e) { i.play() }
            }).catch(function(e) { console.error("Error on getUserMedia") })
        } else {
            s = { video: { mediaSource: "screen" }, audio: !1 };
            navigator.mediaDevices.getUserMedia(s).then(function(e) {
                console.log("navigator.mediaDevices.getUserMedia");
                var n = e.getVideoTracks()[0];
                o.getSenders().forEach(function(e) { e.track && "video" == e.track.kind && (console.log("Switching Video Track : " + e.track.label + " to Screen"), e.track.stop(), e.replaceTrack(n), a.addTrack(n)) }), console.log("Showing as preview...");
                var i = $("#line-" + t + "-localVideo").get(0);
                i.srcObject = a, i.onloadedmetadata = function(e) { i.play() }
            }).catch(function(e) { console.error("Error on getUserMedia") })
        }
        i.data.AudioSourceTrack && "audio" == i.data.AudioSourceTrack.kind && o.getSenders().forEach(function(t) { t.track && "audio" == t.track.kind && (t.replaceTrack(i.data.AudioSourceTrack).then(function() { i.data.ismute ? t.track.enabled = !1 : t.track.enabled = !0 }).catch(function() { console.error(e) }), i.data.AudioSourceTrack = null) })
    } else console.warn("Line or Session is Null")
}

function DisableVideoStream(t) {
    var n = FindLineByNumber(t);
    if (null != n && null != n.SipSession) {
        var i = n.SipSession;
        i.sessionDescriptionHandler.peerConnection.getSenders().forEach(function(t) { t.track && "video" == t.track.kind && (console.log("Disable Video Track : " + t.track.label), t.track.enabled = !1), t.track && "audio" == t.track.kind && i.data.AudioSourceTrack && "audio" == i.data.AudioSourceTrack.kind && (t.replaceTrack(i.data.AudioSourceTrack).then(function() { i.data.ismute ? t.track.enabled = !1 : t.track.enabled = !0 }).catch(function() { console.error(e) }), i.data.AudioSourceTrack = null) }), console.log("Showing as preview...");
        var a = $("#line-" + t + "-localVideo").get(0);
        a.pause(), a.removeAttribute("src"), a.load(), $("#line-" + t + "-msg").html(lang.video_disabled)
    } else console.warn("Line or Session is Null")
}

function ShowDtmfMenu(e, t) { RestoreVideoArea(t), $("#line-" + t + "-Dialpad").toggle(), HidePopup() }
var Line = function(e, t, n, i) { this.LineNumber = e, this.DisplayName = t, this.DisplayNumber = n, this.IsSelected = !1, this.BuddyObj = i, this.SipSession = null, this.LocalSoundMeter = null, this.RemoteSoundMeter = null };

function ShowDial() {
    ShowContacts(), $("#myContacts").hide(), $("#actionArea").empty();
    var e = '<div style="text-align:right"><button onclick="ShowContacts()"><i class="fa fa-close"></i></button></div>';
    e += '<div style="text-align:center"><input id=dialText class=dialTextInput oninput="handleDialInput(this, event)" onkeydown="dialOnkeydown(event, this)" style="width:160px; margin-top:15px"></div>', e += '<table cellspacing=10 cellpadding=0 style="margin-left:auto; margin-right: auto">', e += "<tr><td><button class=dialButtons onclick=\"KeyPress('1')\"><div>1</div><span>&nbsp;</span></button></td>", e += "<td><button class=dialButtons onclick=\"KeyPress('2')\"><div>2</div><span>ABC</span></button></td>", e += "<td><button class=dialButtons onclick=\"KeyPress('3')\"><div>3</div><span>DEF</span></button></td></tr>", e += "<tr><td><button class=dialButtons onclick=\"KeyPress('4')\"><div>4</div><span>GHI</span></button></td>", e += "<td><button class=dialButtons onclick=\"KeyPress('5')\"><div>5</div><span>JKL</span></button></td>", e += "<td><button class=dialButtons onclick=\"KeyPress('6')\"><div>6</div><span>MNO</span></button></td></tr>", e += "<tr><td><button class=dialButtons onclick=\"KeyPress('7')\"><div>7</div><span>PQRS</span></button></td>", e += "<td><button class=dialButtons onclick=\"KeyPress('8')\"><div>8</div><span>TUV</span></button></td>", e += "<td><button class=dialButtons onclick=\"KeyPress('9')\"><div>9</div><span>WXYZ</span></button></td></tr>", e += "<tr><td><button class=dialButtons onclick=\"KeyPress('*')\">*</button></td>", e += "<td><button class=dialButtons onclick=\"KeyPress('0')\">0</button></td>", e += "<td><button class=dialButtons onclick=\"KeyPress('#')\">#</button></td></tr>", e += "</table>", e += '<div style="text-align: center; margin-bottom:15px">', e += '<button class="dialButtons" id=dialAudio style="background-color: #3fbd3f;color: white;" title="' + lang.audio_call + '" onclick="DialByLine(\'audio\')"><i class="fa fa-phone"></i></button>', e += "</div>", $("#actionArea").html(e), $("#actionArea").show(), $("#dialText").focus()
}

function handleDialInput(e, t) { EnableAlphanumericDial ? $("#dialText").val($("#dialText").val().replace(/[^\da-zA-Z\*\#\+]/g, "").substring(0, MaxDidLength)) : $("#dialText").val($("#dialText").val().replace(/[^\d\*\#\+]/g, "").substring(0, MaxDidLength)), $("#dialVideo").prop("disabled", $("#dialText").val().length >= DidLength) }

function dialOnkeydown(e, t, n) { if ("13" == (e.keyCode ? e.keyCode : e.which)) return e.preventDefault(), DialByLine("audio"), !1 }

function KeyPress(e) { $("#dialText").val(($("#dialText").val() + e).substring(0, MaxDidLength)), $("#dialVideo").prop("disabled", $("#dialText").val().length >= DidLength) }

function ShowContacts() {
    var e = $("#local-video-preview").get(0);
    try { e.srcObject.getTracks().forEach(function(e) { e.stop() }), e.srcObject = null } catch (e) {}
    try { window.SettingsMicrophoneStream.getTracks().forEach(function(e) { e.stop() }) } catch (e) {}
    window.SettingsMicrophoneStream = null;
    try { window.SettingsMicrophoneSoundMeter.stop() } catch (e) {}
    window.SettingsMicrophoneSoundMeter = null;
    try { window.SettingsOutputAudio.pause() } catch (e) {}
    window.SettingsOutputAudio = null;
    try { window.SettingsOutputStream.getTracks().forEach(function(e) { e.stop() }) } catch (e) {}
    window.SettingsOutputStream = null;
    try { window.SettingsOutputStreamMeter.stop() } catch (e) {}
    window.SettingsOutputStreamMeter = null;
    try { window.SettingsRingerAudio.pause() } catch (e) {}
    window.SettingsRingerAudio = null;
    try { window.SettingsRingerStream.getTracks().forEach(function(e) { e.stop() }) } catch (e) {}
    window.SettingsRingerStream = null;
    try { window.SettingsRingerStreamMeter.stop() } catch (e) {}
    window.SettingsRingerStreamMeter = null, $("#actionArea").hide(), $("#actionArea").empty(), $("#myContacts").show()
}

function DialByLine(e, t, n, i, a) {
    if (null != userAgent && 0 != userAgent.isRegistered()) {
        var o = n || $("#dialText").val();
        if (0 != (o = EnableAlphanumericDial ? o.replace(/[^\da-zA-Z\*\#\+]/g, "").substring(0, MaxDidLength) : o.replace(/[^\d\*\#\+]/g, "").substring(0, MaxDidLength)).length) {
            ShowContacts();
            var s = t ? FindBuddyByIdentity(t) : FindBuddyByDid(o);
            if (null == s) { var l = o.length > DidLength ? "contact" : "extension"; "*" != l.substring(0, 1) && "#" != l.substring(0, 1) || (l = "contact"), s = MakeBuddy(l, !0, !1, !1, i || o, o) }
            var r = new Line(newLineNumber += 1, s.CallerIDName, o, s);
            Lines.push(r), AddLineHtml(r), SelectLine(newLineNumber), UpdateBuddyList(), "audio" == e ? AudioCall(r, o, a) : VideoCall(r, o, a);
            try { $("#line-" + newLineNumber).get(0).scrollIntoViewIfNeeded() } catch (e) {}
        } else console.warn("Enter number to dial")
    } else ShowMyProfile()
}

function SelectLine(e) {
    var t = FindLineByNumber(e);
    if (null != t) {
        for (var n = 0, i = 0; i < Lines.length; i++)
            if (Lines[i].LineNumber == t.LineNumber && (n = i + 1), 1 == Lines[i].IsSelected && Lines[i].LineNumber == t.LineNumber) return;
        console.log("Selecting Line : " + t.LineNumber), $(".streamSelected").each(function() { $(this).prop("class", "stream") }), $("#line-ui-" + t.LineNumber).prop("class", "streamSelected"), $("#line-ui-" + t.LineNumber + "-DisplayLineNo").html('<i class="fa fa-phone"></i> ' + lang.line + " " + n), $("#line-ui-" + t.LineNumber + "-LineIcon").html(n), SwitchLines(t.LineNumber);
        for (i = 0; i < Lines.length; i++) {
            var a = Lines[i].LineNumber == t.LineNumber ? "buddySelected" : "buddy";
            null != Lines[i].SipSession && (a = Lines[i].SipSession.isOnHold ? "buddyActiveCallHollding" : "buddyActiveCall"), $("#line-" + Lines[i].LineNumber).prop("class", a), Lines[i].IsSelected = Lines[i].LineNumber == t.LineNumber
        }
        for (var o = 0; o < Buddies.length; o++) $("#contact-" + Buddies[o].identity).prop("class", "buddy"), Buddies[o].IsSelected = !1;
        UpdateUI()
    }
}

function FindLineByNumber(e) {
    for (var t = 0; t < Lines.length; t++)
        if (Lines[t].LineNumber == e) return Lines[t];
    return null
}

function AddLineHtml(e) {
    var t = '<table id="line-ui-' + e.LineNumber + '" class=stream cellspacing=5 cellpadding=0>';
    t += '<tr><td class=streamSection style="height: 48px;">', t += '<div style="float:left; margin:0px; padding:5px; height:38px; line-height:38px">', t += '<button id="line-' + e.LineNumber + '-btn-back" onclick="CloseLine(\'' + e.LineNumber + '\')" class=roundButtons title="' + lang.back + '"><i class="fa fa-chevron-left"></i></button> ', t += "</div>", t += '<div class=contact style="cursor: unset; float: left;">', t += '<div id="line-ui-' + e.LineNumber + '-LineIcon" class=lineIcon>' + e.LineNumber + "</div>", t += '<div id="line-ui-' + e.LineNumber + '-DisplayLineNo" class=contactNameText><i class="fa fa-phone"></i> ' + lang.line + " " + e.LineNumber + "</div>", t += "<div class=presenceText>" + e.DisplayName + " <" + e.DisplayNumber + "></div>", t += "</div>", t += '<div style="float:right; line-height: 46px;">', t += "</div>", t += '<div style="clear:both; height:0px"></div>', t += '<div id="line-' + e.LineNumber + "-calling\" style='margin-top: 13px;' >", t += '<div id="line-' + e.LineNumber + '-timer" style="float: right; margin-top: 5px; margin-right: 10px; display:none;"></div>', t += '<div id="line-' + e.LineNumber + '-msg" class=callStatus style="display:none">...</div>', t += '<div id="line-' + e.LineNumber + '-AnswerCall" class=answerCall style="display:none">', t += "<div>", t += "<button onclick=\"AnswerAudioCall('" + e.LineNumber + '\')" class=answerButton><i class="fa fa-phone"></i> ' + lang.answer_call + "</button> ", t += "<button onclick=\"RejectCall('" + e.LineNumber + '\')" class=hangupButton><i class="fa fa-phone" style="transform: rotate(135deg);"></i> ' + lang.reject_call + "</button> ", t += "</div>", t += "</div>", t += '<div id="line-' + e.LineNumber + '-progress" style="display:none; margin-top: 10px">', t += "<div class=progressCall>", t += "<button onclick=\"cancelSession('" + e.LineNumber + '\')" class=hangupButton><i class="fa fa-phone" style="transform: rotate(135deg);"></i> ' + lang.cancel + "</button>", t += "</div>", t += "</div>", t += '<div id="line-' + e.LineNumber + '-ActiveCall" style="display:none; margin-top: 10px;">', t += '<div id="line-' + e.LineNumber + '-conference" style="display:none"></div>', "extension" != e.BuddyObj.type && "xmpp" != e.BuddyObj.type || (t += '<div id="line-' + e.LineNumber + '-VideoCall" class=videoCall style="display:none">', t += '<div style="height:35px; line-height:35px; text-align: right">' + lang.present + ": ", t += '<div class=pill-nav style="border-color:#333333">', t += '<button id="line-' + e.LineNumber + '-src-canvas" onclick="PresentScratchpad(\'' + e.LineNumber + '\')" title="' + lang.scratchpad + '"><i class="fa fa-pencil-square"></i></button>', t += '<button id="line-' + e.LineNumber + '-src-desktop" onclick="PresentScreen(\'' + e.LineNumber + '\')" title="' + lang.screen + '"><i class="fa fa-desktop"></i></button>', t += '<button id="line-' + e.LineNumber + '-src-video" onclick="PresentVideo(\'' + e.LineNumber + '\')" title="' + lang.video + '"><i class="fa fa-file-video-o"></i></button>', t += '<button id="line-' + e.LineNumber + '-src-blank" onclick="PresentBlank(\'' + e.LineNumber + '\')" title="' + lang.blank + '"><i class="fa fa-ban"></i></button>', t += "</div>", t += '&nbsp;<button id="line-' + e.LineNumber + '-expand" onclick="ExpandVideoArea(\'' + e.LineNumber + '\')"><i class="fa fa-expand"></i></button>', t += '<button id="line-' + e.LineNumber + '-restore" onclick="RestoreVideoArea(\'' + e.LineNumber + '\')" style="display:none"><i class="fa fa-compress"></i></button>', t += "</div>", t += '<div id="line-' + e.LineNumber + '-preview-container" class="PreviewContainer cleanScroller">', t += '<video id="line-' + e.LineNumber + '-localVideo" muted playsinline></video>', t += "</div>", t += '<div id="line-' + e.LineNumber + '-stage-container" class=StageContainer>', t += '<div id="line-' + e.LineNumber + '-remote-videos" class=VideosContainer></div>', t += '<div id="line-' + e.LineNumber + '-scratchpad-container" style="display:none"></div>', t += '<video id="line-' + e.LineNumber + '-sharevideo" controls muted playsinline style="display:none; object-fit: contain; width: 100%;"></video>', t += "</div>", t += "</div>"), t += '<div id="line-' + e.LineNumber + '-AudioCall" style="display:none;">', t += '<audio id="line-' + e.LineNumber + '-remoteAudio"></audio>', t += "</div>", t += '<div style="text-align:center">', t += '<div id="line-' + e.LineNumber + '-call-control" class=CallControl>', t += '<button id="line-' + e.LineNumber + '-btn-ShowDtmf" onclick="ShowDtmfMenu(this, \'' + e.LineNumber + '\')" class="roundButtons inCallButtons" title="' + lang.show_key_pad + '"><i class="fa fa-keyboard-o"></i></button>', t += '<button id="line-' + e.LineNumber + '-btn-Mute" onclick="MuteSession(\'' + e.LineNumber + '\')" class="roundButtons inCallButtons" title="' + lang.mute + '"><i class="fa fa-microphone-slash"></i></button>', t += '<button id="line-' + e.LineNumber + '-btn-Unmute" onclick="UnmuteSession(\'' + e.LineNumber + '\')" class="roundButtons inCallButtons" title="' + lang.unmute + '" style="color: red; display:none"><i class="fa fa-microphone"></i></button>', EnableTransfer && (t += '<button id="line-' + e.LineNumber + '-btn-Transfer" onclick="StartTransferSession(\'' + e.LineNumber + '\')" class="roundButtons inCallButtons" title="' + lang.transfer_call + '"><i class="fa fa-reply" style="transform: rotateY(180deg)"></i></button>', t += '<button id="line-' + e.LineNumber + '-btn-CancelTransfer" onclick="CancelTransferSession(\'' + e.LineNumber + '\')" class="roundButtons inCallButtons" title="' + lang.cancel_transfer + '" style="color: red; display:none"><i class="fa fa-reply" style="transform: rotateY(180deg)"></i></button>'), EnableConference && (t += '<button id="line-' + e.LineNumber + '-btn-Conference" onclick="StartConferenceCall(\'' + e.LineNumber + '\')" class="roundButtons inCallButtons" title="' + lang.conference_call + '"><i class="fa fa-users"></i></button>', t += '<button id="line-' + e.LineNumber + '-btn-CancelConference" onclick="CancelConference(\'' + e.LineNumber + '\')" class="roundButtons inCallButtons" title="' + lang.cancel_conference + '" style="color: red; display:none"><i class="fa fa-users"></i></button>'), t += '<button id="line-' + e.LineNumber + '-btn-Hold" onclick="holdSession(\'' + e.LineNumber + '\')" class="roundButtons inCallButtons"  title="' + lang.hold_call + '"><i class="fa fa-pause-circle"></i></button>', t += '<button id="line-' + e.LineNumber + '-btn-Unhold" onclick="unholdSession(\'' + e.LineNumber + '\')" class="roundButtons inCallButtons" title="' + lang.resume_call + '" style="color: red; display:none"><i class="fa fa-play-circle"></i></button>', t += '<button id="line-' + e.LineNumber + '-btn-End" onclick="endSession(\'' + e.LineNumber + '\')" class="roundButtons inCallButtons hangupButton" title="' + lang.end_call + '"><i class="fa fa-phone" style="transform: rotate(135deg);"></i></button>', t += "</div>", t += '<div id="line-' + e.LineNumber + '-Dialpad" style="display:none; margin-top:15px; margin-bottom:15px">', t += '<table cellspacing=10 cellpadding=0 style="margin-left:auto; margin-right: auto">', t += "<tr><td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '1')\"><div>1</div><span>&nbsp;</span></button></td>", t += "<td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '2')\"><div>2</div><span>ABC</span></button></td>", t += "<td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '3')\"><div>3</div><span>DEF</span></button></td></tr>", t += "<tr><td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '4')\"><div>4</div><span>GHI</span></button></td>", t += "<td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '5')\"><div>5</div><span>JKL</span></button></td>", t += "<td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '6')\"><div>6</div><span>MNO</span></button></td></tr>", t += "<tr><td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '7')\"><div>7</div><span>PQRS</span></button></td>", t += "<td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '8')\"><div>8</div><span>TUV</span></button></td>", t += "<td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '9')\"><div>9</div><span>WXYZ</span></button></td></tr>", t += "<tr><td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '*')\">*</button></td>", t += "<td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '0')\">0</button></td>", t += "<td><button class=dtmfButtons onclick=\"sendDTMF('" + e.LineNumber + "', '#')\">#</button></td></tr>", t += "</table>", t += "</div>", t += '<div id="line-' + e.LineNumber + '-Transfer" style="display:none">', t += '<div style="margin-top:10px">', t += '<span class=searchClean><input id="line-' + e.LineNumber + '-txt-FindTransferBuddy" oninput="QuickFindBuddy(this,\'' + e.LineNumber + '\')" type=text autocomplete=none style="width:150px;" autocomplete=none placeholder="' + lang.search_or_enter_number + '"></span>', t += ' <button id="line-' + e.LineNumber + '-btn-blind-transfer" onclick="BlindTransfer(\'' + e.LineNumber + '\')"><i class="fa fa-reply" style="transform: rotateY(180deg)"></i> ' + lang.blind_transfer + "</button>", t += ' <button id="line-' + e.LineNumber + '-btn-attended-transfer" onclick="AttendedTransfer(\'' + e.LineNumber + '\')"><i class="fa fa-reply-all" style="transform: rotateY(180deg)"></i> ' + lang.attended_transfer + "</button>", t += ' <button id="line-' + e.LineNumber + '-btn-complete-attended-transfer" style="display:none"><i class="fa fa-reply-all" style="transform: rotateY(180deg)"></i> ' + lang.complete_transfer + "</buuton>", t += ' <button id="line-' + e.LineNumber + '-btn-cancel-attended-transfer" style="display:none"><i class="fa fa-phone" style="transform: rotate(135deg);"></i> ' + lang.cancel_transfer + "</buuton>", t += ' <button id="line-' + e.LineNumber + '-btn-terminate-attended-transfer" style="display:none"><i class="fa fa-phone" style="transform: rotate(135deg);"></i> ' + lang.end_transfer_call + "</buuton>", t += "</div>", t += '<div id="line-' + e.LineNumber + '-transfer-status" class=callStatus style="margin-top:10px; display:none">...</div>', t += '<audio id="line-' + e.LineNumber + '-transfer-remoteAudio" style="display:none"></audio>', t += "</div>", t += '<div id="line-' + e.LineNumber + '-Conference" style="display:none">', t += '<div style="margin-top:10px">', t += '<span class=searchClean><input id="line-' + e.LineNumber + '-txt-FindConferenceBuddy" oninput="QuickFindBuddy(this,\'' + e.LineNumber + '\')" type=text autocomplete=none style="width:150px;" autocomplete=none placeholder="' + lang.search_or_enter_number + '"></span>', t += ' <button id="line-' + e.LineNumber + '-btn-conference-dial" onclick="ConferenceDail(\'' + e.LineNumber + '\')"><i class="fa fa-phone"></i> ' + lang.call + "</button>", t += ' <button id="line-' + e.LineNumber + '-btn-cancel-conference-dial" style="display:none"><i class="fa fa-phone" style="transform: rotate(135deg);"></i> ' + lang.cancel_call + "</buuton>", t += ' <button id="line-' + e.LineNumber + '-btn-join-conference-call" style="display:none"><i class="fa fa-users"></i> ' + lang.join_conference_call + "</buuton>", t += ' <button id="line-' + e.LineNumber + '-btn-terminate-conference-call" style="display:none"><i class="fa fa-phone" style="transform: rotate(135deg);"></i> ' + lang.end_conference_call + "</buuton>", t += "</div>", t += '<div id="line-' + e.LineNumber + '-conference-status" class=callStatus style="margin-top:10px; display:none">...</div>', t += '<audio id="line-' + e.LineNumber + '-conference-remoteAudio" style="display:none"></audio>', t += "</div>", t += '<div  id="line-' + e.LineNumber + '-monitoring" style="margin-top:10px">', t += '<span style="vertical-align: middle"><i class="fa fa-microphone"></i></span> ', t += '<span class=meterContainer title="' + lang.microphone_levels + '">', t += '<span id="line-' + e.LineNumber + '-Mic" class=meterLevel style="height:0%"></span>', t += "</span> ", t += '<span style="vertical-align: middle"><i class="fa fa-volume-up"></i></span> ', t += '<span class=meterContainer title="' + lang.speaker_levels + '">', t += '<span id="line-' + e.LineNumber + '-Speaker" class=meterLevel style="height:0%"></span>', t += "</span> ", t += '<button id="line-' + e.LineNumber + '-btn-settings" onclick="ChangeSettings(\'' + e.LineNumber + '\', this)"><i class="fa fa-cogs"></i> ' + lang.device_settings + "</button>", t += "</div>", t += '<div id="line-' + e.LineNumber + '-AdioStats" class="audioStats cleanScroller" style="display:none">', t += '<div style="text-align:right"><button onclick="HideCallStats(\'' + e.LineNumber + '\', this)"><i class="fa fa-times"></i></button></div>', t += "<fieldset class=audioStatsSet>", t += "<legend>" + lang.send_statistics + "</legend>", t += '<canvas id="line-' + e.LineNumber + '-AudioSendBitRate" class=audioGraph width=600 height=160 style="width:600px; height:160px"></canvas>', t += '<canvas id="line-' + e.LineNumber + '-AudioSendPacketRate" class=audioGraph width=600 height=160 style="width:600px; height:160px"></canvas>', t += "</fieldset>", t += "<fieldset class=audioStatsSet>", t += "<legend>" + lang.receive_statistics + "</legend>", t += '<canvas id="line-' + e.LineNumber + '-AudioReceiveBitRate" class=audioGraph width=600 height=160 style="width:600px; height:160px"></canvas>', t += '<canvas id="line-' + e.LineNumber + '-AudioReceivePacketRate" class=audioGraph width=600 height=160 style="width:600px; height:160px"></canvas>', t += '<canvas id="line-' + e.LineNumber + '-AudioReceivePacketLoss" class=audioGraph width=600 height=160 style="width:600px; height:160px"></canvas>', t += '<canvas id="line-' + e.LineNumber + '-AudioReceiveJitter" class=audioGraph width=600 height=160 style="width:600px; height:160px"></canvas>', t += '<canvas id="line-' + e.LineNumber + '-AudioReceiveLevels" class=audioGraph width=600 height=160 style="width:600px; height:160px"></canvas>', t += "</fieldset>", t += "</div>", t += "</div>", t += "</div>", t += "</div>", t += "</td></tr>", t += '<tr><td class="streamSection streamSectionBackground" style="background-image:url(\'' + hostingPrefex + "wp_1.png')\">", t += '<div id="line-' + e.LineNumber + '-CallDetails" class="chatHistory cleanScroller">', t += "</div>", t += "</td></tr>", t += "</table>", $("#rightContent").append(t)
}

function RemoveLine(e) {
    if (null != e) {
        for (var t = e.SipSession.data.earlyReject, n = 0; n < Lines.length; n++)
            if (Lines[n].LineNumber == e.LineNumber) { Lines.splice(n, 1); break }
        1 != t && (CloseLine(e.LineNumber), $("#line-ui-" + e.LineNumber).remove()), UpdateBuddyList(), 1 != t && null != localDB.getItem("SelectedBuddy") && (console.log("Selecting previously selected buddy...", localDB.getItem("SelectedBuddy")), SelectBuddy(localDB.getItem("SelectedBuddy")), UpdateUI())
    }
}

function CloseLine(e) {
    $(".buddySelected").each(function() { $(this).prop("class", "buddy") }), $(".streamSelected").each(function() { $(this).prop("class", "stream") }), console.log("Closing Line: " + e);
    for (var t = 0; t < Lines.length; t++) Lines[t].IsSelected = !1;
    selectedLine = null;
    for (var n = 0; n < Buddies.length; n++) Buddies[n].IsSelected = !1;
    selectedBuddy = null, UpdateUI()
}

function SwitchLines(e) {
    $.each(userAgent.sessions, function(t, n) { n.state == SIP.SessionState.Established && 0 == n.isOnHold && n.data.line != e && holdSession(n.data.line), n.data.IsCurrentCall = !1 });
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        var n = t.SipSession;
        n.state == SIP.SessionState.Established && 1 == n.isOnHold && unholdSession(e), n.data.IsCurrentCall = !0
    }
    selectedLine = e, RefreshLineActivity(e)
}

function RefreshLineActivity(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        var n = t.SipSession;
        $("#line-" + e + "-CallDetails").empty();
        var i = [],
            a = 0,
            o = moment.utc(n.data.callstart.replace(" UTC", "")),
            s = null;
        n.data.startTime && (s = moment.utc(n.data.startTime), a = moment.duration(s.diff(o))), o = o.format("YYYY-MM-DD HH:mm:ss UTC"), s = s ? s.format("YYYY-MM-DD HH:mm:ss UTC") : null, a = 0 != a ? a.asSeconds() : 0;
        var l = "",
            r = "";
        "inbound" == n.data.calldirection ? l = "<" + n.remoteIdentity.uri.user + "> " + n.remoteIdentity.displayName : "outbound" == n.data.calldirection && (r = n.data.dst);
        var d = n.data.withvideo ? "(" + lang.with_video + ")" : "",
            c = "inbound" == n.data.calldirection ? lang.you_received_a_call_from + " " + l + " " + d : lang.you_made_a_call_to + " " + r + " " + d;
        if (i.push({ Message: c, TimeStr: o }), s) {
            var u = "inbound" == n.data.calldirection ? lang.you_answered_after + " " + a + " " + lang.seconds_plural : lang.they_answered_after + " " + a + " " + lang.seconds_plural;
            i.push({ Message: u, TimeStr: s })
        }
        var p = n.data.transfer ? n.data.transfer : [];
        $.each(p, function(e, t) {
            var n = "Blind" == t.type ? lang.you_started_a_blind_transfer_to + " " + t.to + ". " : lang.you_started_an_attended_transfer_to + " " + t.to + ". ";
            t.accept && 1 == t.accept.complete ? n += lang.the_call_was_completed : "" != t.accept.disposition && (n += lang.the_call_was_not_completed + " (" + t.accept.disposition + ")"), i.push({ Message: n, TimeStr: t.transferTime })
        });
        var g = n.data.mute ? n.data.mute : [];
        $.each(g, function(e, t) { i.push({ Message: "mute" == t.event ? lang.you_put_the_call_on_mute : lang.you_took_the_call_off_mute, TimeStr: t.eventTime }) });
        var m = n.data.hold ? n.data.hold : [];
        $.each(m, function(e, t) { i.push({ Message: "hold" == t.event ? lang.you_put_the_call_on_hold : lang.you_took_the_call_off_hold, TimeStr: t.eventTime }) });
        var f = n.data.ConfbridgeEvents ? n.data.ConfbridgeEvents : [];
        $.each(f, function(e, t) { i.push({ Message: t.event, TimeStr: t.eventTime }) });
        var v = n.data.recordings ? n.data.recordings : [];
        $.each(v, function(e, t) {
            var n = lang.call_is_being_recorded;
            t.startTime != t.stopTime && (n += "(" + lang.now_stopped + ")"), i.push({ Message: n, TimeStr: t.startTime })
        });
        var h = n.data.confcalls ? n.data.confcalls : [];
        $.each(h, function(e, t) {
            var n = lang.you_started_a_conference_call_to + " " + t.to + ". ";
            t.accept && 1 == t.accept.complete ? n += lang.the_call_was_completed : "" != t.accept.disposition && (n += lang.the_call_was_not_completed + " (" + t.accept.disposition + ")"), i.push({ Message: n, TimeStr: t.startTime })
        }), i.sort(function(e, t) {
            var n = moment.utc(e.TimeStr.replace(" UTC", "")),
                i = moment.utc(t.TimeStr.replace(" UTC", ""));
            return n.isSameOrAfter(i, "second") ? -1 : 1
        }), $.each(i, function(t, n) {
            var i = "<table class=timelineMessage cellspacing=0 cellpadding=0><tr>";
            i += "<td class=timelineMessageArea>", i += '<div class=timelineMessageDate><i class="fa fa-circle timelineMessageDot"></i>' + moment.utc(n.TimeStr.replace(" UTC", "")).local().format(DisplayTimeFormat) + "</div>", i += "<div class=timelineMessageText>" + n.Message + "</div>", i += "</td>", i += "</tr></table>", $("#line-" + e + "-CallDetails").prepend(i)
        })
    }
}
var Buddy = function(e, t, n, i, a, o, s, l, r, d, c, u, p) { this.type = e, this.identity = t, this.jid = c, this.CallerIDName = n || "", this.Email = d, this.Desc = r, this.ExtNo = i, this.MobileNumber = a, this.ContactNumber1 = o, this.ContactNumber2 = s, this.lastActivity = l, this.devState = "dotOffline", this.presence = "Unknown", this.missed = 0, this.IsSelected = !1, this.imageObjectURL = "", this.presenceText = lang.default_status, this.EnableDuringDnd = u, this.EnableSubscribe = p };

function InitUserBuddies() { return localDB.setItem(profileUserID + "-Buddies", JSON.stringify({ TotalRows: 0, DataCollection: [] })), JSON.parse(localDB.getItem(profileUserID + "-Buddies")) }

function MakeBuddy(e, t, n, i, a, o, s, l) {
    var r = JSON.parse(localDB.getItem(profileUserID + "-Buddies"));
    null == r && (r = InitUserBuddies());
    var d = utcDateNow(),
        c = null,
        u = uID();
    return "extension" == e && (r.DataCollection.push({ Type: "extension", LastActivity: d, ExtensionNumber: o, MobileNumber: "", ContactNumber1: "", ContactNumber2: "", uID: u, cID: null, gID: null, jid: null, DisplayName: a, Description: "", Email: "", MemberCount: 0, EnableDuringDnd: l, Subscribe: i }), AddBuddy(c = new Buddy("extension", u, a, o, "", "", "", d, "", "", null, l, i), t, n, i)), "xmpp" == e && (r.DataCollection.push({ Type: "xmpp", LastActivity: d, ExtensionNumber: o, MobileNumber: "", ContactNumber1: "", ContactNumber2: "", uID: u, cID: null, gID: null, jid: s, DisplayName: a, Description: "", Email: "", MemberCount: 0, EnableDuringDnd: l, Subscribe: i }), AddBuddy(c = new Buddy("xmpp", u, a, o, "", "", "", d, "", "", s, l, i), t, n, i)), "contact" == e && (r.DataCollection.push({ Type: "contact", LastActivity: d, ExtensionNumber: "", MobileNumber: "", ContactNumber1: o, ContactNumber2: "", uID: null, cID: u, gID: null, jid: null, DisplayName: a, Description: "", Email: "", MemberCount: 0, EnableDuringDnd: l, Subscribe: !1 }), AddBuddy(c = new Buddy("contact", u, a, "", "", o, "", d, "", "", null, l, !1), t, n, !1)), "group" == e && (r.DataCollection.push({ Type: "group", LastActivity: d, ExtensionNumber: o, MobileNumber: "", ContactNumber1: "", ContactNumber2: "", uID: null, cID: null, gID: u, jid: null, DisplayName: a, Description: "", Email: "", MemberCount: 0, EnableDuringDnd: !1, Subscribe: !1 }), AddBuddy(c = new Buddy("group", u, a, o, "", "", "", d, "", "", null, !1, !1), t, n, !1)), r.TotalRows = r.DataCollection.length, localDB.setItem(profileUserID + "-Buddies", JSON.stringify(r)), c
}

function UpdateBuddyCalerID(e, t) {
    e.CallerIDName = t;
    var n = e.identity,
        i = JSON.parse(localDB.getItem(profileUserID + "-Buddies"));
    null != i && ($.each(i.DataCollection, function(e, i) { if (i.uID == n || i.cID == n || i.gID == n) return i.DisplayName = t, !1 }), localDB.setItem(profileUserID + "-Buddies", JSON.stringify(i))), UpdateBuddyList()
}

function AddBuddy(e, t, n, i) { Buddies.push(e), 1 == t && UpdateBuddyList(), AddBuddyMessageStream(e), 1 == i && SubscribeBuddy(e), 1 == n && SelectBuddy(e.identity) }

function PopulateBuddyList() {
    Buddies = new Array;
    var e = JSON.parse(localDB.getItem(profileUserID + "-Buddies"));
    null != e && ($.each(e.DataCollection, function(e, t) {
        if ("extension" == t.Type) AddBuddy(new Buddy("extension", t.uID, t.DisplayName, t.ExtensionNumber, t.MobileNumber, t.ContactNumber1, t.ContactNumber2, t.LastActivity, t.Description, t.Email, null, t.EnableDuringDnd, t.Subscribe), !1, !1, !1);
        else if ("xmpp" == t.Type) { AddBuddy(new Buddy("xmpp", t.uID, t.DisplayName, t.ExtensionNumber, "", "", "", t.LastActivity, "", "", t.jid, t.EnableDuringDnd, t.Subscribe), !1, !1, !1) } else if ("contact" == t.Type) { AddBuddy(new Buddy("contact", t.cID, t.DisplayName, "", t.MobileNumber, t.ContactNumber1, t.ContactNumber2, t.LastActivity, t.Description, t.Email, null, t.EnableDuringDnd, t.Subscribe), !1, !1, !1) } else if ("group" == t.Type) { AddBuddy(new Buddy("group", t.gID, t.DisplayName, t.ExtensionNumber, "", "", "", t.LastActivity, t.MemberCount + " member(s)", t.Email, null, t.EnableDuringDnd, t.Subscribe), !1, !1, !1) }
    }), console.log("Updating Buddy List..."), UpdateBuddyList())
}

function UpdateBuddyList() {
    var e = $("#txtFindBuddy").val();
    $("#myContacts").empty();
    for (var t = 0, n = 0; n < Lines.length; n++) {
        var i = Lines[n].IsSelected ? "buddySelected" : "buddy";
        null != Lines[n].SipSession && (i = Lines[n].SipSession.isOnHold ? "buddyActiveCallHollding" : "buddyActiveCall");
        var a = '<div id="line-' + Lines[n].LineNumber + '" class=' + i + " onclick=\"SelectLine('" + Lines[n].LineNumber + "')\">";
        a += "<div class=lineIcon>" + (n + 1) + "</div>", a += '<div class=contactNameText><i class="fa fa-phone"></i> ' + lang.line + " " + (n + 1) + "</div>", a += '<div id="Line-' + Lines[n].ExtNo + '-datetime" class=contactDate>&nbsp;</div>', a += "<div class=presenceText>" + Lines[n].DisplayName + " <" + Lines[n].DisplayNumber + "></div>", a += "</div>", Lines[n].SipSession && 1 != Lines[n].SipSession.data.earlyReject && ($("#myContacts").append(a), t++)
    }
    if (1 != DisableBuddies) {
        t > 0 && $("#myContacts").append('<hr style="height:1px; background-color:#696969">'), Buddies.sort(function(e, t) {
            var n = moment.utc(e.lastActivity.replace(" UTC", "")),
                i = moment.utc(t.lastActivity.replace(" UTC", ""));
            return n.isSameOrAfter(i, "second") ? -1 : 1
        });
        for (var o = 0; o < Buddies.length; o++) {
            var s = Buddies[o];
            if (e && e.length >= 1) { var l = !1; if (s.CallerIDName.toLowerCase().indexOf(e.toLowerCase()) > -1 && (l = !0), s.ExtNo.toLowerCase().indexOf(e.toLowerCase()) > -1 && (l = !0), s.Desc.toLowerCase().indexOf(e.toLowerCase()) > -1 && (l = !0), !l) continue }
            var r = moment.utc(),
                d = moment.utc(s.lastActivity.replace(" UTC", "")),
                c = "";
            c = d.isSame(r, "day") ? d.local().format(DisplayTimeFormat) : d.local().format(DisplayDateFormat);
            i = s.IsSelected ? "buddySelected" : "buddy";
            if ("extension" == s.type) {
                "Unknown" == (u = s.presence) && (u = lang.state_unknown), "Not online" == u && (u = lang.state_not_online), "Ready" == u && (u = lang.state_ready), "On the phone" == u && (u = lang.state_on_the_phone), "Ringing" == u && (u = lang.state_ringing), "On hold" == u && (u = lang.state_on_hold), "Unavailable" == u && (u = lang.state_unavailable), 1 != s.EnableSubscribe && (u = s.Desc);
                a = '<div id="contact-' + s.identity + '" class=' + i + " onclick=\"SelectBuddy('" + s.identity + "', 'extension')\">";
                s.missed && s.missed > 0 ? a += '<span id="contact-' + s.identity + '-missed" class=missedNotifyer>' + s.missed + "</span>" : a += '<span id="contact-' + s.identity + '-missed" class=missedNotifyer style="display:none">' + s.missed + "</span>", a += "<div class=buddyIcon style=\"background-image: url('" + getPicture(s.identity, s.type) + "')\"></div>", a += "<div class=contactNameText>", a += '<span id="contact-' + s.identity + '-devstate" class="' + s.devState + '"></span>', a += " " + s.ExtNo + " - " + s.CallerIDName, a += "</div>", a += '<div id="contact-' + s.identity + '-datetime" class=contactDate>' + c + "</div>", a += '<div id="contact-' + s.identity + '-presence" class=presenceText>' + u + "</div>", a += "</div>", $("#myContacts").append(a)
            } else if ("xmpp" == s.type) {
                var u = s.presenceText;
                a = '<div id="contact-' + s.identity + '" class=' + i + " onclick=\"SelectBuddy('" + s.identity + "', 'extension')\">";
                s.missed && s.missed > 0 ? a += '<span id="contact-' + s.identity + '-missed" class=missedNotifyer>' + s.missed + "</span>" : a += '<span id="contact-' + s.identity + '-missed" class=missedNotifyer style="display:none">' + s.missed + "</span>", a += "<div class=buddyIcon style=\"background-image: url('" + getPicture(s.identity, s.type) + "')\"></div>", a += "<div class=contactNameText>", a += '<span id="contact-' + s.identity + '-devstate" class="' + s.devState + '"></span>', a += " " + s.ExtNo + " - " + s.CallerIDName, a += "</div>", a += '<div id="contact-' + s.identity + '-datetime" class=contactDate>' + c + "</div>", a += '<div id="contact-' + s.identity + '-presence" class=presenceText><i class="fa fa-comments"></i> ' + u + "</div>", a += '<div id="contact-' + s.identity + '-chatstate-menu" class=presenceText style="display:none"><i class="fa fa-keyboard-o"></i> ' + s.CallerIDName + " " + lang.is_typing + "...</div>", a += "</div>", $("#myContacts").append(a)
            } else if ("contact" == s.type) {
                a = '<div id="contact-' + s.identity + '" class=' + i + " onclick=\"SelectBuddy('" + s.identity + "', 'contact')\">";
                s.missed && s.missed > 0 ? a += '<span id="contact-' + s.identity + '-missed" class=missedNotifyer>' + s.missed + "</span>" : a += '<span id="contact-' + s.identity + '-missed" class=missedNotifyer style="display:none">' + s.missed + "</span>", a += "<div class=buddyIcon style=\"background-image: url('" + getPicture(s.identity, s.type) + "')\"></div>", a += '<div class=contactNameText><i class="fa fa-address-card"></i> ' + s.CallerIDName + "</div>", a += '<div id="contact-' + s.identity + '-datetime" class=contactDate>' + c + "</div>", a += "<div class=presenceText>" + s.Desc + "</div>", a += "</div>", $("#myContacts").append(a)
            } else if ("group" == s.type) {
                a = '<div id="contact-' + s.identity + '" class=' + i + " onclick=\"SelectBuddy('" + s.identity + "', 'group')\">";
                s.missed && s.missed > 0 ? a += '<span id="contact-' + s.identity + '-missed" class=missedNotifyer>' + s.missed + "</span>" : a += '<span id="contact-' + s.identity + '-missed" class=missedNotifyer style="display:none">' + s.missed + "</span>", a += "<div class=buddyIcon style=\"background-image: url('" + getPicture(s.identity, s.type) + "')\"></div>", a += '<div class=contactNameText><i class="fa fa-users"></i> ' + s.CallerIDName + "</div>", a += '<div id="contact-' + s.identity + '-datetime" class=contactDate>' + c + "</div>", a += "<div class=presenceText>" + s.Desc + "</div>", a += "</div>", $("#myContacts").append(a)
            }
        }
        for (o = 0; o < Buddies.length; o++)
            if (Buddies[o].IsSelected) { SelectBuddy(Buddies[o].identity, Buddies[o].type); break }
    } else 0 == t && ShowDial()
}

function AddBuddyMessageStream(e) {
    var t = '<table id="stream-' + e.identity + '" class=stream cellspacing=5 cellpadding=0>';
    if (t += '<tr><td class=streamSection style="height: 48px;">', t += '<div style="float: left; height: 48px;">', t += "<table cellpadding=0 cellspacing=0 border=0><tr><td>", t += '<button id="contact-' + e.identity + '-btn-back" onclick="CloseBuddy(\'' + e.identity + '\')" class=roundButtons title="' + lang.back + '"><i class="fa fa-chevron-left"></i></button> ', t += "</td><td>", t += '<div class=contact style="cursor: unset">', "extension" == e.type || "xmpp" == e.type ? t += '<div id="contact-' + e.identity + '-picture-main" class=buddyIcon style="background-image: url(\'' + getPicture(e.identity) + "')\"></div>" : "contact" == e.type ? t += '<div id="contact-' + e.identity + '-picture-main" class=buddyIcon style="background-image: url(\'' + getPicture(e.identity, "contact") + "')\"></div>" : "group" == e.type && (t += '<div id="contact-' + e.identity + '-picture-main" class=buddyIcon style="background-image: url(\'' + getPicture(e.identity, "group") + "')\"></div>"), "extension" == e.type || "xmpp" == e.type ? (t += '<div class=contactNameText style="margin-right: 0px;">', t += '<span id="contact-' + e.identity + '-devstate-main" class="' + e.devState + '"></span>', t += " " + e.ExtNo + " - " + e.CallerIDName, t += "</div>") : "contact" == e.type ? t += '<div class=contactNameText style="margin-right: 0px;"><i class="fa fa-address-card"></i> ' + e.CallerIDName + "</div>" : "group" == e.type && (t += '<div class=contactNameText style="margin-right: 0px;"><i class="fa fa-users"></i> ' + e.CallerIDName + "</div>"), "extension" == e.type) { var n = e.presence; "Unknown" == n && (n = lang.state_unknown), "Not online" == n && (n = lang.state_not_online), "Ready" == n && (n = lang.state_ready), "On the phone" == n && (n = lang.state_on_the_phone), "Ringing" == n && (n = lang.state_ringing), "On hold" == n && (n = lang.state_on_hold), "Unavailable" == n && (n = lang.state_unavailable), t += '<div id="contact-' + e.identity + '-presence-main" class=presenceText>' + n + "</div>" } else "xmpp" == e.type ? (t += '<div id="contact-' + e.identity + '-presence-main" class=presenceText><i class="fa fa-comments"></i> ' + e.presenceText + "</div>", t += '<div id="contact-' + e.identity + '-chatstate-main" class=presenceText style="display:none"><i class="fa fa-keyboard-o"></i> ' + e.CallerIDName + " " + lang.is_typing + "...</div>") : t += '<div id="contact-' + e.identity + '-presence-main" class=presenceText>' + e.Desc + "</div>";
    t += "</div>", t += "</td></tr></table>", t += "</div>", t += '<div style="float:right; height: 48px; line-height: 48px;">', t += '<button id="contact-' + e.identity + '-btn-audioCall" onclick="AudioCallMenu(\'' + e.identity + '\', this)" class=roundButtons title="' + lang.audio_call + '"><i class="fa fa-phone"></i></button> ', t += '<button id="contact-' + e.identity + '-btn-remove" onclick="RemoveBuddy(\'' + e.identity + '\')" class=roundButtons title="' + lang.remove + '"><i class="fa fa-trash"></i></button> ', t += "</div>", t += '<div style="clear:both; height:0px"></div>', t += '<div id="contact-' + e.identity + '-search" style="margin-top:6px; display:none">', t += '<span class=searchClean style="width:100%"><input type=text style="width:90%" autocomplete=none oninput=SearchStream(this,\'' + e.identity + "') placeholder=\"" + lang.find_something_in_the_message_stream + '"></span>', t += "</div>", t += "</td></tr>", t += '<tr><td class="streamSection streamSectionBackground" style="background-image:url(\'' + hostingPrefex + "wp_1.png')\">", t += '<div id="contact-' + e.identity + '-ChatHistory" class="chatHistory cleanScroller" ondragenter="setupDragDrop(event, \'' + e.identity + "')\" ondragover=\"setupDragDrop(event, '" + e.identity + "')\" ondragleave=\"cancelDragDrop(event, '" + e.identity + "')\" ondrop=\"onFileDragDrop(event, '" + e.identity + "')\">", t += "</div>", t += "</td></tr>", "extension" != e.type && "xmpp" != e.type && "group" != e.type || !EnableTextMessaging || (t += '<tr><td  class=streamSection style="height:80px">', t += '<div id="contact-' + e.identity + '-imagePastePreview" class=sendImagePreview style="display:none" tabindex=0></div>', t += '<div id="contact-' + e.identity + '-msgPreview" class=sendMessagePreview style="display:none">', t += "<table class=sendMessagePreviewContainer cellpadding=0 cellspacing=0><tr>", t += '<td style="text-align:right"><div id="contact-' + e.identity + '-msgPreviewhtml" class="sendMessagePreviewHtml cleanScroller"></div></td>', t += '<td style="width:40px"><button onclick="SendChatMessage(\'' + e.identity + '\')" class="roundButtons" title="' + lang.send + '"><i class="fa fa-paper-plane"></i></button></td>', t += "</tr></table>", t += "</div>", t += '<div id="contact-' + e.identity + '-fileShare" style="display:none">', t += '<input type=file multiple onchange="console.log(this)" />', t += "</div>", t += '<div id="contact-' + e.identity + '-audio-recording" style="display:none"></div>', t += '<div id="contact-' + e.identity + '-video-recording" style="display:none"></div>', t += '<div id="contact-' + e.identity + '-dictate-message" style="display:none"></div>', t += '<div id="contact-' + e.identity + '-emoji-menu" style="display:none"></div>', t += '<div id="contact-' + e.identity + '-chatstate" style="display:none"><i class="fa fa-keyboard-o"></i> ' + e.CallerIDName + " " + lang.is_typing + "...</div>", t += "<table class=sendMessageContainer cellpadding=0 cellspacing=0><tr>", t += '<td><textarea id="contact-' + e.identity + '-ChatMessage" class="chatMessage cleanScroller" placeholder="' + lang.type_your_message_here + '" onkeydown="chatOnkeydown(event, this,\'' + e.identity + "')\" onkeyup=\"chatOnkeyup(event, this,'" + e.identity + "')\" oninput=\"chatOnkeyup(event, this,'" + e.identity + "')\" onpaste=\"chatOnbeforepaste(event, this,'" + e.identity + "')\"></textarea></td>", t += '<td style="width:40px"><button onclick="AddMenu(this, \'' + e.identity + '\')" class=roundButtons title="' + lang.menu + '"><i class="fa fa-ellipsis-h"></i></button></td>', t += "</tr></table>", t += "</td></tr>"), t += "</table>", $("#rightContent").append(t)
}

function RemoveBuddyMessageStream(e, t) {
    if (null != e) {
        var n = JSON.parse(localDB.getItem(e.identity + "-stream"));
        if (t && t > 0) {
            if (n && n.DataCollection && n.DataCollection.length >= 1) {
                var i = { TotalRows: 0, DataCollection: [] };
                i.DataCollection = n.DataCollection.filter(function(e) {
                    var n = moment.utc(e.ItemDate.replace(" UTC", "")),
                        i = moment().utc().subtract(t, "days");
                    return !!n.isSameOrAfter(i, "second")
                }), i.TotalRows = i.DataCollection.length, localDB.setItem(e.identity + "-stream", JSON.stringify(i));
                var a = { TotalRows: 0, DataCollection: [] };
                a.DataCollection = n.DataCollection.filter(function(e) {
                    var n = moment.utc(e.ItemDate.replace(" UTC", "")),
                        i = moment().utc().subtract(t, "days");
                    return !n.isSameOrAfter(i, "second")
                }), a.TotalRows = a.DataCollection.length, n = a, RefreshStream(e)
            }
        } else {
            CloseBuddy(e.identity), $("#stream-" + e.identity).remove(), localDB.removeItem(e.identity + "-stream");
            var o = JSON.parse(localDB.getItem(profileUserID + "-Buddies")),
                s = 0;
            $.each(o.DataCollection, function(t, n) { if (n.uID == e.identity || n.cID == e.identity || n.gID == e.identity) return s = t, !1 }), o.DataCollection.splice(s, 1), o.TotalRows = o.DataCollection.length, localDB.setItem(profileUserID + "-Buddies", JSON.stringify(o)), localDB.removeItem("img-" + e.identity + "-extension"), localDB.removeItem("img-" + e.identity + "-contact"), localDB.removeItem("img-" + e.identity + "-group")
        }
        UpdateBuddyList(), n && n.DataCollection && n.DataCollection.length >= 1 && DeleteCallRecordings(e.identity, n), n && n.DataCollection && n.DataCollection.length >= 1 && DeleteQosData(e.identity, n)
    }
}

function DeleteCallRecordings(e, t) {
    var n = window.indexedDB.open("CallRecordings", 1);
    n.onerror = function(e) { console.error("IndexDB Request Error:", e) }, n.onupgradeneeded = function(e) { console.warn("Upgrade Required for IndexDB... probably because of first time use.") }, n.onsuccess = function(e) {
        console.log("IndexDB connected to CallRecordings");
        var n = e.target.result;
        0 != n.objectStoreNames.contains("Recordings") ? (n.onerror = function(e) { console.error("IndexDB Error:", e) }, $.each(t.DataCollection, function(e, t) { "CDR" == t.ItemType && t.Recordings && t.Recordings.length && $.each(t.Recordings, function(e, t) { console.log("Deleting Call Recording: ", t.uID); var i = n.transaction(["Recordings"], "readwrite").objectStore("Recordings"); try { i.delete(t.uID).onsuccess = function(e) { console.log("Call Recording Deleted: ", t.uID) } } catch (e) { console.log("Call Recording Delete failed: ", e) } }) })) : console.warn("IndexDB CallRecordings.Recordings does not exists")
    }
}

function MakeUpName() {
    var e = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"],
        t = "";
    t += e[Math.floor(Math.random() * e.length)];
    for (var n = 0; n < Math.floor(12 * Math.random()) + 4; n++) t += e[Math.floor(Math.random() * e.length)].toLowerCase();
    t += " ", t += e[Math.floor(Math.random() * e.length)];
    for (n = 0; n < Math.floor(12 * Math.random()) + 4; n++) t += e[Math.floor(Math.random() * e.length)].toLowerCase();
    return t
}

function MakeUpNumber() { for (var e = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"], t = "0", n = 0; n < 9; n++) t += e[Math.floor(Math.random() * e.length)]; return t }

function MakeUpBuddies(e) {
    for (var t = 0; t < e; t++) { AddBuddy(new Buddy("contact", uID(), MakeUpName(), "", "", MakeUpNumber(), "", utcDateNow(), "Testing", ""), !1, !1) }
    UpdateBuddyList()
}

function SelectBuddy(e) {
    var t = FindBuddyByIdentity(e);
    if (null != t) {
        var n = "";
        "extension" == t.type ? ("Unknown" == (n += t.presence) && (n = lang.state_unknown), "Not online" == n && (n = lang.state_not_online), "Ready" == n && (n = lang.state_ready), "On the phone" == n && (n = lang.state_on_the_phone), "Ringing" == n && (n = lang.state_ringing), "On hold" == n && (n = lang.state_on_hold), "Unavailable" == n && (n = lang.state_unavailable), 1 != t.EnableSubscribe && (n = t.Desc)) : "xmpp" == t.type ? (n += '<i class="fa fa-comments"></i> ', n += t.presenceText) : "contact" == t.type ? n += t.Desc : "group" == t.type && (n += t.Desc), $("#contact-" + t.identity + "-presence-main").html(n), $("#contact-" + t.identity + "-picture-main").css("background-image", $("#contact-" + t.identity + "-picture-main").css("background-image"));
        for (var i = 0; i < Buddies.length; i++)
            if (1 == Buddies[i].IsSelected && Buddies[i].identity == e) return;
        console.log("Selecting Buddy: " + t.CallerIDName), selectedBuddy = t, $(".streamSelected").each(function() { $(this).prop("class", "stream") }), $("#stream-" + e).prop("class", "streamSelected");
        for (var a = 0; a < Lines.length; a++) {
            var o = "buddy";
            null != Lines[a].SipSession && (o = Lines[a].SipSession.isOnHold ? "buddyActiveCallHollding" : "buddyActiveCall"), $("#line-" + Lines[a].LineNumber).prop("class", o), Lines[a].IsSelected = !1
        }
        ClearMissedBadge(e);
        for (i = 0; i < Buddies.length; i++) {
            o = Buddies[i].identity == e ? "buddySelected" : "buddy";
            $("#contact-" + Buddies[i].identity).prop("class", o), $("#contact-" + Buddies[i].identity + "-ChatHistory").empty(), Buddies[i].IsSelected = Buddies[i].identity == e
        }
        UpdateUI(), RefreshStream(t);
        try { $("#contact-" + e).get(0).scrollIntoViewIfNeeded() } catch (e) {}
        localDB.setItem("SelectedBuddy", e)
    }
}

function CloseBuddy(e) {
    $(".buddySelected").each(function() { $(this).prop("class", "buddy") }), $(".streamSelected").each(function() { $(this).prop("class", "stream") }), console.log("Closing Buddy: " + e);
    for (var t = 0; t < Buddies.length; t++) Buddies[t].IsSelected = !1;
    selectedBuddy = null;
    for (var n = 0; n < Lines.length; n++) Lines[n].IsSelected = !1;
    selectedLine = null, localDB.setItem("SelectedBuddy", null), UpdateUI()
}

function RemoveBuddy(e) {
    Confirm(lang.confirm_remove_buddy, lang.remove_buddy, function() {
        for (var t = 0; t < Buddies.length; t++)
            if (Buddies[t].identity == e) { RemoveBuddyMessageStream(Buddies[t]), UnsubscribeBuddy(Buddies[t]), "xmpp" == Buddies[t].type && XmppRemoveBuddyFromRoster(Buddies[t]), Buddies.splice(t, 1); break }
        UpdateBuddyList()
    })
}

function FindBuddyByDid(e) {
    for (var t = 0; t < Buddies.length; t++)
        if (Buddies[t].ExtNo == e || Buddies[t].MobileNumber == e || Buddies[t].ContactNumber1 == e || Buddies[t].ContactNumber2 == e) return Buddies[t];
    return null
}

function FindBuddyByExtNo(e) {
    for (var t = 0; t < Buddies.length; t++)
        if (Buddies[t].ExtNo == e) return Buddies[t];
    return null
}

function FindBuddyByNumber(e) {
    for (var t = 0; t < Buddies.length; t++)
        if (Buddies[t].MobileNumber == e || Buddies[t].ContactNumber1 == e || Buddies[t].ContactNumber2 == e) return Buddies[t];
    return null
}

function FindBuddyByIdentity(e) {
    for (var t = 0; t < Buddies.length; t++)
        if (Buddies[t].identity == e) return Buddies[t];
    return null
}

function FindBuddyByJid(e) {
    for (var t = 0; t < Buddies.length; t++)
        if (Buddies[t].jid == e) return Buddies[t];
    return console.warn("Buddy not found on jid: " + e), null
}

function SearchStream(e, t) {
    var n = e.value,
        i = FindBuddyByIdentity(t);
    "" == n ? (console.log("Restore Stream"), RefreshStream(i)) : RefreshStream(i, n)
}

function RefreshStream(e, t) {
    $("#contact-" + e.identity + "-ChatHistory").empty();
    var n = JSON.parse(localDB.getItem(e.identity + "-stream"));
    null != n && null != n.DataCollection && (n.DataCollection.sort(function(e, t) {
        var n = moment.utc(e.ItemDate.replace(" UTC", "")),
            i = moment.utc(t.ItemDate.replace(" UTC", ""));
        return n.isSameOrAfter(i, "second") ? -1 : 1
    }), t && "" != t && (console.log("Rows without filter (" + t + "): ", n.DataCollection.length), n.DataCollection = n.DataCollection.filter(function(e) {
        if (-1 != t.indexOf("date: ")) { var n = getFilter(t, "date"); if ("" != n && -1 != e.ItemDate.indexOf(n)) return !0 }
        if (e.MessageData && e.MessageData.length > 1) { if (-1 != e.MessageData.toLowerCase().indexOf(t.toLowerCase())) return !0; if (-1 != t.toLowerCase().indexOf(e.MessageData.toLowerCase())) return !0 }
        if ("MSG" == e.ItemType);
        else if ("CDR" == e.ItemType) { if (e.Tags && e.Tags.length > 1) { var i = getFilter(t, "tag"); if ("" != i && 1 == e.Tags.some(function(e) { return -1 != i.toLowerCase().indexOf(e.value.toLowerCase()) || -1 != e.value.toLowerCase().indexOf(i.toLowerCase()) })) return !0 } } else "FILE" == e.ItemType || e.ItemType;
        return !1
    }), console.log("Rows After Filter: ", n.DataCollection.length)), n.DataCollection.length > StreamBuffer && (console.log("Rows:", n.DataCollection.length, " (will be trimed to " + StreamBuffer + ")"), n.DataCollection.splice(StreamBuffer)), $.each(n.DataCollection, function(t, n) {
        var i = moment.utc(n.ItemDate.replace(" UTC", "")).isSame(moment.utc(), "day"),
            a = moment.utc(n.ItemDate.replace(" UTC", "")).local().calendar(null, { sameElse: DisplayDateFormat });
        if (i && (a = moment.utc(n.ItemDate.replace(" UTC", "")).local().format(DisplayTimeFormat)), "MSG" == n.ItemType) {
            var o = '<i class="fa fa-question-circle-o SendingMessage"></i>';
            1 == n.Sent && (o = '<i class="fa fa-check SentMessage"></i>'), 0 == n.Sent && (o = '<i class="fa fa-exclamation-circle FailedMessage"></i>'), n.Delivered && 1 == n.Delivered.state && (o += ' <i class="fa fa-check DeliveredMessage"></i>'), n.Displayed && 1 == n.Displayed.state && (o = '<i class="fa fa-check CompletedMessage"></i>');
            var s = (d = ReformatMessage(n.MessageData)).length > 1e3;
            if (n.SrcUserId == profileUserID) {
                var l = "<table class=ourChatMessage cellspacing=0 cellpadding=0><tr>";
                l += '<td class=ourChatMessageText onmouseenter="ShowChatMenu(this)" onmouseleave="HideChatMenu(this)">', l += "<span onclick=\"ShowMessgeMenu(this,'MSG','" + n.ItemId + "', '" + e.identity + '\')" class=chatMessageDropdown style="display:none"><i class="fa fa-chevron-down"></i></span>', l += "<div id=msg-text-" + n.ItemId + ' class=messageText style="' + (s ? "max-height:190px; overflow:hidden" : "") + '">' + d + "</div>", s && (l += "<div id=msg-readmore-" + n.ItemId + " class=messageReadMore><span onclick=\"ExpandMessage(this,'" + n.ItemId + "', '" + e.identity + "')\">" + lang.read_more + "</span></div>"), l += "<div class=messageDate>" + a + " " + o + "</div>", l += "</td>", l += "</tr></table>"
            } else { l = "<table class=theirChatMessage cellspacing=0 cellpadding=0><tr>"; if (l += '<td class=theirChatMessageText onmouseenter="ShowChatMenu(this)" onmouseleave="HideChatMenu(this)">', l += "<span onclick=\"ShowMessgeMenu(this,'MSG','" + n.ItemId + "', '" + e.identity + '\')" class=chatMessageDropdown style="display:none"><i class="fa fa-chevron-down"></i></span>', "group" == e.type && (l += "<div class=messageDate></div>"), l += "<div id=msg-text-" + n.ItemId + ' class=messageText style="' + (s ? "max-height:190px; overflow:hidden" : "") + '">' + d + "</div>", s && (l += "<div id=msg-readmore-" + n.ItemId + " class=messageReadMore><span onclick=\"ExpandMessage(this,'" + n.ItemId + "', '" + e.identity + "')\">" + lang.read_more + "</span></div>"), l += "<div class=messageDate>" + a + "</div>", l += "</td>", l += "</tr></table>", "xmpp" == e.type) $("#stream-" + e.identity).is(":visible") && !n.Read && (console.log("Buddy stream is now visible, marking XMPP message(" + n.ItemId + ") as read"), MarkMessageRead(e, n.ItemId), XmppSendDisplayReceipt(e, n.ItemId)) }
            $("#contact-" + e.identity + "-ChatHistory").prepend(l)
        } else if ("CDR" == n.ItemType) {
            var r = n.Billsec > 0 ? "green" : "red",
                d = "",
                c = "<span id=cdr-flagged-" + n.CdrId + ' style="' + (n.Flagged ? "" : "display:none") + '">';
            c += '<i class="fa fa-flag FlagCall"></i> ', c += "</span>";
            var u = "";
            n.MessageData && (u = n.MessageData), n.Tags || (n.Tags = []);
            var p = "<ul id=cdr-tags-" + n.CdrId + ' class=tags style="' + (n.Tags && n.Tags.length > 0 ? "" : "display:none") + '">';
            $.each(n.Tags, function(t, i) { p += "<li onclick=\"TagClick(this, '" + n.CdrId + "', '" + e.identity + "')\">" + i.value + "</li>" }), p += "<li class=tagText><input maxlength=24 type=text onkeypress=\"TagKeyPress(event, this, '" + n.CdrId + "', '" + e.identity + '\')" onfocus="TagFocus(this)"></li>', p += "</ul>", d += '<i class="fa ' + (n.WithVideo ? "fa-video-camera" : "fa-phone") + '" style="color:' + r + '"></i>';
            var g = n.WithVideo ? lang.a_video_call : lang.an_audio_call,
                m = "";
            if (n.Recordings && n.Recordings.length >= 1 && $.each(n.Recordings, function(t, i) {
                    if (i.uID) {
                        var a = moment.utc(i.startTime.replace(" UTC", "")).local(),
                            o = moment.utc(i.stopTime.replace(" UTC", "")).local(),
                            s = moment.duration(o.diff(a));
                        if (m += "<div class=callRecording>", n.WithVideo)
                            if (i.Poster) {
                                i.Poster.width, i.Poster.height;
                                var l = i.Poster.posterBase64;
                                m += '<div><IMG src="' + l + '"><button onclick="PlayVideoCallRecording(this, \'' + n.CdrId + "', '" + i.uID + '\')" class=videoPoster><i class="fa fa-play"></i></button></div>'
                            } else m += "<div><button onclick=\"PlayVideoCallRecording(this, '" + n.CdrId + "', '" + i.uID + "', '" + e.identity + '\')"><i class="fa fa-video-camera"></i></button></div>';
                        else m += "<div><button onclick=\"PlayAudioCallRecording(this, '" + n.CdrId + "', '" + i.uID + "', '" + e.identity + '\')"><i class="fa fa-play"></i></button></div>';
                        m += "<div>" + lang.started + ": " + a.format(DisplayTimeFormat) + ' <i class="fa fa-long-arrow-right"></i> ' + lang.stopped + ": " + o.format(DisplayTimeFormat) + "</div>", m += "<div>" + lang.recording_duration + ": " + formatShortDuration(s.asSeconds()) + "</div>", m += "<div>", m += '<span id="cdr-video-meta-width-' + n.CdrId + "-" + i.uID + '"></span>', m += '<span id="cdr-video-meta-height-' + n.CdrId + "-" + i.uID + '"></span>', m += '<span id="cdr-media-meta-size-' + n.CdrId + "-" + i.uID + '"></span>', m += '<span id="cdr-media-meta-codec-' + n.CdrId + "-" + i.uID + '"></span>', m += "</div>", m += "</div>"
                    }
                }), n.SrcUserId == profileUserID) {
                "0" == n.Billsec ? d += " " + lang.you_tried_to_make + " " + g + " (" + n.ReasonText + ")." : d += " " + lang.you_made + " " + g + ", " + lang.and_spoke_for + " " + formatDuration(n.Billsec) + ".";
                l = "<table class=ourChatMessage cellspacing=0 cellpadding=0><tr>";
                l += '<td style="padding-right:4px;">' + c + "</td>", l += '<td class=ourChatMessageText onmouseenter="ShowChatMenu(this)" onmouseleave="HideChatMenu(this)">', l += "<span onClick=\"ShowMessgeMenu(this,'CDR','" + n.CdrId + "', '" + e.identity + '\')" class=chatMessageDropdown style="display:none"><i class="fa fa-chevron-down"></i></span>', l += "<div>" + d + "</div>", l += "<div>" + p + "</div>", l += "<div id=cdr-comment-" + n.CdrId + " class=cdrComment>" + u + "</div>", l += "<div class=callRecordings>" + m + "</div>", l += "<div class=messageDate>" + a + "</div>", l += "</td>", l += "</tr></table>"
            } else {
                "0" == n.Billsec ? d += " " + lang.you_missed_a_call + " (" + n.ReasonText + ")." : d += " " + lang.you_recieved + " " + g + ", " + lang.and_spoke_for + " " + formatDuration(n.Billsec) + ".";
                l = "<table class=theirChatMessage cellspacing=0 cellpadding=0><tr>";
                l += '<td class=theirChatMessageText onmouseenter="ShowChatMenu(this)" onmouseleave="HideChatMenu(this)">', l += "<span onClick=\"ShowMessgeMenu(this,'CDR','" + n.CdrId + "', '" + e.identity + '\')" class=chatMessageDropdown style="display:none"><i class="fa fa-chevron-down"></i></span>', l += '<div style="text-align:left">' + d + "</div>", l += "<div>" + p + "</div>", l += "<div id=cdr-comment-" + n.CdrId + " class=cdrComment>" + u + "</div>", l += "<div class=callRecordings>" + m + "</div>", l += "<div class=messageDate> " + a + "</div>", l += "</td>", l += '<td style="padding-left:4px">' + c + "</td>", l += "</tr></table>"
            }
            $("#contact-" + e.identity + "-ChatHistory").prepend(l)
        } else "FILE" == n.ItemType || n.ItemType
    }), updateScroll(e.identity), window.setTimeout(function() { updateScroll(e.identity) }, 300))
}

function ShowChatMenu(e) { $(e).children("span").show() }

function HideChatMenu(e) { $(e).children("span").hide() }

function ExpandMessage(e, t, n) { $("#msg-text-" + t).css("max-height", ""), $("#msg-text-" + t).css("overflow", ""), $("#msg-readmore-" + t).remove(), HidePopup(500) }

function RedrawStage(e, t) {
    $("#line-" + e + "-VideoCall"), $("#line-" + e + "-stage-container");
    var n = $("#line-" + e + "-preview-container"),
        i = $("#line-" + e + "-remote-videos"),
        a = FindLineByNumber(e);
    if (null == a) return;
    var o = a.SipSession;
    if (null == o) return;
    var s = !1,
        l = "";
    n.find("video").each(function(e, t) { $(t).hide() }), n.css("width", "");
    var r = 0;
    if (i.find("video").each(function(n, i) {
            var d = i.srcObject,
                c = d.getVideoTracks()[0],
                u = c.getSettings(),
                p = u.width ? u.width : i.videoWidth,
                g = u.height ? u.height : i.videoHeight;
            d.mid && (d.channel = "unknown", d.CallerIdName = "", d.CallerIdNumber = "", d.isAdminMuted = !1, d.isAdministrator = !1, o && o.data && o.data.videoChannelNames && o.data.videoChannelNames.forEach(function(e) { d.mid == e.mid && (d.channel = e.channel) }), o && o.data && o.data.ConfbridgeChannels && o.data.ConfbridgeChannels.forEach(function(e) { e.id == d.channel && (d.CallerIdName = e.caller.name, d.CallerIdNumber = e.caller.number, d.isAdminMuted = e.muted, d.isAdministrator = e.admin) })), t && $("#line-" + e + "-preview-container").find("video").each(function(e, t) { 0 == t.id.indexOf("copy-") && t.remove() }), $(i).parent().off("click"), $(i).parent().css("width", "1px"), $(i).parent().css("height", "1px"), $(i).hide(), $(i).parent().hide(), a.pinnedVideo && a.pinnedVideo == d.trackID && "live" == c.readyState && p > 10 && g >= 10 && (s = !0, l = a.pinnedVideo), "live" == c.readyState && p > 10 && g >= 10 ? (r++, console.log("Display Video - ", c.readyState, "MID:", d.mid, "channel:", d.channel, "src width:", p, "src height", g)) : console.log("Hide Video - ", c.readyState, "MID:", d.mid)
        }), 0 == r) return n.css("width", u + "px"), void n.find("video").each(function(e, t) { $(t).show() });
    if (s && (r = 1), !i.outerWidth() > 0) return;
    if (!i.outerHeight() > 0) return;
    var d = i.outerWidth() - 6,
        c = i.outerHeight() - 6,
        u = n.outerWidth(),
        p = 0;
    let g = 1;
    for (; g < 5e3;) {
        if (!1 === StageArea(g, r, d, c, 3, .5625)) { p = g - 1; break }
        g++
    }
    p -= 6, i.find("video").each(function(n, i) {
        var a = i.srcObject,
            d = a.getVideoTracks()[0],
            c = d.getSettings(),
            u = c.width ? c.width : i.videoWidth,
            g = c.height ? c.height : i.videoHeight,
            m = p,
            f = .5625 * p;
        if (s) {
            if (l == i.srcObject.trackID) {
                $(i).parent().css("width", m + "px"), $(i).parent().css("height", f + "px"), $(i).show(), $(i).parent().show();
                var v = $("<button />", { class: "videoOverlayButtons" });
                v.html('<i class="fa fa-th-large"></i>'), v.on("click", function() { UnPinVideo(e, i) }), $(i).parent().find(".Actions").empty(), $(i).parent().find(".Actions").append(v)
            } else if ("live" == d.readyState && u > 10 && g >= 10 && t) {
                var h = $("<video />", { id: "copy-" + a.id, muted: !0, autoplay: !0, playsinline: !0, controls: !1 });
                h.get(0).srcObject = a, $("#line-" + e + "-preview-container").append(h)
            }
        } else if ("live" == d.readyState && u > 10 && g >= 10) {
            $(i).parent().css("width", m + "px"), $(i).parent().css("height", f + "px"), $(i).show(), $(i).parent().show();
            var b = $("<button />", { class: "videoOverlayButtons" });
            b.html('<i class="fa fa-thumb-tack"></i>'), b.on("click", function() { PinVideo(e, i, i.srcObject.trackID) }), $(i).parent().find(".Actions").empty(), r > 1 && $(i).parent().find(".Actions").append(b)
        }
        var S = "",
            y = "";
        1 == a.isAdminMuted && (S = '<i class="fa fa-microphone-slash" style="color:red"></i>&nbsp;'), 1 == a.isAdministrator && (y = '<i class="fa fa-user" style="color:orange"></i>&nbsp;'), "" == a.CallerIdName && (a.CallerIdName = FindBuddyByIdentity(o.data.buddyId).CallerIDName), $(i).parent().find(".callerID").html(y + S + a.CallerIdName)
    }), n.css("width", u + "px"), n.find("video").each(function(e, t) { $(t).show() })
}

function StageArea(e, t, n, i, a, o) {
    let s = w = 0,
        l = e * o + 2 * a;
    for (; s < t;) w + e > n && (w = 0, l = l + e * o + 2 * a), w = w + e + 2 * a, s++;
    return !(l > i) && e
}

function PinVideo(e, t, n) {
    var i = FindLineByNumber(e);
    null != i && (console.log("Setting Pinned Video:", n), i.pinnedVideo = n, t.srcObject.isPinned = !0, RedrawStage(e, !0))
}

function UnPinVideo(e, t) {
    var n = FindLineByNumber(e);
    null != n && (console.log("Removing Pinned Video"), n.pinnedVideo = "", t.srcObject.isPinned = !1, RedrawStage(e, !0))
}

function ExpandVideoArea(e) { $("#line-" + e + "-VideoCall").prop("class", "FullScreenVideo"), $("#line-" + e + "-preview-container").prop("class", "PreviewContainer cleanScroller PreviewContainer_FS"), $("#line-" + e + "-stage-container").prop("class", "StageContainer StageContainer_FS"), $("#line-" + e + "-call-control").prop("class", "CallControl CallControl_FS"), $("#line-" + e + "-restore").show(), $("#line-" + e + "-expand").hide(), $("#line-" + e + "-monitoring").hide(), RedrawStage(e, !1) }

function RestoreVideoArea(e) { $("#line-" + e + "-VideoCall").prop("class", ""), $("#line-" + e + "-preview-container").prop("class", "PreviewContainer cleanScroller"), $("#line-" + e + "-stage-container").prop("class", "StageContainer"), $("#line-" + e + "-call-control").prop("class", "CallControl"), $("#line-" + e + "-restore").hide(), $("#line-" + e + "-expand").show(), $("#line-" + e + "-monitoring").show(), RedrawStage(e, !1) }

function ShowMessgeMenu(t, n, i, a) {
    var o = [];
    if ("CDR" == n) {
        var s = $("#cdr-flagged-" + i).is(":visible") ? lang.clear_flag : lang.flag_call;
        o.push({ value: 1, icon: "fa fa-external-link", text: lang.show_call_detail_record }), o.push({ value: 2, icon: "fa fa-tags", text: lang.tag_call }), o.push({ value: 3, icon: "fa fa-flag", text: s }), o.push({ value: 4, icon: "fa fa-quote-left", text: lang.edit_comment })
    } else "MSG" == n && (o.push({ value: 10, icon: "fa fa-clipboard", text: lang.copy_message }), o.push({ value: 12, icon: "fa fa-quote-left", text: lang.quote_message }));
    PopupMenu(t, {
        selectEvent: function(t, n) {
            var o = n.item.attr("value");
            if (HidePopup(), null != o) {
                if (console.log("Menu click (" + o + ")"), 1 == o) {
                    var s = null;
                    if (null == (b = JSON.parse(localDB.getItem(a + "-stream"))) && null == b.DataCollection || $.each(b.DataCollection, function(e, t) { if ("CDR" == t.ItemType && t.CdrId == i) return s = t, !1 }), null == s) return;
                    var l = [],
                        r = '<div class="UiWindowField">',
                        d = moment.utc(s.ItemDate.replace(" UTC", "")).local().format(DisplayDateFormat + " " + DisplayTimeFormat),
                        c = s.CallAnswer ? moment.utc(s.CallAnswer.replace(" UTC", "")).local().format(DisplayDateFormat + " " + DisplayTimeFormat) : null,
                        u = s.RingTime ? s.RingTime : 0,
                        p = (moment.utc(s.CallEnd.replace(" UTC", "")).local().format(DisplayDateFormat + " " + DisplayTimeFormat), ""),
                        g = "";
                    "inbound" == s.CallDirection ? p = s.Src : "outbound" == s.CallDirection && (g = s.Dst), r += "<div class=UiText><b>SIP CallID</b> : " + s.SessionId + "</div>", r += "<div class=UiText><b>" + lang.call_direction + "</b> : " + s.CallDirection + "</div>", r += "<div class=UiText><b>" + lang.call_date_and_time + "</b> : " + d + "</div>", r += "<div class=UiText><b>" + lang.ring_time + "</b> : " + formatDuration(u) + " (" + u + ")</div>", r += "<div class=UiText><b>" + lang.talk_time + "</b> : " + formatDuration(s.Billsec) + " (" + s.Billsec + ")</div>", r += "<div class=UiText><b>" + lang.call_duration + "</b> : " + formatDuration(s.TotalDuration) + " (" + s.TotalDuration + ")</div>", r += "<div class=UiText><b>" + lang.video_call + "</b> : " + (s.WithVideo ? lang.yes : lang.no) + "</div>", r += "<div class=UiText><b>" + lang.flagged + "</b> : " + (s.Flagged ? '<i class="fa fa-flag FlagCall"></i> ' + lang.yes : lang.no) + "</div>", r += "<hr>", r += '<h2 style="font-size: 16px">' + lang.call_tags + "</h2>", r += "<hr>", $.each(s.Tags, function(e, t) { r += "<span class=cdrTag>" + t.value + "</span>" }), r += '<h2 style="font-size: 16px">' + lang.call_notes + "</h2>", r += "<hr>", s.MessageData && (r += '"' + s.MessageData + '"'), r += '<h2 style="font-size: 16px">' + lang.activity_timeline + "</h2>", r += "<hr>";
                    var m = s.WithVideo ? "(" + lang.with_video + ")" : "",
                        f = "inbound" == s.CallDirection ? lang.you_received_a_call_from + " " + p + " " + m : lang.you_made_a_call_to + " " + g + " " + m;
                    if (l.push({ Message: f, TimeStr: s.ItemDate }), c) {
                        var v = "inbound" == s.CallDirection ? lang.you_answered_after + " " + u + " " + lang.seconds_plural : lang.they_answered_after + " " + u + " " + lang.seconds_plural;
                        l.push({ Message: v, TimeStr: s.CallAnswer })
                    }
                    $.each(s.Transfers, function(e, t) {
                        var n = "Blind" == t.type ? lang.you_started_a_blind_transfer_to + " " + t.to + ". " : lang.you_started_an_attended_transfer_to + " " + t.to + ". ";
                        t.accept && 1 == t.accept.complete ? n += lang.the_call_was_completed : "" != t.accept.disposition && (n += lang.the_call_was_not_completed + " (" + t.accept.disposition + ")"), l.push({ Message: n, TimeStr: t.transferTime })
                    }), $.each(s.Mutes, function(e, t) { l.push({ Message: "mute" == t.event ? lang.you_put_the_call_on_mute : lang.you_took_the_call_off_mute, TimeStr: t.eventTime }) }), $.each(s.Holds, function(e, t) { l.push({ Message: "hold" == t.event ? lang.you_put_the_call_on_hold : lang.you_took_the_call_off_hold, TimeStr: t.eventTime }) }), $.each(s.ConfbridgeEvents, function(e, t) { l.push({ Message: t.event, TimeStr: t.eventTime }) }), $.each(s.ConfCalls, function(e, t) {
                        var n = lang.you_started_a_conference_call_to + " " + t.to + ". ";
                        t.accept && 1 == t.accept.complete ? n += lang.the_call_was_completed : "" != t.accept.disposition && (n += lang.the_call_was_not_completed + " (" + t.accept.disposition + ")"), l.push({ Message: n, TimeStr: t.startTime })
                    }), $.each(s.Recordings, function(e, t) {
                        var n = moment.utc(t.startTime.replace(" UTC", "")).local(),
                            i = moment.utc(t.stopTime.replace(" UTC", "")).local(),
                            a = moment.duration(i.diff(n)),
                            o = lang.call_is_being_recorded;
                        t.startTime != t.stopTime && (o += "(" + formatShortDuration(a.asSeconds()) + ")"), l.push({ Message: o, TimeStr: t.startTime })
                    }), l.push({ Message: "us" == s.Terminate ? lang.you_ended_the_call : lang.they_ended_the_call, TimeStr: s.CallEnd }), l.sort(function(e, t) {
                        var n = moment.utc(e.TimeStr.replace(" UTC", "")),
                            i = moment.utc(t.TimeStr.replace(" UTC", ""));
                        return n.isSameOrAfter(i, "second") ? 1 : -1
                    }), $.each(l, function(e, t) {
                        var n = "<table class=timelineMessage cellspacing=0 cellpadding=0><tr>";
                        n += "<td class=timelineMessageArea>", n += '<div class=timelineMessageDate style="color: #333333"><i class="fa fa-circle timelineMessageDot"></i>' + moment.utc(t.TimeStr.replace(" UTC", "")).local().format(DisplayTimeFormat) + "</div>", n += '<div class=timelineMessageText style="color: #000000">' + t.Message + "</div>", n += "</td>", r += n += "</tr></table>"
                    }), r += '<h2 style="font-size: 16px">' + lang.call_recordings + "</h2>", r += "<hr>";
                    var h = "";
                    $.each(s.Recordings, function(e, t) {
                        if (t.uID) {
                            var n = moment.utc(t.startTime.replace(" UTC", "")).local(),
                                i = moment.utc(t.stopTime.replace(" UTC", "")).local(),
                                a = moment.duration(i.diff(n));
                            h += "<div>", s.WithVideo ? h += '<div><video id="callrecording-video-' + t.uID + '" controls style="width: 100%"></div>' : h += '<div><audio id="callrecording-audio-' + t.uID + '" controls style="width: 100%"></div>', h += "<div>" + lang.started + ": " + n.format(DisplayTimeFormat) + ' <i class="fa fa-long-arrow-right"></i> ' + lang.stopped + ": " + i.format(DisplayTimeFormat) + "</div>", h += "<div>" + lang.recording_duration + ": " + formatShortDuration(a.asSeconds()) + "</div>", h += '<div><a id="download-' + t.uID + '">' + lang.save_as + "</a> (" + lang.right_click_and_select_save_link_as + ")</div>", h += "</div>"
                        }
                    }), r += h, s.CallAnswer && (r += '<h2 style="font-size: 16px">' + lang.send_statistics + "</h2>", r += "<hr>", r += '<div style="position: relative; margin: auto; height: 160px; width: 100%;"><canvas id="cdr-AudioSendBitRate"></canvas></div>', r += '<div style="position: relative; margin: auto; height: 160px; width: 100%;"><canvas id="cdr-AudioSendPacketRate"></canvas></div>', r += '<h2 style="font-size: 16px">' + lang.receive_statistics + "</h2>", r += "<hr>", r += '<div style="position: relative; margin: auto; height: 160px; width: 100%;"><canvas id="cdr-AudioReceiveBitRate"></canvas></div>', r += '<div style="position: relative; margin: auto; height: 160px; width: 100%;"><canvas id="cdr-AudioReceivePacketRate"></canvas></div>', r += '<div style="position: relative; margin: auto; height: 160px; width: 100%;"><canvas id="cdr-AudioReceivePacketLoss"></canvas></div>', r += '<div style="position: relative; margin: auto; height: 160px; width: 100%;"><canvas id="cdr-AudioReceiveJitter"></canvas></div>', r += '<div style="position: relative; margin: auto; height: 160px; width: 100%;"><canvas id="cdr-AudioReceiveLevels"></canvas></div>'), OpenWindow(r += "<br><br></div>", lang.call_detail_record, 480, 640, !1, !0, null, null, lang.cancel, function() { CloseWindow() }, function() {
                        $.each(s.Recordings, function(e, t) {
                            var n = null;
                            n = s.WithVideo ? $("#callrecording-video-" + t.uID).get(0) : $("#callrecording-audio-" + t.uID).get(0);
                            var i = $("#download-" + t.uID),
                                a = getAudioOutputID();
                            void 0 !== n.sinkId ? n.setSinkId(a).then(function() { console.log("sinkId applied: " + a) }).catch(function(e) { console.warn("Error using setSinkId: ", e) }) : console.warn("setSinkId() is not possible using this browser.");
                            var o = window.indexedDB.open("CallRecordings", 1);
                            o.onerror = function(e) { console.error("IndexDB Request Error:", e) }, o.onupgradeneeded = function(e) { console.warn("Upgrade Required for IndexDB... probably because of first time use.") }, o.onsuccess = function(e) {
                                console.log("IndexDB connected to CallRecordings");
                                var a = e.target.result;
                                if (0 != a.objectStoreNames.contains("Recordings")) {
                                    var o = a.transaction(["Recordings"]).objectStore("Recordings").get(t.uID);
                                    o.onerror = function(e) { console.error("IndexDB Get Error:", e) }, o.onsuccess = function(e) {
                                        var a = window.URL.createObjectURL(e.target.result.mediaBlob);
                                        n.src = a, s.WithVideo ? i.prop("download", "Video-Call-Recording-" + t.uID + ".webm") : i.prop("download", "Audio-Call-Recording-" + t.uID + ".webm"), i.prop("href", a)
                                    }
                                } else console.warn("IndexDB CallRecordings.Recordings does not exists")
                            }
                        }), s.CallAnswer && DisplayQosData(s.SessionId)
                    })
                }
                var b;
                if (2 == o && $("#cdr-tags-" + i).show(), 3 == o)
                    if ($("#cdr-flagged-" + i).is(":visible")) console.log("Clearing Flag from: ", i), $("#cdr-flagged-" + i).hide(), null == (b = JSON.parse(localDB.getItem(a + "-stream"))) && null == b.DataCollection || ($.each(b.DataCollection, function(e, t) { if ("CDR" == t.ItemType && t.CdrId == i) return t.Flagged = !1, !1 }), localDB.setItem(a + "-stream", JSON.stringify(b)));
                    else console.log("Flag Call: ", i), $("#cdr-flagged-" + i).show(), null == (b = JSON.parse(localDB.getItem(a + "-stream"))) && null == b.DataCollection || ($.each(b.DataCollection, function(e, t) { if ("CDR" == t.ItemType && t.CdrId == i) return t.Flagged = !0, !1 }), localDB.setItem(a + "-stream", JSON.stringify(b)));
                if (4 == o) {
                    var S = $("#cdr-comment-" + i).text();
                    $("#cdr-comment-" + i).empty();
                    var y = $("<input maxlength=500 type=text>").appendTo("#cdr-comment-" + i);
                    y.on("focus", function() { HidePopup(500) }), y.on("blur", function() {
                        var e = $(this).val();
                        SaveComment(i, a, e)
                    }), y.keypress(function(e) {
                        if ("13" == (e.keyCode ? e.keyCode : e.which)) {
                            e.preventDefault();
                            var t = $(this).val();
                            SaveComment(i, a, t)
                        }
                    }), y.val(S), y.focus()
                }
                if (10 == o) {
                    var w = $("#msg-text-" + i).text();
                    navigator.clipboard.writeText(w).then(function() { console.log("Text coppied to the clipboard:", w) }).catch(function() { console.error("Error writing to the clipboard:", e) })
                }
                if (12 == o) {
                    w = '"' + (w = $("#msg-text-" + i).text()) + '"';
                    var C = $("#contact-" + a + "-ChatMessage");
                    console.log("Quote Message:", w), C.val(w + "\n" + C.val()), RefreshChatPreview(null, C.val(), a)
                }
                if (20 == o) null == (b = JSON.parse(localDB.getItem(a + "-stream"))) && null == b.DataCollection || ($.each(b.DataCollection, function(e, t) { if ("CDR" == t.ItemType && t.CdrId == i) return b.DataCollection.splice(e, 1), !1 }), localDB.setItem(a + "-stream", JSON.stringify(b)), RefreshStream(FindBuddyByIdentity(a)));
                if (21 == o) null == (b = JSON.parse(localDB.getItem(a + "-stream"))) && null == b.DataCollection || ($.each(b.DataCollection, function(e, t) { if ("CDR" == t.ItemType && t.CdrId == i) return t.Recordings && t.Recordings.length >= 1 && $.each(t.Recordings, function(e, t) { t.Poster = null }), console.log("Poster Imagers Deleted"), !1 }), localDB.setItem(a + "-stream", JSON.stringify(b)), RefreshStream(FindBuddyByIdentity(a)))
            }
        },
        createEvent: null,
        autoFocus: !0,
        items: o
    })
}

function SaveComment(e, t, n) {
    console.log("Setting Comment:", n), $("#cdr-comment-" + e).empty(), $("#cdr-comment-" + e).append(n);
    var i = JSON.parse(localDB.getItem(t + "-stream"));
    null == i && null == i.DataCollection || ($.each(i.DataCollection, function(t, i) { if ("CDR" == i.ItemType && i.CdrId == e) return i.MessageData = n, !1 }), localDB.setItem(t + "-stream", JSON.stringify(i)))
}

function TagKeyPress(e, t, n, i) {
    HidePopup(500);
    var a = e.keyCode ? e.keyCode : e.which;
    if ("13" == a || "44" == a) {
        if (e.preventDefault(), "" == $(t).val()) return;
        console.log("Adding Tag:", $(t).val()), $("#cdr-tags-" + n + " li:last").before("<li onclick=\"TagClick(this, '" + n + "', '" + i + "')\">" + $(t).val() + "</li>"), $(t).val(""), UpdateTags(n, i)
    }
}

function TagClick(e, t, n) { console.log("Removing Tag:", $(e).text()), $(e).remove(), UpdateTags(t, n) }

function UpdateTags(e, t) {
    var n = JSON.parse(localDB.getItem(t + "-stream"));
    null == n && null == n.DataCollection || ($.each(n.DataCollection, function(t, n) { if ("CDR" == n.ItemType && n.CdrId == e) return n.Tags = [], $("#cdr-tags-" + e).children("li").each(function() { "tagText" != $(this).prop("class") && n.Tags.push({ value: $(this).text() }) }), !1 }), localDB.setItem(t + "-stream", JSON.stringify(n)))
}

function TagFocus(e) { HidePopup(500) }

function AddMenu(e, t) {
    var n = [];
    n.push({ value: 1, icon: "fa fa-smile-o", text: lang.select_expression }), n.push({ value: 2, icon: "fa fa-microphone", text: lang.dictate_message }), EnableSendFiles && i.push({ value: 3, name: '<i class="fa fa-share-alt"></i> Share File' }), EnableSendImages && i.push({ value: 4, name: '<i class="fa fa-camera"></i> Take/Share Picture' }), EnableAudioRecording && i.push({ value: 5, name: '<i class="fa fa-file-audio-o"></i> Record Audio Message' }), EnableVideoRecording && i.push({ value: 6, name: '<i class="fa fa-file-video-o"></i> Record Video Message' });
    var i = {
        selectEvent: function(e, n) {
            var i = n.item.attr("value");
            HidePopup(), null != i && ("1" == i && ShowEmojiBar(t), "2" == i && ShowDictate(t))
        },
        createEvent: null,
        autoFocus: !0,
        items: n
    };
    PopupMenu(e, i)
}

function ShowEmojiBar(e) {
    var t = $("#contact-" + e + "-emoji-menu"),
        n = $("#contact-" + e + "-ChatMessage"),
        i = $("<div/>");
    i.prop("class", "emojiButton");
    $.each(["😀", "😁", "😂", "😃", "😄", "😅", "😆", "😇", "😈", "😉", "😊", "😋", "😌", "😍", "😎", "😏", "😐", "😑", "😒", "😓", "😔", "😕", "😖", "😗", "😘", "😙", "😚", "😛", "😜", "😝", "😞", "😟", "😠", "😡", "😢", "😣", "😤", "😥", "😦", "😧", "😨", "😩", "😪", "😫", "😬", "😭", "😮", "😯", "😰", "😱", "😲", "😳", "😴", "😵", "😶", "😷", "🙁", "🙂", "🙃", "🙄", "🤐", "🤑", "🤒", "🤓", "🤔", "🤕", "🤠", "🤡", "🤢", "🤣", "🤤", "🤥", "🤧", "🤨", "🤩", "🤪", "🤫", "🤬", "🤭", "🤮", "🤯", "🧐"], function(a, o) {
        var s = $("<button>");
        s.html(o), s.on("click", function() {
            var i = n.prop("selectionStart"),
                a = n.val();
            n.val(a.substring(0, i) + $(this).html() + a.substring(i, a.length)), RefreshChatPreview(null, n.val(), e), t.hide(), updateScroll(e)
        }), i.append(s)
    }), t.empty(), t.append(i), t.show(), updateScroll(e)
}

function ShowDictate(e) {
    var t = FindBuddyByIdentity(e);
    if (null != t) {
        null != t.recognition && (t.recognition.abort(), t.recognition = null);
        try {
            var n = window.SpeechRecognition || window.webkitSpeechRecognition;
            t.recognition = new n
        } catch (e) { return console.error(e), void Alert(lang.alert_speech_recognition, lang.speech_recognition) }
        var i = $("<div/>"),
            a = $("#contact-" + e + "-dictate-message"),
            o = $("#contact-" + e + "-ChatMessage");
        t.recognition.continuous = !0, t.recognition.onstart = function() { i.html('<i class="fa fa-microphone" style="font-size: 21px"></i><i class="fa fa-cog fa-spin" style="font-size:10px; vertical-align:text-bottom; margin-left:2px"></i> ' + lang.im_listening), updateScroll(e) }, t.recognition.onspeechend = function() { i.html(lang.msg_silence_detection), window.setTimeout(function() { a.hide(), updateScroll(e) }, 1e3) }, t.recognition.onerror = function(n) { "no-speech" == n.error ? i.html(lang.msg_no_speech) : (t.recognition && (console.warn("SpeechRecognition Error: ", n), t.recognition.abort()), t.recognition = null), window.setTimeout(function() { a.hide(), updateScroll(e) }, 1e3) }, t.recognition.onresult = function(t) {
            var n = t.results[t.resultIndex][0].transcript;
            0 == (1 == t.resultIndex && n == t.results[0][0].transcript) && (($.trim(o.val()).endsWith(".") || "" == $.trim(o.val())) && ("\r" == n || "\n" == n || "\r\n" == n || "\t" == n || (n = (n = $.trim(n)).replace(/^./, " " + n[0].toUpperCase()))), console.log("Dictate:", n), o.val(o.val() + n), RefreshChatPreview(null, o.val(), e))
        }, a.empty(), a.append(i), a.show(), updateScroll(e), t.recognition.start()
    }
}

function ShowMyProfile() {
    ShowContacts(), $("#myContacts").hide(), $("#actionArea").empty();
    var e = '<div style="text-align:right"><button onclick="ShowContacts()"><i class="fa fa-close"></i></button></div>';
    e += "<div border=0 class=UiSideField>", 1 == EnableAccountSettings && (e += '<div class=UiTextHeading onclick="ToggleHeading(this,\'Configure_Extension_Html\')"><i class="fa fa-user-circle-o UiTextHeadingIcon" style="background-color:#a93a3a"></i> ' + lang.account + "</div>");
    var t = '<div id=Configure_Extension_Html style="display:none">';
    t += "<div class=UiText>" + lang.asterisk_server_address + ":</div>", t += "<div><input id=Configure_Account_wssServer class=UiInputText type=text placeholder='" + lang.eg_asterisk_server_address + "' value='" + getDbItem("wssServer", "") + "'></div>", t += "<div class=UiText>" + lang.websocket_port + ":</div>", t += "<div><input id=Configure_Account_WebSocketPort class=UiInputText type=text placeholder='" + lang.eg_websocket_port + "' value='" + getDbItem("WebSocketPort", "") + "'></div>", t += "<div class=UiText>" + lang.websocket_path + ":</div>", t += "<div><input id=Configure_Account_ServerPath class=UiInputText type=text placeholder='" + lang.eg_websocket_path + "' value='" + getDbItem("ServerPath", "") + "'></div>", t += "<div class=UiText>" + lang.internal_subscribe_extension + ":</div>", t += "<div><input id=Configure_Account_profileUser class=UiInputText type=text placeholder='" + lang.eg_internal_subscribe_extension + "' value='" + getDbItem("profileUser", "") + "'></div>", t += "<div class=UiText>" + lang.full_name + ":</div>", t += "<div><input id=Configure_Account_profileName class=UiInputText type=text placeholder='" + lang.eg_full_name + "' value='" + getDbItem("profileName", "") + "'></div>", t += "<div class=UiText>" + lang.sip_username + ":</div>", t += "<div><input id=Configure_Account_SipUsername class=UiInputText type=text placeholder='" + lang.eg_sip_username + "' value='" + getDbItem("SipUsername", "") + "'></div>", t += "<div class=UiText>" + lang.sip_password + ":</div>", t += "<div><input id=Configure_Account_SipPassword class=UiInputText type=password placeholder='" + lang.eg_sip_password + "' value='" + getDbItem("SipPassword", "") + "'></div>", t += "<div class=UiText>" + lang.chat_engine + ":</div>", t += '<ul style="list-style-type:none">', t += "<li><input type=radio name=chatEngine id=chat_type_sip " + ("XMPP" == ChatEngine ? "" : "checked") + "><label for=chat_type_sip>SIP</label>", t += "<li><input type=radio name=chatEngine id=chat_type_xmpp " + ("XMPP" == ChatEngine ? "checked" : "") + "><label for=chat_type_xmpp>XMPP</label>", t += "</ul>", t += '<div id=RowChatEngine_xmpp style="display:' + ("XMPP" == ChatEngine ? "unset" : "none") + '">', t += "<div class=UiText>XMPP " + lang.xmpp_domain + ":</div>", t += "<div><input id=Configure_Account_xmpp_domain class=UiInputText type=text placeholder='" + lang.eg_xmpp_domain + "' value='" + getDbItem("XmppDomain", "") + "'></div>", t += "<div class=UiText>XMPP " + lang.server_address + ":</div>", t += "<div><input id=Configure_Account_xmpp_address class=UiInputText type=text placeholder='" + lang.eg_xmpp_server_address + "' value='" + getDbItem("XmppServer", "") + "'></div>", t += "<div class=UiText>XMPP " + lang.websocket_port + ":</div>", t += "<div><input id=Configure_Account_xmpp_port class=UiInputText type=text placeholder='" + lang.eg_websocket_port + "' value='" + getDbItem("XmppWebsocketPort", "") + "'></div>", t += "<div class=UiText>XMPP " + lang.websocket_path + ":</div>", t += "<div><input id=Configure_Account_xmpp_path class=UiInputText type=text placeholder='" + lang.eg_websocket_path + "' value='" + getDbItem("XmppWebsocketPath", "") + "'></div>", t += "</div>", t += "</div>", 1 == EnableAccountSettings && (e += t), e += '<div class=UiTextHeading onclick="ToggleHeading(this,\'Audio_Video_Html\')"><i class="fa fa fa-video-camera UiTextHeadingIcon" style="background-color:#208e3c"></i> ' + lang.audio_video + "</div>";
    var n = '<div id=Audio_Video_Html style="display:none">';
    n += "<div class=UiText>" + lang.speaker + ":</div>", n += '<div style="text-align:center"><select id=playbackSrc style="width:100%"></select></div>', n += "<div class=Settings_VolumeOutput_Container><div id=Settings_SpeakerOutput class=Settings_VolumeOutput></div></div>", n += '<div><button class=on_white id=preview_output_play><i class="fa fa-play"></i></button></div>', n += "<div id=RingDeviceSection>", n += "<div class=UiText>" + lang.ring_device + ":</div>", n += '<div style="text-align:center"><select id=ringDevice style="width:100%"></select></div>', n += "<div class=Settings_VolumeOutput_Container><div id=Settings_RingerOutput class=Settings_VolumeOutput></div></div>", n += '<div><button class=on_white id=preview_ringer_play><i class="fa fa-play"></i></button></div>', n += "</div>", n += "<div class=UiText>" + lang.microphone + ":</div>", n += '<div style="text-align:center"><select id=microphoneSrc style="width:100%"></select></div>', n += "<div class=Settings_VolumeOutput_Container><div id=Settings_MicrophoneOutput class=Settings_VolumeOutput></div></div>", n += "<div><input type=checkbox id=Settings_AutoGainControl><label for=Settings_AutoGainControl> " + lang.auto_gain_control + "<label></div>", n += "<div><input type=checkbox id=Settings_EchoCancellation><label for=Settings_EchoCancellation> " + lang.echo_cancellation + "<label></div>", n += "<div><input type=checkbox id=Settings_NoiseSuppression><label for=Settings_NoiseSuppression> " + lang.noise_suppression + "<label></div>", n += '<div style="text-align:center; margin-top:10px;display: none;"><video id=local-video-preview class=previewVideo muted playsinline></video></div>', e += n += "</div>";
    var i = '<div id=Appearance_Html style="display:none">';
    i += '<div id=ImageCanvas style="width:150px; height:150px"></div>', i += '<div style="margin-top:50px;"><input id=fileUploader type=file></div>', i += '<div style="margin-top:10px"></div>';
    var a = getDbItem("profileVcard", null);
    null != a && (a = JSON.parse(a)), i += "<div class=UiText>" + lang.title_description + ":</div>", i += "<div><input id=Configure_Profile_TitleDesc class=UiInputText type=text placeholder='" + lang.eg_general_manager + "' value='" + (null != a ? a.TitleDesc : "") + "'></div>", i += "<div class=UiText>" + lang.mobile_number + ":</div>", i += "<div><input id=Configure_Profile_Mobile class=UiInputText type=text placeholder='" + lang.eg_mobile_number + "' value='" + (null != a ? a.Mobile : "") + "'></div>", i += "<div class=UiText>" + lang.email + ":</div>", i += "<div><input id=Configure_Profile_Email class=UiInputText type=text placeholder='" + lang.email + "' value='" + (null != a ? a.Email : "") + "'></div>", i += "<div class=UiText>" + lang.contact_number_1 + ":</div>", i += "<div><input id=Configure_Profile_Number1 class=UiInputText type=text placeholder='" + lang.eg_contact_number_1 + "' value='" + (null != a ? a.Number1 : "") + "'></div>", i += "<div class=UiText>" + lang.contact_number_2 + ":</div>", i += "<div><input id=Configure_Profile_Number2 class=UiInputText type=text placeholder='" + lang.eg_contact_number_2 + "' value='" + (null != a ? a.Number2 : "") + "'></div>", i += "</div>", 1 == EnableAppearanceSettings && (e += i), 1 == EnableNotificationSettings && (e += '<div class=UiTextHeading onclick="ToggleHeading(this,\'Notifications_Html\')"><i class="fa fa-bell UiTextHeadingIcon" style="background-color:#ab8e04"></i> ' + lang.notifications + "</div>");
    var o = '<div id=Notifications_Html style="display:none">';
    o += "<div class=UiText>" + lang.notifications + ":</div>", o += "<div><input type=checkbox id=Settings_Notifications><label for=Settings_Notifications> " + lang.enable_onscreen_notifications + "<label></div>", o += "</div>", 1 == EnableNotificationSettings && (e += o), e += "</div>", e += "<div class=UiWindowButtonBar id=ButtonBar></div>", $("#actionArea").html(e);
    var s = [];
    s.push({
        text: lang.save,
        action: function() {
            var e = $("#chat_type_sip").is(":checked") ? "SIMPLE" : "XMPP";
            if (EnableAccountSettings) { if ("" == $("#Configure_Account_wssServer").val()) return void console.warn("Validation Failed"); if ("" == $("#Configure_Account_WebSocketPort").val()) return void console.warn("Validation Failed"); if ("" == $("#Configure_Account_profileUser").val()) return void console.warn("Validation Failed"); if ("" == $("#Configure_Account_profileName").val()) return void console.warn("Validation Failed"); if ("" == $("#Configure_Account_SipUsername").val()) return void console.warn("Validation Failed"); if ("" == $("#Configure_Account_SipPassword").val()) return void console.warn("Validation Failed"); if ("XMPP" == e) { if ("" == $("#Configure_Account_xmpp_domain").val()) return void console.warn("Validation Failed"); if ("" == $("#Configure_Account_xmpp_address").val()) return void console.warn("Validation Failed"); if ("" == $("#Configure_Account_xmpp_port").val()) return void console.warn("Validation Failed") } }
            if (null == localDB.getItem("profileUserID") && localDB.setItem("profileUserID", uID()), EnableAccountSettings && (localDB.setItem("wssServer", $("#Configure_Account_wssServer").val()), localDB.setItem("WebSocketPort", $("#Configure_Account_WebSocketPort").val()), localDB.setItem("ServerPath", $("#Configure_Account_ServerPath").val()), localDB.setItem("profileUser", $("#Configure_Account_profileUser").val()), localDB.setItem("profileName", $("#Configure_Account_profileName").val()), localDB.setItem("SipUsername", $("#Configure_Account_SipUsername").val()), localDB.setItem("SipPassword", $("#Configure_Account_SipPassword").val()), localDB.setItem("ChatEngine", e), localDB.setItem("XmppDomain", $("#Configure_Account_xmpp_domain").val()), localDB.setItem("XmppServer", $("#Configure_Account_xmpp_address").val()), localDB.setItem("XmppWebsocketPort", $("#Configure_Account_xmpp_port").val()), localDB.setItem("XmppWebsocketPath", $("#Configure_Account_xmpp_path").val())), localDB.setItem("AudioOutputId", $("#playbackSrc").val()), localDB.setItem("VideoSrcId", $("#previewVideoSrc").val()), localDB.setItem("VideoHeight", $("input[name=Settings_Quality]:checked").val()), localDB.setItem("FrameRate", $("input[name=Settings_FrameRate]:checked").val()), localDB.setItem("AspectRatio", $("input[name=Settings_AspectRatio]:checked").val()), localDB.setItem("VideoOrientation", $("input[name=Settings_Oriteation]:checked").val()), localDB.setItem("AudioSrcId", $("#microphoneSrc").val()), localDB.setItem("AutoGainControl", $("#Settings_AutoGainControl").is(":checked") ? "1" : "0"), localDB.setItem("EchoCancellation", $("#Settings_EchoCancellation").is(":checked") ? "1" : "0"), localDB.setItem("NoiseSuppression", $("#Settings_NoiseSuppression").is(":checked") ? "1" : "0"), localDB.setItem("RingOutputId", $("#ringDevice").val()), EnableAppearanceSettings) {
                var t = { TitleDesc: $("#Configure_Profile_TitleDesc").val(), Mobile: $("#Configure_Profile_Mobile").val(), Email: $("#Configure_Profile_Email").val(), Number1: $("#Configure_Profile_Number1").val(), Number2: $("#Configure_Profile_Number2").val() };
                localDB.setItem("profileVcard", JSON.stringify(t));
                $("#Appearance_Html").show(), $("#ImageCanvas").croppie("result", { type: "base64", size: "viewport", format: "png", quality: 1, circle: !1 }).then(function(e) { localDB.setItem("profilePicture", e), $("#Appearance_Html").hide(), Alert(lang.alert_settings, lang.reload_required, function() { window.location.reload() }) })
            } else Alert(lang.alert_settings, lang.reload_required, function() { window.location.reload() });
            EnableNotificationSettings && localDB.setItem("Notifications", $("#Settings_Notifications").is(":checked") ? "1" : "0")
        }
    }), s.push({ text: lang.cancel, action: function() { ShowContacts() } }), $.each(s, function(e, t) {
        var n = $("<button>" + t.text + "</button>").click(t.action);
        $("#ButtonBar").append(n)
    }), $("#actionArea").show(), window.setTimeout(function() {
        EnableAccountSettings && ($("#chat_type_sip").change(function() { $("#chat_type_sip").is(":checked") && $("#RowChatEngine_xmpp").hide() }), $("#chat_type_xmpp").change(function() { $("#chat_type_xmpp").is(":checked") && $("#RowChatEngine_xmpp").show() }));
        var e = $("#playbackSrc"),
            t = $("#preview_output_play"),
            n = $("#preview_ringer_play"),
            i = $("#microphoneSrc");
        $("#Settings_AutoGainControl").prop("checked", AutoGainControl), $("#Settings_EchoCancellation").prop("checked", EchoCancellation), $("#Settings_NoiseSuppression").prop("checked", NoiseSuppression);
        var a = $("#previewVideoSrc"),
            o = $("input[name=Settings_Oriteation]");
        o.each(function() { this.value == MirrorVideo && $(this).prop("checked", !0) }), $("#local-video-preview").css("transform", MirrorVideo);
        var s = $("input[name=Settings_FrameRate]");
        s.each(function() { this.value == maxFrameRate && $(this).prop("checked", !0) });
        var l = $("input[name=Settings_Quality]");
        l.each(function() { this.value == videoHeight && $(this).prop("checked", !0) });
        var r = $("input[name=Settings_AspectRatio]");
        r.each(function() { this.value == videoAspectRatio && $(this).prop("checked", !0) });
        $("#ringTone");
        var d = $("#ringDevice");
        r.change(function() {
            console.log("Call to change Aspect Ratio (" + this.value + ")");
            var e = $("#local-video-preview").get(0);
            e.muted = !0, e.playsinline = !0, e.autoplay = !0, e.srcObject.getTracks().forEach(function(e) { e.stop() });
            var t = { audio: !1, video: { deviceId: "default" != a.val() ? { exact: a.val() } : "default" } };
            "" != $("input[name=Settings_FrameRate]:checked").val() && (t.video.frameRate = $("input[name=Settings_FrameRate]:checked").val()), "" != $("input[name=Settings_Quality]:checked").val() && (t.video.height = $("input[name=Settings_Quality]:checked").val()), "" != this.value && (t.video.aspectRatio = this.value), console.log("Constraints:", t);
            var n = new MediaStream;
            navigator.mediaDevices && navigator.mediaDevices.getUserMedia(t).then(function(t) {
                var i = t.getVideoTracks()[0];
                n.addTrack(i), e.srcObject = n, e.onloadedmetadata = function(t) { e.play() }
            }).catch(function(e) { console.error(e), Alert(lang.alert_error_user_media, lang.error) })
        }), l.change(function() {
            console.log("Call to change Video Height (" + this.value + ")");
            var e = $("#local-video-preview").get(0);
            e.muted = !0, e.playsinline = !0, e.autoplay = !0, e.srcObject.getTracks().forEach(function(e) { e.stop() });
            var t = { audio: !1, video: { deviceId: "default" != a.val() ? { exact: a.val() } : "default" } };
            "" != $("input[name=Settings_FrameRate]:checked").val() && (t.video.frameRate = $("input[name=Settings_FrameRate]:checked").val()), this.value && (t.video.height = this.value), "" != $("input[name=Settings_AspectRatio]:checked").val() && (t.video.aspectRatio = $("input[name=Settings_AspectRatio]:checked").val()), console.log("Constraints:", t);
            var n = new MediaStream;
            navigator.mediaDevices && navigator.mediaDevices.getUserMedia(t).then(function(t) {
                var i = t.getVideoTracks()[0];
                n.addTrack(i), e.srcObject = n, e.onloadedmetadata = function(t) { e.play() }
            }).catch(function(e) { console.error(e), Alert(lang.alert_error_user_media, lang.error) })
        }), s.change(function() {
            console.log("Call to change Frame Rate (" + this.value + ")");
            var e = $("#local-video-preview").get(0);
            e.muted = !0, e.playsinline = !0, e.autoplay = !0, e.srcObject.getTracks().forEach(function(e) { e.stop() });
            var t = { audio: !1, video: { deviceId: "default" != a.val() ? { exact: a.val() } : "default" } };
            "" != this.value && (t.video.frameRate = this.value), "" != $("input[name=Settings_Quality]:checked").val() && (t.video.height = $("input[name=Settings_Quality]:checked").val()), "" != $("input[name=Settings_AspectRatio]:checked").val() && (t.video.aspectRatio = $("input[name=Settings_AspectRatio]:checked").val()), console.log("Constraints:", t);
            var n = new MediaStream;
            navigator.mediaDevices && navigator.mediaDevices.getUserMedia(t).then(function(t) {
                var i = t.getVideoTracks()[0];
                n.addTrack(i), e.srcObject = n, e.onloadedmetadata = function(t) { e.play() }
            }).catch(function(e) { console.error(e), Alert(lang.alert_error_user_media, lang.error) })
        }), i.change(function() {
            console.log("Call to change Microphone (" + this.value + ")");
            try { window.SettingsMicrophoneStream.getTracks().forEach(function(e) { e.stop() }), window.SettingsMicrophoneStream = null } catch (e) {}
            try { soundMeter = window.SettingsMicrophoneSoundMeter, soundMeter.stop(), window.SettingsMicrophoneSoundMeter = null } catch (e) {}
            var e = { audio: { deviceId: { exact: this.value } }, video: !1 },
                t = new MediaStream;
            navigator.mediaDevices.getUserMedia(e).then(function(e) {
                var n = e.getAudioTracks()[0];
                null != n && (t.addTrack(n), window.SettingsMicrophoneStream = t, window.SettingsMicrophoneSoundMeter = MeterSettingsOutput(t, "Settings_MicrophoneOutput", "width", 50))
            }).catch(function(e) { console.log("Failed to getUserMedia", e) })
        }), e.change(function() {
            console.log("Call to change Speaker (" + this.value + ")");
            var e = window.SettingsOutputAudio;
            null != e && void 0 !== e.sinkId && e.setSinkId(this.value).then(function() { console.log("sinkId applied to audioObj:", this.value) }).catch(function(e) { console.warn("Failed not apply setSinkId.", e) })
        }), t.click(function() {
            try { window.SettingsOutputAudio.pause() } catch (e) {}
            window.SettingsOutputAudio = null;
            try { window.SettingsOutputStream.getTracks().forEach(function(e) { e.stop() }) } catch (e) {}
            window.SettingsOutputStream = null;
            try { window.SettingsOutputStreamMeter.stop() } catch (e) {}
            window.SettingsOutputStreamMeter = null, console.log("Audio:", audioBlobs.speech_orig.url);
            var t = new Audio(audioBlobs.speech_orig.blob);
            t.preload = "auto", t.onplay = function() {
                var e = new MediaStream;
                if (void 0 !== t.captureStream) e = t.captureStream();
                else {
                    if (void 0 !== t.mozCaptureStream) return;
                    if (void 0 === t.webkitCaptureStream) return void console.warn("Cannot display Audio Levels");
                    e = t.webkitCaptureStream()
                }
                window.SettingsOutputStream = e, window.SettingsOutputStreamMeter = MeterSettingsOutput(e, "Settings_SpeakerOutput", "width", 50)
            }, t.oncanplaythrough = function(n) { void 0 !== t.sinkId && t.setSinkId(e.val()).then(function() { console.log("Set sinkId to:", e.val()) }).catch(function(e) { console.warn("Failed not apply setSinkId.", e) }), t.play().then(function() {}).catch(function(e) { console.warn("Unable to play audio file", e) }), console.log("Playing sample audio file... ") }, window.SettingsOutputAudio = t
        }), n.click(function() {
            try { window.SettingsRingerAudio.pause() } catch (e) {}
            window.SettingsRingerAudio = null;
            try { window.SettingsRingerStream.getTracks().forEach(function(e) { e.stop() }) } catch (e) {}
            window.SettingsRingerStream = null;
            try { window.SettingsRingerStreamMeter.stop() } catch (e) {}
            window.SettingsRingerStreamMeter = null, console.log("Audio:", audioBlobs.Ringtone.url);
            var e = new Audio(audioBlobs.Ringtone.blob);
            e.preload = "auto", e.onplay = function() {
                var t = new MediaStream;
                if (void 0 !== e.captureStream) t = e.captureStream();
                else {
                    if (void 0 !== e.mozCaptureStream) return;
                    if (void 0 === e.webkitCaptureStream) return void console.warn("Cannot display Audio Levels");
                    t = e.webkitCaptureStream()
                }
                window.SettingsRingerStream = t, window.SettingsRingerStreamMeter = MeterSettingsOutput(t, "Settings_RingerOutput", "width", 50)
            }, e.oncanplaythrough = function(t) { void 0 !== e.sinkId && e.setSinkId(d.val()).then(function() { console.log("Set sinkId to:", d.val()) }).catch(function(e) { console.warn("Failed not apply setSinkId.", e) }), e.play().then(function() {}).catch(function(e) { console.warn("Unable to play audio file", e) }), console.log("Playing sample audio file... ") }, window.SettingsRingerAudio = e
        }), o.change(function() { console.log("Call to change Orientation (" + this.value + ")"), $("#local-video-preview").css("transform", this.value) }), a.change(function() {
            console.log("Call to change WebCam (" + this.value + ")");
            var e = $("#local-video-preview").get(0);
            e.muted = !0, e.playsinline = !0, e.autoplay = !0, e.srcObject.getTracks().forEach(function(e) { e.stop() });
            var t = { audio: !1, video: { deviceId: "default" != this.value ? { exact: this.value } : "default" } };
            "" != $("input[name=Settings_FrameRate]:checked").val() && (t.video.frameRate = $("input[name=Settings_FrameRate]:checked").val()), "" != $("input[name=Settings_Quality]:checked").val() && (t.video.height = $("input[name=Settings_Quality]:checked").val()), "" != $("input[name=Settings_AspectRatio]:checked").val() && (t.video.aspectRatio = $("input[name=Settings_AspectRatio]:checked").val()), console.log("Constraints:", t);
            var n = new MediaStream;
            navigator.mediaDevices && navigator.mediaDevices.getUserMedia(t).then(function(t) {
                var i = t.getVideoTracks()[0];
                n.addTrack(i), e.srcObject = n, e.onloadedmetadata = function(t) { e.play() }
            }).catch(function(e) { console.error(e), Alert(lang.alert_error_user_media, lang.error) })
        });
        var c = $("#local-video-preview").get(0);
        c.muted = !0, c.playsinline = !0, c.autoplay = !0;
        var u = new MediaStream,
            p = new MediaStream;
        if (navigator.mediaDevices ? navigator.mediaDevices.enumerateDevices().then(function(t) {
                for (var n = getVideoSrcID(), o = !1, s = getAudioSrcID(), l = !1, r = !1, g = !1, m = !1, f = 0; f < t.length; ++f) console.log("Found Device (" + t[f].kind + "): ", t[f].label), "audioinput" === t[f].kind ? (r = !0, "default" != s && t[f].deviceId == s && (l = !0)) : "audiooutput" === t[f].kind ? g = !0 : "videoinput" === t[f].kind && (m = !0, "default" != n && t[f].deviceId == n && (o = !0));
                var v = { audio: r, video: m };
                r && (v.audio = { deviceId: "default" }, l && (v.audio.deviceId = { exact: s })), m && (v.video = { deviceId: "default" }, o && (v.video.deviceId = { exact: n })), "" != $("input[name=Settings_FrameRate]:checked").val() && (v.video.frameRate = $("input[name=Settings_FrameRate]:checked").val()), "" != $("input[name=Settings_Quality]:checked").val() && (v.video.height = $("input[name=Settings_Quality]:checked").val()), "" != $("input[name=Settings_AspectRatio]:checked").val() && (v.video.aspectRatio = $("input[name=Settings_AspectRatio]:checked").val()), console.log("Get User Media", v), navigator.mediaDevices.getUserMedia(v).then(function(e) {
                    var t = e.getVideoTracks().length >= 1 ? e.getVideoTracks()[0] : null;
                    m && null != t ? (u.addTrack(t), c.srcObject = u, c.onloadedmetadata = function(e) { c.play() }) : console.warn("No video / webcam devices found. Video Calling will not be possible.");
                    var n = e.getAudioTracks().length >= 1 ? e.getAudioTracks()[0] : null;
                    return r && null != n ? (p.addTrack(n), window.SettingsMicrophoneStream = p, window.SettingsMicrophoneSoundMeter = MeterSettingsOutput(p, "Settings_MicrophoneOutput", "width", 50)) : console.warn("No microphone devices found. Calling will not be possible."), $("#Settings_SpeakerOutput").css("width", "0%"), $("#Settings_RingerOutput").css("width", "0%"), g || (console.log("No speaker devices found, make sure one is plugged in."), $("#playbackSrc").hide(), $("#RingDeviceSection").hide()), navigator.mediaDevices.enumerateDevices()
                }).then(function(t) {
                    for (var n = 0; n < t.length; ++n) {
                        console.log("Found Device (" + t[n].kind + ") Again: ", t[n].label, t[n].deviceId);
                        var o = t[n],
                            s = o.deviceId,
                            l = o.label;
                        if (l.indexOf("(") > 0 && (l = l.substring(0, l.indexOf("("))), (c = $("<option/>")).prop("value", s), "audioinput" === o.kind) c.text("" != l ? l : "Microphone"), getAudioSrcID() == s && c.prop("selected", !0), i.append(c);
                        else if ("audiooutput" === o.kind) {
                            c.text("" != l ? l : "Speaker"), getAudioOutputID() == s && c.prop("selected", !0), e.append(c);
                            var r = c.clone();
                            getRingerOutputID() == s && r.prop("selected", !0), d.append(r)
                        } else "videoinput" === o.kind && (getVideoSrcID() == s && c.prop("selected", !0), c.text("" != l ? l : "Webcam"), a.append(c))
                    }
                    var c;
                    a.children("option").length > 0 && ((c = $("<option/>")).prop("value", "default"), "default" != getVideoSrcID() && "" != getVideoSrcID() && "null" != getVideoSrcID() || c.prop("selected", !0), c.text("(Default)"), a.append(c))
                }).catch(function(e) { console.error(e), Alert(lang.alert_error_user_media, lang.error) })
            }).catch(function(e) { console.error("Error getting Media Devices", e) }) : Alert(lang.alert_media_devices, lang.error), EnableAppearanceSettings && (cropper = $("#ImageCanvas").croppie({ viewport: { width: 150, height: 150, type: "circle" } }), $("#ImageCanvas").croppie("bind", { url: getPicture("profilePicture") }), $("#fileUploader").change(function() {
                var e = $(this).prop("files");
                if (1 == e.length) {
                    var t = Math.floor(1e9 * Math.random()),
                        n = e[0],
                        i = n.name,
                        a = n.size;
                    if (a <= 52428800) {
                        console.log("Adding (" + t + "): " + i + " of size: " + a + "bytes");
                        var o = new FileReader;
                        o.Name = i, o.UploadId = t, o.Size = a, o.onload = function(e) { $("#ImageCanvas").croppie("bind", { url: e.target.result }) }, o.readAsDataURL(n)
                    } else Alert(lang.alert_file_size, lang.error)
                } else Alert(lang.alert_single_file, lang.error)
            })), EnableNotificationSettings) {
            var g = $("#Settings_Notifications");
            g.prop("checked", NotificationsActive), g.change(function() { this.checked && "granted" != Notification.permission && (checkNotificationPromise() ? Notification.requestPermission().then(function(e) { console.log(e), HandleNotifyPermission(e) }) : Notification.requestPermission(function(e) { console.log(e), HandleNotifyPermission(e) })) })
        }
    }, 0)
}

function RefreshRegistration() { Unregister(), console.log("Unregister complete..."), window.setTimeout(function() { console.log("Starting registration..."), Register() }, 1e3) }

function ToggleHeading(e, t) { $("#" + t).toggle() }

function ToggleAutoAnswer() {
    if ("disabled" == AutoAnswerPolicy) return AutoAnswerEnabled = !1, void console.warn("Policy AutoAnswer: Disabled");
    AutoAnswerEnabled = 1 != AutoAnswerEnabled, "enabled" == AutoAnswerPolicy && (AutoAnswerEnabled = !0), localDB.setItem("AutoAnswerEnabled", 1 == AutoAnswerEnabled ? "1" : "0"), console.log("AutoAnswer:", AutoAnswerEnabled)
}

function ToggleDoNoDisturb() {
    if ("disabled" == DoNotDisturbPolicy) return DoNotDisturbEnabled = !1, void console.warn("Policy DoNotDisturb: Disabled");
    DoNotDisturbEnabled = 1 != DoNotDisturbEnabled, "enabled" == DoNotDisturbPolicy && (DoNotDisturbEnabled = !0), localDB.setItem("DoNotDisturbEnabled", 1 == DoNotDisturbEnabled ? "1" : "0"), $("#dereglink").attr("class", 1 == DoNotDisturbEnabled ? "dotDoNotDisturb" : "dotOnline"), console.log("DoNotDisturb", DoNotDisturbEnabled)
}

function ToggleCallWaiting() {
    if ("disabled" == CallWaitingPolicy) return CallWaitingEnabled = !1, void console.warn("Policy CallWaiting: Disabled");
    CallWaitingEnabled = 1 != CallWaitingEnabled, "enabled" == CallWaitingPolicy && (CallWaitingPolicy = !0), localDB.setItem("CallWaitingEnabled", 1 == CallWaitingEnabled ? "1" : "0"), console.log("CallWaiting", CallWaitingEnabled)
}

function ToggleRecordAllCalls() {
    if ("disabled" == CallRecordingPolicy) return RecordAllCalls = !1, void console.warn("Policy CallRecording: Disabled");
    RecordAllCalls = 1 != RecordAllCalls, "enabled" == CallRecordingPolicy && (RecordAllCalls = !0), localDB.setItem("RecordAllCalls", 1 == RecordAllCalls ? "1" : "0"), console.log("RecordAllCalls", RecordAllCalls)
}

function ChangeSettings(e, t) {
    var n = FindLineByNumber(e);
    if (null != n && null != n.SipSession) {
        var i = n.SipSession;
        if (navigator.mediaDevices) {
            var a = [];
            a.push({ value: "", icon: null, text: lang.microphone, isHeader: !0 });
            for (var o = 0; o < AudioinputDevices.length; ++o) {
                var s = (r = AudioinputDevices[o]).deviceId;
                (d = r.label ? r.label : "Microphone").indexOf("(") > 0 && (d = d.substring(0, d.indexOf("(")));
                var l = i.data.AudioSourceDevice == s;
                a.push({ value: "input-" + s, icon: "fa fa-microphone", text: d, isDisabled: l })
            }
            if (HasSpeakerDevice) {
                a.push({ value: "", icon: null, text: "-" }), a.push({ value: "", icon: null, text: lang.speaker, isHeader: !0 });
                for (o = 0; o < SpeakerDevices.length; ++o) {
                    s = (r = SpeakerDevices[o]).deviceId;
                    (d = r.label ? r.label : "Speaker").indexOf("(") > 0 && (d = d.substring(0, d.indexOf("(")));
                    l = i.data.AudioOutputDevice == s;
                    a.push({ value: "output-" + s, icon: "fa fa-volume-up", text: d, isDisabled: l })
                }
            }
            if (1 == i.data.withvideo) {
                a.push({ value: "", icon: null, text: "-" }), a.push({ value: "", icon: null, text: lang.camera, isHeader: !0 });
                for (o = 0; o < VideoinputDevices.length; ++o) {
                    var r, d;
                    s = (r = VideoinputDevices[o]).deviceId;
                    (d = r.label ? r.label : "Webcam").indexOf("(") > 0 && (d = d.substring(0, d.indexOf("(")));
                    l = i.data.VideoSourceDevice == s
                }
            }
            PopupMenu(t, {
                selectEvent: function(t, a) {
                    var o = a.item.attr("value");
                    if (null != o) {
                        if (o.indexOf("input-") > -1) {
                            var s = o.replace("input-", "");
                            console.log("Call to change Microphone: ", s), HidePopup();
                            n.LocalSoundMeter && n.LocalSoundMeter.stop(), i.data.AudioSourceDevice = s;
                            var l = { audio: { deviceId: "default" != s ? { exact: s } : "default" }, video: !1 };
                            navigator.mediaDevices.getUserMedia(l).then(function(t) {
                                var a = t.getAudioTracks()[0];
                                i.sessionDescriptionHandler.peerConnection.getSenders().forEach(function(t) { t.track && "audio" == t.track.kind && (console.log("Switching Audio Track : " + t.track.label + " to " + a.label), t.track.stop(), t.replaceTrack(a).then(function() { n.LocalSoundMeter = StartLocalAudioMediaMonitoring(e, i) }).catch(function(e) { console.error("Error replacing track: ", e) })) })
                            }).catch(function(e) { console.error("Error on getUserMedia") })
                        }
                        if (o.indexOf("output-") > -1) {
                            s = o.replace("output-", "");
                            console.log("Call to change Speaker: ", s), HidePopup(), i.data.AudioOutputDevice = s;
                            var r = s;
                            console.log("Attempting to set Audio Output SinkID for line " + e + " [" + r + "]");
                            var d = $("#line-" + e + "-remoteAudio").get(0);
                            d && (void 0 !== d.sinkId ? d.setSinkId(r).then(function() { console.log("sinkId applied: " + r) }).catch(function(e) { console.warn("Error using setSinkId: ", e) }) : console.warn("setSinkId() is not possible using this browser."))
                        }
                        if (o.indexOf("video-") > -1) {
                            s = o.replace("video-", "");
                            console.log("Call to change WebCam"), HidePopup(), switchVideoSource(e, s)
                        }
                    } else HidePopup()
                },
                createEvent: null,
                autoFocus: !0,
                items: a
            })
        } else console.warn("navigator.mediaDevices not possible.")
    } else console.warn("SIP Session is NULL.")
}

function PresentCamera(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        var n = t.SipSession;
        $("#line-" + e + "-src-camera").prop("disabled", !0), $("#line-" + e + "-src-canvas").prop("disabled", !1), $("#line-" + e + "-src-desktop").prop("disabled", !1), $("#line-" + e + "-src-video").prop("disabled", !1), $("#line-" + e + "-src-blank").prop("disabled", !1), $("#line-" + e + "-scratchpad-container").hide(), RemoveScratchpad(e), $("#line-" + e + "-sharevideo").hide(), $("#line-" + e + "-sharevideo").get(0).pause(), $("#line-" + e + "-sharevideo").get(0).removeAttribute("src"), $("#line-" + e + "-sharevideo").get(0).load(), window.clearInterval(n.data.videoResampleInterval), $("#line-" + e + "-localVideo").show(), $("#line-" + e + "-remote-videos").show(), RedrawStage(e, !0), switchVideoSource(e, n.data.VideoSourceDevice)
    } else console.warn("Line or Session is Null.")
}

function PresentScreen(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        var n = t.SipSession;
        $("#line-" + e + "-src-camera").prop("disabled", !1), $("#line-" + e + "-src-canvas").prop("disabled", !1), $("#line-" + e + "-src-desktop").prop("disabled", !0), $("#line-" + e + "-src-video").prop("disabled", !1), $("#line-" + e + "-src-blank").prop("disabled", !1), $("#line-" + e + "-scratchpad-container").hide(), RemoveScratchpad(e), $("#line-" + e + "-sharevideo").hide(), $("#line-" + e + "-sharevideo").get(0).pause(), $("#line-" + e + "-sharevideo").get(0).removeAttribute("src"), $("#line-" + e + "-sharevideo").get(0).load(), window.clearInterval(n.data.videoResampleInterval), $("#line-" + e + "-localVideo").show(), $("#line-" + e + "-remote-videos").show(), ShareScreen(e)
    } else console.warn("Line or Session is Null.")
}

function PresentScratchpad(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        var n = t.SipSession;
        $("#line-" + e + "-src-camera").prop("disabled", !1), $("#line-" + e + "-src-canvas").prop("disabled", !0), $("#line-" + e + "-src-desktop").prop("disabled", !1), $("#line-" + e + "-src-video").prop("disabled", !1), $("#line-" + e + "-src-blank").prop("disabled", !1), $("#line-" + e + "-scratchpad-container").hide(), RemoveScratchpad(e), $("#line-" + e + "-sharevideo").hide(), $("#line-" + e + "-sharevideo").get(0).pause(), $("#line-" + e + "-sharevideo").get(0).removeAttribute("src"), $("#line-" + e + "-sharevideo").get(0).load(), window.clearInterval(n.data.videoResampleInterval), $("#line-" + e + "-localVideo").show(), $("#line-" + e + "-remote-videos").hide(), SendCanvas(e)
    } else console.warn("Line or Session is Null.")
}

function PresentVideo(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        t.SipSession;
        RestoreVideoArea(e);
        OpenWindow('<div class="UiWindowField"><input type=file  accept="video/*" id=SelectVideoToSend></div>', lang.select_video, 150, 360, !1, !1, null, null, lang.cancel, function() { CloseWindow() }, function() {
            $("#SelectVideoToSend").on("change", function(t) {
                var n = t.target;
                n.files.length >= 1 ? (CloseWindow(), SendVideo(e, URL.createObjectURL(n.files[0]))) : console.warn("Please Select a file to present.")
            })
        }, null)
    } else console.warn("Line or Session is Null.")
}

function PresentBlank(e) {
    var t = FindLineByNumber(e);
    if (null != t && null != t.SipSession) {
        var n = t.SipSession;
        $("#line-" + e + "-src-camera").prop("disabled", !1), $("#line-" + e + "-src-canvas").prop("disabled", !1), $("#line-" + e + "-src-desktop").prop("disabled", !1), $("#line-" + e + "-src-video").prop("disabled", !1), $("#line-" + e + "-src-blank").prop("disabled", !0), $("#line-" + e + "-scratchpad-container").hide(), RemoveScratchpad(e), $("#line-" + e + "-sharevideo").hide(), $("#line-" + e + "-sharevideo").get(0).pause(), $("#line-" + e + "-sharevideo").get(0).removeAttribute("src"), $("#line-" + e + "-sharevideo").get(0).load(), window.clearInterval(n.data.videoResampleInterval), $("#line-" + e + "-localVideo").hide(), $("#line-" + e + "-remote-videos").show(), DisableVideoStream(e)
    } else console.warn("Line or Session is Null.")
}

function RemoveScratchpad(e) {
    var t = GetCanvas("line-" + e + "-scratchpad");
    null != t && (window.clearInterval(t.redrawIntrtval), RemoveCanvas("line-" + e + "-scratchpad"), $("#line-" + e + "-scratchpad-container").empty(), t = null)
}

function ShowCallStats(e, t) { console.log("Show Call Stats"), $("#line-" + e + "-AdioStats").show(300) }

function HideCallStats(e, t) { console.log("Hide Call Stats"), $("#line-" + e + "-AdioStats").hide(300) }

function chatOnbeforepaste(e, t, n) {
    console.log("Handle paste, checking for Images...");
    for (var i = (e.clipboardData || e.originalEvent.clipboardData).items, a = !1, o = 0; o < i.length; o++)
        if (0 !== i[o].type.indexOf("image"));
        else {
            console.log("Image found! Opening image editor...");
            var s = i[o].getAsFile(),
                l = new FileReader;
            l.onload = function(e) {
                console.log("Image loaded... setting placeholder...");
                var t = new Image;
                t.onload = function() { console.log("Placeholder loaded... CreateImageEditor..."), CreateImageEditor(n, t) }, t.src = e.target.result
            }, l.readAsDataURL(s), a = !0
        }
    a && e.preventDefault()
}

function chatOnkeydown(e, t, n) {
    if ("13" == (e.keyCode ? e.keyCode : e.which)) { if (!e.shiftKey && !e.ctrlKey) return e.preventDefault(), SendChatMessage(n), !1 } else {
        var i = FindBuddyByIdentity(n);
        null != i && "xmpp" == i.type && XmppStartComposing(i)
    }
    RefreshChatPreview(e, $.trim($(t).val()), n)
}

function chatOnInput(e, t, n) { console.log(e), RefreshChatPreview(e, $.trim($(t).val()), n) }

function chatOnkeyup(e, t, n) { RefreshChatPreview(e, $.trim($(t).val()), n) }

function RefreshChatPreview(e, t, n) {
    if ("" != t) {
        var i = ReformatMessage(t);
        $("#contact-" + n + "-msgPreviewhtml").html(i), $("#contact-" + n + "-msgPreview").show()
    } else ClearChatPreview(n);
    updateScroll(n)
}

function ClearChatPreview(e) { $("#contact-" + e + "-msgPreviewhtml").html(""), $("#contact-" + e + "-msgPreview").hide() }

function ReformatMessage(e) { var t = e; return t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = t.replace(/</gi, "&lt;")).replace(/>/gi, "&gt;")).replace(/\n/gi, "<br>")).replace(/(:\)|:\-\)|:o\))/g, String.fromCodePoint(128578))).replace(/(:\(|:\-\(|:o\()/g, String.fromCodePoint(128577))).replace(/(;\)|;\-\)|;o\))/g, String.fromCodePoint(128521))).replace(/(:'\(|:'\-\()/g, String.fromCodePoint(128554))).replace(/(:'\(|:'\-\()/g, String.fromCodePoint(128514))).replace(/(:\$)/g, String.fromCodePoint(128563))).replace(/(>:\()/g, String.fromCodePoint(128547))).replace(/(:\×)/g, String.fromCodePoint(128536))).replace(/(:\O|:\‑O)/g, String.fromCodePoint(128562))).replace(/(:P|:\-P|:p|:\-p)/g, String.fromCodePoint(128539))).replace(/(;P|;\-P|;p|;\-p)/g, String.fromCodePoint(128540))).replace(/(:D|:\-D)/g, String.fromCodePoint(128525))).replace(/(\(like\))/g, String.fromCodePoint(128077))).replace(/((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/gi, function(e) { var t = e.length > 50 ? e.substring(0, 47) + "..." : e; return '<A target=_blank class=previewHyperlink href="' + e + '">' + t + "</A>" }) }

function getPicture(e, t, n) {
    if ("profilePicture" == e) return user.base_url + "/hyper/assets/images/users/avatar-1.jpg";
    t = t || "extension";
    var i = FindBuddyByIdentity(e);
    if (null == i) return hostingPrefex + "default.png";
    if (1 != n && "" != i.imageObjectURL) return i.imageObjectURL;
    var a = localDB.getItem("img-" + e + "-" + t);
    return null == a ? hostingPrefex + "default.png" : (i.imageObjectURL = URL.createObjectURL(base64toBlob(a, "image/png")), i.imageObjectURL)
}

function CreateImageEditor(e, t) {
    $("#contact-" + e + "-imagePastePreview").is(":visible") ? ($("#contact-" + e + "-imagePastePreview").empty(), RemoveCanvas("contact-" + e + "-imageCanvas")) : $("#contact-" + e + "-imagePastePreview").show();
    var n = $("<div/>");
    n.css("margin-bottom", "5px"), n.append('<button class="toolBarButtons" title="Select" onclick="ImageEditor_Select(\'' + e + '\')"><i class="fa fa-mouse-pointer"></i></button>'), n.append("&nbsp;|&nbsp;"), n.append('<button class="toolBarButtons" title="Draw" onclick="ImageEditor_FreedrawPen(\'' + e + '\')"><i class="fa fa-pencil"></i></button>'), n.append('<button class="toolBarButtons" title="Paint" onclick="ImageEditor_FreedrawPaint(\'' + e + '\')"><i class="fa fa-paint-brush"></i></button>'), n.append("&nbsp;|&nbsp;"), n.append('<button class="toolBarButtons" title="Select Line Color" onclick="ImageEditor_SetectLineColor(\'' + e + '\')"><i class="fa fa-pencil-square-o" style="color:rgb(255, 0, 0)"></i></button>'), n.append('<button class="toolBarButtons" title="Select Fill Color" onclick="ImageEditor_SetectFillColor(\'' + e + '\')"><i class="fa fa-pencil-square" style="color:rgb(255, 0, 0)"></i></button>'), n.append("&nbsp;|&nbsp;"), n.append('<button class="toolBarButtons" title="Add Circle" onclick="ImageEditor_AddCircle(\'' + e + '\')"><i class="fa fa-circle"></i></button>'), n.append('<button class="toolBarButtons" title="Add Rectangle" onclick="ImageEditor_AddRectangle(\'' + e + '\')"><i class="fa fa-stop"></i></button>'), n.append('<button class="toolBarButtons" title="Add Triangle" onclick="ImageEditor_AddTriangle(\'' + e + '\')"><i class="fa fa-play"></i></button>'), n.append('<button class="toolBarButtons" title="Add Emoji" onclick="ImageEditor_SetectEmoji(\'' + e + '\')"><i class="fa fa-smile-o"></i></button>'), n.append('<button class="toolBarButtons" title="Add Text" onclick="ImageEditor_AddText(\'' + e + '\')"><i class="fa fa-font"></i></button>'), n.append('<button class="toolBarButtons" title="Delete Selected Items" onclick="ImageEditor_Clear(\'' + e + '\')"><i class="fa fa-times"></i></button>'), n.append('<button class="toolBarButtons" title="Clear All" onclick="ImageEditor_ClearAll(\'' + e + '\')"><i class="fa fa-trash"></i></button>'), n.append("&nbsp;|&nbsp;"), n.append('<button class="toolBarButtons" title="Pan" onclick="ImageEditor_Pan(\'' + e + '\')"><i class="fa fa-hand-paper-o"></i></button>'), n.append('<button class="toolBarButtons" title="Zoom In" onclick="ImageEditor_ZoomIn(\'' + e + '\')"><i class="fa fa-search-plus"></i></button>'), n.append('<button class="toolBarButtons" title="Zoom Out" onclick="ImageEditor_ZoomOut(\'' + e + '\')"><i class="fa fa-search-minus"></i></button>'), n.append('<button class="toolBarButtons" title="Reset Pan & Zoom" onclick="ImageEditor_ResetZoom(\'' + e + '\')"><i class="fa fa-search" aria-hidden="true"></i></button>'), n.append("&nbsp;|&nbsp;"), n.append('<button class="toolBarButtons" title="Cancel" onclick="ImageEditor_Cancel(\'' + e + '\')"><i class="fa fa-times-circle"></i></button>'), n.append('<button class="toolBarButtons" title="Send" onclick="ImageEditor_Send(\'' + e + '\')"><i class="fa fa-paper-plane"></i></button>'), $("#contact-" + e + "-imagePastePreview").append(n);
    var i = $("<canvas/>");
    i.prop("id", "contact-" + e + "-imageCanvas"), i.css("border", "1px solid #CCCCCC"), $("#contact-" + e + "-imagePastePreview").append(i);
    var a = t.width,
        o = t.height,
        s = $("#contact-" + e + "-imagePastePreview").width() - 2;
    $("#contact-" + e + "-imageCanvas").prop("width", s), $("#contact-" + e + "-imageCanvas").prop("height", 480);
    var l = 1,
        r = 1,
        d = 1;
    a > s || o > 480 ? (a > s && (r = s / a), o > 480 && (d = 480 / o), a *= l = Math.min(r, d), o *= l, $("#contact-" + e + "-imageCanvas").prop("width", a), $("#contact-" + e + "-imageCanvas").prop("height", o)) : ($("#contact-" + e + "-imageCanvas").prop("width", a), $("#contact-" + e + "-imageCanvas").prop("height", o));
    var c = new fabric.Canvas("contact-" + e + "-imageCanvas");
    c.id = "contact-" + e + "-imageCanvas", c.ToolSelected = "None", c.PenColour = "rgb(255, 0, 0)", c.PenWidth = 2, c.PaintColour = "rgba(227, 230, 3, 0.6)", c.PaintWidth = 10, c.FillColour = "rgb(255, 0, 0)", c.isDrawingMode = !1, c.selectionColor = "rgba(112,179,233,0.25)", c.selectionBorderColor = "rgba(112,179,233, 0.8)", c.selectionLineWidth = 1, c.setZoom(l), c.on("mouse:down", function(e) { var t = e.e; "Pan" == this.ToolSelected && (this.isDragging = !0, this.selection = !1, this.lastPosX = t.clientX, this.lastPosY = t.clientY), null != e.target && (!0 === t.altKey && (e.target.lockMovementX = !0), !0 === t.shiftKey && (e.target.lockMovementY = !0), e.target.set({ transparentCorners: !1, borderColor: "rgba(112,179,233, 0.4)", cornerColor: "rgba(112,179,233, 0.8)", cornerSize: 6 })) }), c.on("mouse:move", function(e) {
        if (this.isDragging) {
            var t = e.e;
            this.viewportTransform[4] += t.clientX - this.lastPosX, this.viewportTransform[5] += t.clientY - this.lastPosY, this.requestRenderAll(), this.lastPosX = t.clientX, this.lastPosY = t.clientY
        }
    }), c.on("mouse:up", function(e) { this.isDragging = !1, this.selection = !0, null != e.target && (e.target.lockMovementX = !1, e.target.lockMovementY = !1) }), c.on("mouse:wheel", function(e) {
        var t = e.e.deltaY,
            n = (c.getPointer(e.e), c.getZoom());
        (n += t / 200) > 10 && (n = 10), n < .1 && (n = .1), c.zoomToPoint({ x: e.e.offsetX, y: e.e.offsetY }, n), e.e.preventDefault(), e.e.stopPropagation()
    }), c.backgroundImage = new fabric.Image(t), CanvasCollection.push(c), $("#contact-" + e + "-imagePastePreview").keydown(function(t) { 46 == (t = t || window.event).keyCode && ImageEditor_Clear(e) }), ImageEditor_FreedrawPen(e)
}

function GetCanvas(e) {
    for (var t = 0; t < CanvasCollection.length; t++) try { if (CanvasCollection[t].id == e) return CanvasCollection[t] } catch (e) { console.warn("CanvasCollection.id not available") }
    return null
}

function RemoveCanvas(e) {
    for (var t = 0; t < CanvasCollection.length; t++) try { if (CanvasCollection[t].id == e) { console.log("Found Old Canvas, Disposing..."), CanvasCollection[t].clear(), CanvasCollection[t].dispose(), CanvasCollection[t].id = "--deleted--", console.log("CanvasCollection.splice(" + t + ", 1)"), CanvasCollection.splice(t, 1); break } } catch (e) {}
    console.log("There are " + CanvasCollection.length + " canvas now.")
}
var ImageEditor_Select = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); return null != t && (t.ToolSelected = "none", t.isDrawingMode = !1, !0) },
    ImageEditor_FreedrawPen = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); return null != t && (t.freeDrawingBrush.color = t.PenColour, t.freeDrawingBrush.width = t.PenWidth, t.ToolSelected = "Draw", t.isDrawingMode = !0, console.log(t), !0) },
    ImageEditor_FreedrawPaint = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); return null != t && (t.freeDrawingBrush.color = t.PaintColour, t.freeDrawingBrush.width = t.PaintWidth, t.ToolSelected = "Paint", t.isDrawingMode = !0, !0) },
    ImageEditor_Pan = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); return null != t && (t.ToolSelected = "Pan", t.isDrawingMode = !1, !0) },
    ImageEditor_ResetZoom = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); return null != t && (t.setZoom(1), t.setViewportTransform([1, 0, 0, 1, 0, 0]), !0) },
    ImageEditor_ZoomIn = function(e) {
        var t = GetCanvas("contact-" + e + "-imageCanvas");
        if (null != t) {
            var n = t.getZoom();
            (n += .5) > 10 && (n = 10), n < .1 && (n = .1);
            var i = new fabric.Point(t.getWidth() / 2, t.getHeight() / 2);
            fabric.util.transformPoint(i, t.viewportTransform);
            return t.zoomToPoint(i, n), !0
        }
        return !1
    },
    ImageEditor_ZoomOut = function(e) {
        var t = GetCanvas("contact-" + e + "-imageCanvas");
        if (null != t) {
            var n = t.getZoom();
            (n -= .5) > 10 && (n = 10), n < .1 && (n = .1);
            var i = new fabric.Point(t.getWidth() / 2, t.getHeight() / 2);
            fabric.util.transformPoint(i, t.viewportTransform);
            return t.zoomToPoint(i, n), !0
        }
        return !1
    },
    ImageEditor_AddCircle = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); if (null != t) { t.ToolSelected = "none", t.isDrawingMode = !1; var n = new fabric.Circle({ radius: 20, fill: t.FillColour }); return t.add(n), t.centerObject(n), t.setActiveObject(n), !0 } return !1 },
    ImageEditor_AddRectangle = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); if (null != t) { t.ToolSelected = "none", t.isDrawingMode = !1; var n = new fabric.Rect({ width: 40, height: 40, fill: t.FillColour }); return t.add(n), t.centerObject(n), t.setActiveObject(n), !0 } return !1 },
    ImageEditor_AddTriangle = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); if (null != t) { t.ToolSelected = "none", t.isDrawingMode = !1; var n = new fabric.Triangle({ width: 40, height: 40, fill: t.FillColour }); return t.add(n), t.centerObject(n), t.setActiveObject(n), !0 } return !1 },
    ImageEditor_AddEmoji = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); if (null != t) { t.ToolSelected = "none", t.isDrawingMode = !1; var n = new fabric.Text(String.fromCodePoint(128578), { fontSize: 24 }); return t.add(n), t.centerObject(n), t.setActiveObject(n), !0 } return !1 },
    ImageEditor_AddText = function(e, t) { var n = GetCanvas("contact-" + e + "-imageCanvas"); if (null != n) { n.ToolSelected = "none", n.isDrawingMode = !1; var i = new fabric.IText(t, { fill: n.FillColour, fontFamily: "arial", fontSize: 18 }); return n.add(i), n.centerObject(i), n.setActiveObject(i), !0 } return !1 },
    ImageEditor_Clear = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); if (null != t) { t.ToolSelected = "none", t.isDrawingMode = !1; for (var n = t.getActiveObjects(), i = 0; i < n.length; i++) t.remove(n[i]); return t.discardActiveObject(), !0 } return !1 },
    ImageEditor_ClearAll = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); if (null != t) { var n = t.backgroundImage; return t.ToolSelected = "none", t.isDrawingMode = !1, t.clear(), t.backgroundImage = n, !0 } return !1 },
    ImageEditor_Cancel = function(e) { console.log("Removing ImageEditor..."), $("#contact-" + e + "-imagePastePreview").empty(), RemoveCanvas("contact-" + e + "-imageCanvas"), $("#contact-" + e + "-imagePastePreview").hide() },
    ImageEditor_Send = function(e) { var t = GetCanvas("contact-" + e + "-imageCanvas"); return null != t && (SendImageDataMessage(e, t.toDataURL({ format: "png" })), !0) },
    allowDradAndDrop = function() { var e = document.createElement("div"); return ("draggable" in e || "ondragstart" in e && "ondrop" in e) && "FormData" in window && "FileReader" in window };

function onFileDragDrop(e, t) {
    var n = e.dataTransfer.files;
    console.log("You are about to upload " + n.length + " file."), $("#contact-" + t + "-ChatHistory").css("outline", "none");
    for (var i = 0; i < n.length; i++) {
        var a = n[i],
            o = new FileReader;
        o.onload = function(e) { a.size <= 52428800 ? SendFileDataMessage(t, e.target.result, a.name, a.size) : alert("The file '" + a.name + "' is bigger than 50MB, you cannot upload this file") }, console.log("Adding: " + a.name + " of size: " + a.size + "bytes"), o.readAsDataURL(a)
    }
    preventDefault(e)
}

function cancelDragDrop(e, t) { $("#contact-" + t + "-ChatHistory").css("outline", "none"), preventDefault(e) }

function setupDragDrop(e, t) { $("#contact-" + t + "-ChatHistory").css("outline", "2px dashed #184369"), preventDefault(e) }

function preventDefault(e) { e.preventDefault(), e.stopPropagation() }

function OpenWindow(e, t, n, i, a, o, s, l, r, d, c, u) {
    console.log("Open Window: " + t), null != windowObj && (windowObj.dialog("close"), windowObj = null), windowObj = $("<div></div>").html(e).dialog({ autoOpen: !1, title: t, modal: !0, width: i, height: n, resizable: o, classes: { "ui-dialog-content": "scroller" }, close: function(e, t) { $(this).dialog("destroy"), windowObj = null } });
    var p = [];
    s && l && p.push({ text: s, click: function() { console.log("Button 1 (" + s + ") Clicked"), l() } }), r && d && p.push({ text: r, click: function() { console.log("Button 2 (" + r + ") Clicked"), d() } }), p.length >= 1 && windowObj.dialog("option", "buttons", p), u && windowObj.on("dialogbeforeclose", function(e, t) { return u(this) }), c && windowObj.on("dialogopen", function(e, t) { c() }), windowObj.dialog("open"), a && windowObj.dialog({ dialogClass: "no-close" });
    var g = $(window).outerWidth(),
        m = $(window).outerHeight(),
        f = windowObj.parent().outerHeight();
    g <= i || m <= f ? (windowObj.parent().css("top", "0px"), windowObj.parent().css("left", "0px"), windowObj.dialog("option", "height", m), windowObj.dialog("option", "width", g)) : (windowObj.parent().css("left", g / 2 - i / 2 + "px"), windowObj.parent().css("top", m / 2 - f / 2 + "px")), $(".ui-dialog-titlebar").dblclick(function() { windowObj.parent().css("top", "0px"), windowObj.parent().css("left", "0px"), windowObj.dialog("option", "height", m), windowObj.dialog("option", "width", g) })
}

function CloseWindow(e) { null != windowObj && (windowObj.dialog("close"), windowObj = null), 1 == e && (null != confirmObj && (confirmObj.dialog("close"), confirmObj = null), null != promptObj && (promptObj.dialog("close"), promptObj = null), null != alertObj && (alertObj.dialog("close"), alertObj = null)) }

function WindowProgressOn() {}

function WindowProgressOff() {}

function Alert(e, t, n) {
    if (null != confirmObj && (confirmObj.dialog("close"), confirmObj = null), null != promptObj && (promptObj.dialog("close"), promptObj = null), null == alertObj) {
        console.log("Alert called with Title: " + t + ", saying: " + e);
        var i = "<div class=NoSelect>";
        i += '<div class=UiText style="padding: 10px" id=AllertMessageText>' + e + "</div>", i += "</div>", alertObj = $("<div>").html(i).dialog({ autoOpen: !1, title: t, modal: !0, width: 300, height: "auto", resizable: !1, closeOnEscape: !1, close: function(e, t) { $(this).dialog("destroy"), alertObj = null } });
        var a = [];
        a.push({ text: lang.ok, click: function() { console.log("Alert OK clicked"), n && n(), $(this).dialog("close"), alertObj = null } }), alertObj.dialog("option", "buttons", a), alertObj.dialog("open"), alertObj.dialog({ dialogClass: "no-close" });
        var o = $(window).outerWidth(),
            s = $(window).outerHeight(),
            l = alertObj.parent().outerHeight();
        alertObj.parent().css("left", o / 2 - 150 + "px"), s <= l ? (alertObj.parent().css("top", "0px"), alertObj.dialog("option", "height", s)) : alertObj.parent().css("top", s / 2 - l / 2 + "px")
    } else console.error("Alert not null, while Alert called: " + t + ", saying:" + e)
}

function Confirm(e, t, n, i) {
    if (null != alertObj && (alertObj.dialog("close"), alertObj = null), null != promptObj && (promptObj.dialog("close"), promptObj = null), null == confirmObj) {
        console.log("Confirm called with Title: " + t + ", saying: " + e);
        var a = "<div class=NoSelect>";
        a += '<div class=UiText style="padding: 10px" id=ConfrimMessageText>' + e + "</div>", a += "</div>", confirmObj = $("<div>").html(a).dialog({ autoOpen: !1, title: t, modal: !0, width: 300, height: "auto", resizable: !1, closeOnEscape: !1, close: function(e, t) { $(this).dialog("destroy"), confirmObj = null } });
        var o = [];
        o.push({ text: lang.ok, click: function() { console.log("Confrim OK clicked"), n && n(), $(this).dialog("close"), confirmObj = null } }), o.push({ text: lang.cancel, click: function() { console.log("Confirm Cancel clicked"), i && i(), $(this).dialog("close"), confirmObj = null } }), confirmObj.dialog("option", "buttons", o), confirmObj.dialog("open"), confirmObj.dialog({ dialogClass: "no-close" });
        var s = $(window).outerWidth(),
            l = $(window).outerHeight(),
            r = confirmObj.parent().outerHeight();
        confirmObj.parent().css("left", s / 2 - 150 + "px"), l <= r ? (confirmObj.parent().css("top", "0px"), confirmObj.dialog("option", "height", l)) : confirmObj.parent().css("top", l / 2 - r / 2 + "px")
    } else console.error("Confirm not null, while Confrim called with Title: " + t + ", saying: " + e)
}

function Prompt(e, t, n, i, a, o, s, l) {
    if (null != alertObj && (alertObj.dialog("close"), alertObj = null), null != confirmObj && (confirmObj.dialog("close"), confirmObj = null), null == promptObj) {
        console.log("Prompt called with Title: " + t + ", saying: " + e);
        var r = "<div class=NoSelect>";
        r += '<div class=UiText style="padding: 10px" id=PromptMessageText>', r += e, r += '<div style="margin-top:10px">' + n + " : </div>", r += '<div style="margin-top:5px"><INPUT id=PromptValueField type=' + a + ' value="' + i + '" placeholder="' + o + '" style="width:98%"></div>', r += "</div>", r += "</div>", promptObj = $("<div>").html(r).dialog({ autoOpen: !1, title: t, modal: !0, width: 300, height: "auto", resizable: !1, closeOnEscape: !1, close: function(e, t) { $(this).dialog("destroy"), promptObj = null } });
        var d = [];
        d.push({ text: lang.ok, click: function() { console.log("Prompt OK clicked, with value: " + $("#PromptValueField").val()), s && s($("#PromptValueField").val()), $(this).dialog("close"), promptObj = null } }), d.push({ text: lang.cancel, click: function() { console.log("Prompt Cancel clicked"), l && l(), $(this).dialog("close"), promptObj = null } }), promptObj.dialog("option", "buttons", d), promptObj.dialog("open"), promptObj.dialog({ dialogClass: "no-close" });
        var c = $(window).outerWidth(),
            u = $(window).outerHeight(),
            p = promptObj.parent().outerHeight();
        promptObj.parent().css("left", c / 2 - 150 + "px"), u <= p ? (promptObj.parent().css("top", "0px"), promptObj.dialog("option", "height", u)) : promptObj.parent().css("top", u / 2 - p / 2 + "px")
    } else console.error("Prompt not null, while Prompt called with Title: " + t + ", saying: " + e)
}

function PopupMenu(e, t) {
    console.log("Show Popup Menu"), null != menuObj && (menuObj.menu("destroy"), menuObj.empty(), menuObj.remove(), menuObj = null);
    var n = $(e).offset().left - $(document).scrollLeft(),
        i = $(e).offset().top - $(document).scrollTop(),
        a = $(e).outerWidth(),
        o = $(e).outerHeight();
    menuObj = $("<ul></ul>"), t && t.items && $.each(t.items, function(e, t) {
        var n = 1 == t.isHeader ? ' class="ui-widget-header"' : "",
            i = 1 == t.isDisabled ? ' class="ui-state-disabled"' : "";
        null != t.icon ? menuObj.append('<li value="' + t.value + '" ' + n + " " + i + '><div><span class="' + t.icon + ' ui-icon"></span>' + t.text + "</div></li>") : menuObj.append('<li value="' + t.value + '" ' + n + " " + i + "><div>" + t.text + "</div></li>")
    }), menuObj.append("<li><div>-</div></li>"), menuObj.append('<li><div style="text-align:center; padding-right: 2em">' + lang.cancel + "</div></li>"), menuObj.appendTo(document.body), menuObj.menu({}), t && t.selectEvent && menuObj.on("menuselect", t.selectEvent), t && t.createEvent && menuObj.on("menucreate", t.createEvent), menuObj.on("blur", function() { HidePopup() }), t && 1 == t.autoFocus && menuObj.focus();
    var s = menuObj.outerWidth(),
        l = n - (s / 2 - a / 2);
    l + s + 10 > window.innerWidth && (l = window.innerWidth - s - 10), l < 0 && (l = 0), menuObj.css("left", l + "px");
    var r = menuObj.outerHeight(),
        d = i + o;
    d + r + 10 > window.innerHeight && (d = window.innerHeight - r - 10), d < 0 && (d = 0), menuObj.css("top", d + "px")
}

function HidePopup(e) {
    if (e) window.setTimeout(function() {
        if (null != menuObj) {
            menuObj.menu("destroy");
            try { menuObj.empty() } catch (e) {}
            try { menuObj.remove() } catch (e) {}
            menuObj = null
        }
    }, e);
    else if (null != menuObj) {
        menuObj.menu("destroy");
        try { menuObj.empty() } catch (e) {}
        try { menuObj.remove() } catch (e) {}
        menuObj = null
    }
}

function DetectDevices() { navigator.mediaDevices.enumerateDevices().then(function(e) { HasVideoDevice = !1, HasAudioDevice = !1, HasSpeakerDevice = !1, AudioinputDevices = [], VideoinputDevices = [], SpeakerDevices = []; for (var t = 0; t < e.length; ++t) "audioinput" === e[t].kind ? (HasAudioDevice = !0, AudioinputDevices.push(e[t])) : "audiooutput" === e[t].kind ? (HasSpeakerDevice = !0, SpeakerDevices.push(e[t])) : "videoinput" === e[t].kind && (HasVideoDevice = !0, VideoinputDevices.push(e[t])) }).catch(function(e) { console.error("Error enumerating devices", e) }) }

function onStatusChange(e) { e == Strophe.Status.CONNECTING ? console.log("XMPP is connecting...") : e == Strophe.Status.CONNFAIL ? console.warn("XMPP failed to connect.") : e == Strophe.Status.DISCONNECTING ? console.log("XMPP is disconnecting.") : e == Strophe.Status.DISCONNECTED ? (console.log("XMPP is disconnected."), window.setTimeout(function() {}, 5e3)) : e == Strophe.Status.CONNECTED ? (console.log("XMPP is connected!"), XmppSetMyVcard(), XmppGetBuddies(), XMPP.ping = window.setTimeout(function() { XmppSendPing() }, 45e3)) : console.log("XMPP is: ", Strophe.Status) }

function XmppSendPing() {
    XMPP && 0 != XMPP.connected || reconnectXmpp();
    var e = $iq({ type: "get", id: XMPP.getUniqueId(), to: XmppDomain, from: XMPP.jid });
    e.c("ping", { xmlns: "urn:xmpp:ping" }), XMPP.sendIQ(e, function(e) {}, function(e) { console.warn("Error in Ping", e) }, 3e4), XMPP.ping = window.setTimeout(function() { XmppSendPing() }, 45e3)
}

function XmppSetMyPresence(e, t, n) {
    if (XMPP && 0 != XMPP.connected) {
        console.log("Setting My Own Presence to: " + e + "(" + t + ")"), "" == t && (t = lang.default_status), $("#regStatus").html('<i class="fa fa-comments"></i> ' + t);
        var i = $pres({ id: XMPP.getUniqueId(), from: XMPP.jid });
        if (i.c("show").t(e), t && "" != t && (i.root(), i.c("status").t(t)), 1 == n) {
            var a = getPicture("profilePicture").split(",")[1],
                o = $.md5(a);
            i.root(), i.c("x", { xmlns: "vcard-temp:x:update" }), o && i.c("photo", {}, o)
        }
        XMPP.sendPresence(i, function(e) {}, function(e) { console.warn("Error in XmppSetMyPresence", e) }, 3e4)
    } else console.warn("XMPP not connected")
}

function onPresenceChange(e) {
    var t = e.getAttribute("from"),
        n = e.getAttribute("to"),
        i = (e.getAttribute("subscription"), e.getAttribute("type") ? e.getAttribute("type") : "presence"),
        a = "",
        o = "",
        s = "";
    Strophe.forEachChild(e, "show", function(e) { a = e.textContent }), Strophe.forEachChild(e, "status", function(e) { o = e.textContent }), Strophe.forEachChild(e, "x", function(e) { s = e.getAttribute("xmlns") });
    var l = Strophe.getBareJidFromJid(t);
    if (t == n) return !0;
    var r = FindBuddyByJid(l);
    return null == r ? (console.warn("Buddy Not Found: ", l), !0) : "subscribe" == i ? (console.log("Presence: " + r.CallerIDName + " requesting subscrption"), XmppConfirmSubscription(r), XmppSendSubscriptionRequest(r), UpdateBuddyList(), !0) : "subscribed" == i ? (console.log("Presence: " + r.CallerIDName + " confimed subscrption"), UpdateBuddyList(), !0) : "unavailable" == i ? (console.log("Presence: " + r.CallerIDName + " unavailable"), UpdateBuddyList(), !0) : ("vcard-temp:x:update" == s && (console.log("Presence: " + r.ExtNo + " - " + r.CallerIDName + " vCard change"), XmppGetBuddyVcard(r), UpdateBuddyList()), "" != a && (console.log("Presence: " + r.ExtNo + " - " + r.CallerIDName + " is now: " + a + "(" + o + ")"), r.presence = a, r.presenceText = "" == o ? lang.default_status : o, UpdateBuddyList()), !0)
}

function XmppConfirmSubscription(e) {
    if (XMPP && 0 != XMPP.connected) {
        var t = $pres({ to: e.jid, from: XMPP.jid, type: "subscribed" });
        XMPP.sendPresence(t)
    } else console.warn("XMPP not connected")
}

function XmppSendSubscriptionRequest(e) {
    if (XMPP && 0 != XMPP.connected) {
        var t = $pres({ to: e.jid, from: XMPP.jid, type: "subscribe" });
        XMPP.sendPresence(t)
    } else console.warn("XMPP not connected")
}

function XmppRemoveBuddyFromRoster(e) {
    if (XMPP && 0 != XMPP.connected) {
        var t = $iq({ type: "set", id: XMPP.getUniqueId(), from: XMPP.jid });
        t.c("query", { xmlns: "jabber:iq:roster" }), t.c("item", { jid: e.jid, subscription: "remove" }), null != e.jid ? (console.log("Removing " + e.CallerIDName + "  from roster..."), XMPP.sendIQ(t, function(e) {})) : console.warn("Missing JID", e)
    } else console.warn("XMPP not connected")
}

function XmppAddBuddyToRoster(e) {
    if (XMPP && 0 != XMPP.connected) {
        var t = $iq({ type: "set", id: XMPP.getUniqueId(), from: XMPP.jid });
        t.c("query", { xmlns: "jabber:iq:roster" }), t.c("item", { jid: e.jid, name: e.CallerIDName }), null != e.jid ? (console.log("Adding " + e.CallerIDName + "  to roster..."), XMPP.sendIQ(t, function(t) { XmppGetBuddyVcard(e), XmppSendSubscriptionRequest(e) })) : console.warn("Missing JID", e)
    } else console.warn("XMPP not connected")
}

function XmppGetBuddies() {
    if (XMPP && 0 != XMPP.connected) {
        var e = $iq({ type: "get", id: XMPP.getUniqueId(), from: XMPP.jid });
        e.c("query", { xmlns: "jabber:iq:roster" }), console.log("Getting Buddy List (roster)..."), XMPP.sendIQ(e, function(e) {
            Strophe.forEachChild(e, "query", function(e) {
                Strophe.forEachChild(e, "item", function(e) {
                    var t = e.getAttribute("jid"),
                        n = e.getAttribute("name"),
                        i = Strophe.getNodeFromJid(t),
                        a = i;
                    "" != XmppRealm && "" != XmppRealmSeperator && (a = i.split(XmppRealmSeperator, 2)[1]);
                    e.getAttribute("ask") && e.getAttribute("ask"), e.getAttribute("subscription") && e.getAttribute("subscription");
                    var o = t.indexOf("@" + XmppChatGroupService + ".") > -1,
                        s = FindBuddyByJid(t);
                    null == s ? (1 == o ? (console.log("Adding roster (group):", a, "-", n), s = MakeBuddy("group", !1, !1, !1, n, a, t)) : (console.log("Adding roster (xmpp):", a, "-", n), s = MakeBuddy("xmpp", !1, !1, !0, n, a, t)), XmppGetBuddyVcard(s)) : (console.log("Existing roster item:", a, "-", n), XmppGetBuddyVcard(s))
                })
            }), XmppSetMyPresence(getDbItem("XmppLastPresence", "chat"), getDbItem("XmppLastStatus", ""), !0), UpdateBuddyList()
        }, function(e) { console.warn("Error Getting Roster", e) }, 3e4)
    } else console.warn("XMPP not connected")
}

function onBuddySetRequest(e) { return console.log("onBuddySetRequest", e), !0 }

function onBuddyUpdate(e) { return !0 }

function RefreshBuddyData(e) {}

function XmppGetMyVcard() {
    if (XMPP && 0 != XMPP.connected) {
        var e = $iq({ type: "get", id: XMPP.getUniqueId(), from: XMPP.jid });
        e.c("vCard", { xmlns: "vcard-temp" }), XMPP.sendIQ(e, function(e) { console.log("XmppGetMyVcard Response: ", e) }, function(e) { console.warn("Error in XmppGetMyVcard", e) }, 3e4)
    } else console.warn("XMPP not connected")
}

function XmppSetMyVcard() {
    if (XMPP && 0 != XMPP.connected) {
        var e = getDbItem("profileVcard", null);
        if (null != e && "" != e) {
            e = JSON.parse(e);
            var t = getPicture("profilePicture").split(",")[1],
                n = $iq({ type: "set", id: XMPP.getUniqueId(), from: XMPP.jid });
            n.c("vCard", { xmlns: "vcard-temp" }), n.c("FN", {}, profileName), n.c("TITLE", {}, e.TitleDesc), n.c("TEL"), n.c("NUMBER", {}, profileUser), n.up(), n.c("TEL"), n.c("CELL", {}, e.Mobile), n.up(), n.c("TEL"), n.c("VOICE", {}, e.Number1), n.up(), n.c("TEL"), n.c("FAX", {}, e.Number2), n.up(), n.c("EMAIL"), n.c("USERID", {}, e.Email), n.up(), n.c("PHOTO"), n.c("TYPE", {}, "image/png"), n.c("BINVAL", {}, t), n.up(), n.c("JABBERID", {}, Strophe.getBareJidFromJid(XMPP.jid)), console.log("Sending vCard update"), XMPP.sendIQ(n, function(e) {}, function(e) { console.warn("Error in XmppSetMyVcard", e) }, 3e4)
        } else console.warn("No vCard created yet")
    } else console.warn("XMPP not connected")
}

function XmppGetBuddyVcard(e) {
    if (XMPP && 0 != XMPP.connected) {
        if (null != e && null != e.jid) {
            var t = $iq({ type: "get", id: XMPP.getUniqueId(), from: XMPP.jid, to: e.jid });
            t.c("vCard", { xmlns: "vcard-temp" }), XMPP.sendIQ(t, function(e) {
                var t = e.getAttribute("from");
                console.log("Got vCard for: " + t);
                var n = FindBuddyByJid(t);
                if (null != n) {
                    var i = "";
                    Strophe.forEachChild(e, "vCard", function(e) { Strophe.forEachChild(e, null, function(e) { "FN" == e.tagName && (n.CallerIDName = e.textContent), "TITLE" == e.tagName && (n.Desc = e.textContent), "JABBERID" == e.tagName && e.textContent != t && console.warn("JID does not match: ", e.textContent, t), "TEL" == e.tagName && (Strophe.forEachChild(e, "NUMBER", function(e) { e.textContent != n.ExtNo && console.warn("Subscribe Extension does not match: ", e.textContent, n.ExtNo) }), Strophe.forEachChild(e, "CELL", function(e) { n.MobileNumber = e.textContent }), Strophe.forEachChild(e, "VOICE", function(e) { n.ContactNumber1 = e.textContent }), Strophe.forEachChild(e, "FAX", function(e) { n.ContactNumber2 = e.textContent })), "EMAIL" == e.tagName && Strophe.forEachChild(e, "USERID", function(e) { n.Email = e.textContent }), "PHOTO" == e.tagName && Strophe.forEachChild(e, "BINVAL", function(e) { i = "data:image/png;base64," + e.textContent }) }) });
                    var a = {},
                        o = -1,
                        s = JSON.parse(localDB.getItem(profileUserID + "-Buddies"));
                    $.each(s.DataCollection, function(e, t) { if (t.uID == n.identity) return a = t, o = e, !1 }), -1 != o && (a.MobileNumber = n.MobileNumber, a.ContactNumber1 = n.ContactNumber1, a.ContactNumber2 = n.ContactNumber2, a.DisplayName = n.CallerIDName, a.Description = n.Desc, a.Email = n.Email, s.DataCollection[o] = a, localDB.setItem(profileUserID + "-Buddies", JSON.stringify(s))), "" != i && (console.log("Buddy: " + n.CallerIDName + " picture updated"), localDB.setItem("img-" + n.identity + "-" + n.type, i), $("#contact-" + n.identity + "-picture-main").css("background-image", "url(" + getPicture(n.identity, n.type, !0) + ")")), UpdateBuddyList()
                } else console.warn("Received a vCard for non-existing buddy", t)
            }, function(e) { console.warn("Error in XmppGetBuddyVcard", e) }, 3e4)
        }
    } else console.warn("XMPP not connected")
}

function onMessage(e) {
    var t = e.getAttribute("from"),
        n = Strophe.getBareJidFromJid(t),
        i = (e.getAttribute("to"), e.getAttribute("id")),
        a = FindBuddyByJid(n);
    if (null == a) return console.warn("Spam!"), !0;
    var o = !1,
        s = utcDateNow();
    Strophe.forEachChild(e, "delay", function(e) { "urn:xmpp:delay" == e.getAttribute("xmlns") && (o = !0, s = moment(e.getAttribute("stamp")).utc().format("YYYY-MM-DD HH:mm:ss UTC")) });
    var l = "";
    Strophe.forEachChild(e, "body", function(e) { l = e.textContent });
    var r = "";
    if (Strophe.forEachChild(e, "composing", function(e) { "http://jabber.org/protocol/chatstates" == e.getAttribute("xmlns") && (r = "composing") }), Strophe.forEachChild(e, "paused", function(e) { "http://jabber.org/protocol/chatstates" == e.getAttribute("xmlns") && (r = "paused") }), Strophe.forEachChild(e, "active", function(e) { "http://jabber.org/protocol/chatstates" == e.getAttribute("xmlns") && (r = "active") }), "composing" == r) return o || XmppShowComposing(a), !0;
    XmppHideComposing(a);
    var d = !1,
        c = "";
    Strophe.forEachChild(e, "replace", function(e) { "urn:xmpp:message-correct:0" == e.getAttribute("xmlns") && (d = !0, Strophe.forEachChild(e, "id", function(e) { c = e.textContent })) }), d && "" != c && (console.log("Message " + c + " for " + a.CallerIDName + " was corrected"), CorrectMessage(a, c, l));
    var u = "",
        p = "";
    if (Strophe.forEachChild(e, "x", function(e) { "jabber:x:event" == e.getAttribute("xmlns") && (Strophe.forEachChild(e, "delivered", function(e) { u = "delivered" }), Strophe.forEachChild(e, "displayed", function(e) { u = "displayed" }), Strophe.forEachChild(e, "id", function(e) { p = e.textContent })) }), "delivered" == u && "" != p) return console.log("Message " + p + " for " + a.CallerIDName + " was delivered"), MarkDeliveryReceipt(a, p, !0), !0;
    if ("displayed" == u && "" != p) return console.log("Message " + p + " for " + a.CallerIDName + " was displayed"), MarkDisplayReceipt(a, p, !0), !0;
    "" == l || (i ? (XmppSendDeliveryReceipt(a, i), AddMessageToStream(a, i, "MSG", l, s), UpdateBuddyActivity(a.identity), $("#stream-" + a.identity).is(":visible") && (MarkMessageRead(a, i), XmppSendDisplayReceipt(a, i)), RefreshStream(a), ActivateStream(a, l)) : console.warn("Sorry, messages must have an id ", e));
    return !0
}

function XmppShowComposing(e) { console.log("Buddy is composing a message..."), $("#contact-" + e.identity + "-chatstate").show(), $("#contact-" + e.identity + "-presence").hide(), $("#contact-" + e.identity + "-presence-main").hide(), $("#contact-" + e.identity + "-chatstate-menu").show(), $("#contact-" + e.identity + "-chatstate-main").show(), updateScroll(e.identity) }

function XmppHideComposing(e) { console.log("Buddy composing is done..."), $("#contact-" + e.identity + "-chatstate").hide(), $("#contact-" + e.identity + "-chatstate-menu").hide(), $("#contact-" + e.identity + "-chatstate-main").hide(), $("#contact-" + e.identity + "-presence").show(), $("#contact-" + e.identity + "-presence-main").show(), updateScroll(e.identity) }

function XmppSendMessage(e, t, n, i, a, o) {
    if (XMPP && 0 != XMPP.connected) {
        o || (o = "normal");
        var s = $msg({ to: e.jid, type: o, id: n, from: XMPP.jid });
        i && "" != i && (s.c("thread").t(i), s.up()), s.c("body").t(t), s.up(), s.c("active", { xmlns: "http://jabber.org/protocol/chatstates" }), s.up(), s.c("x", { xmlns: "jabber:x:event" }), s.c("delivered"), s.up(), s.c("displayed"), console.log("sending message..."), e.chatstate = "active", e.chatstateTimeout && window.clearTimeout(e.chatstateTimeout), e.chatstateTimeout = null;
        try { XMPP.send(s), MarkMessageSent(e, n, !1) } catch (t) { MarkMessageNotSent(e, n, !1) }
    } else console.warn("XMPP not connected")
}

function XmppStartComposing(e, t) {
    if (XMPP && 0 != XMPP.connected) {
        if (null != e.jid && "" != e.jid && (e.chatstateTimeout && window.clearTimeout(e.chatstateTimeout), e.chatstateTimeout = window.setTimeout(function() { XmppPauseComposing(e, t) }, 1e4), !e.chatstate || "composing" != e.chatstate)) {
            var n = $msg({ to: e.jid, from: XMPP.jid });
            t && "" != t && (n.c("thread").t(t), n.up()), n.c("composing", { xmlns: "http://jabber.org/protocol/chatstates" }), console.log("you are composing a message..."), e.chatstate = "composing", XMPP.send(n)
        }
    } else console.warn("XMPP not connected")
}

function XmppPauseComposing(e, t) {
    if (XMPP && 0 != XMPP.connected) {
        if (null != e.jid && "" != e.jid && (!e.chatstate || "paused" != e.chatstate)) {
            var n = $msg({ to: e.jid, from: XMPP.jid });
            t && "" != t && (n.c("thread").t(t), n.up()), n.c("paused", { xmlns: "http://jabber.org/protocol/chatstates" }), console.log("You have paused your message..."), e.chatstate = "paused", e.chatstateTimeout && window.clearTimeout(e.chatstateTimeout), e.chatstateTimeout = null, XMPP.send(n)
        }
    } else console.warn("XMPP not connected")
}

function XmppSendDeliveryReceipt(e, t) {
    if (XMPP && 0 != XMPP.connected) {
        var n = $msg({ to: e.jid, from: XMPP.jid });
        n.c("x", { xmlns: "jabber:x:event" }), n.c("delivered"), n.up(), n.c("id").t(t), console.log("sending delivery notice for " + t + "..."), XMPP.send(n)
    } else console.warn("XMPP not connected")
}

function XmppSendDisplayReceipt(e, t) {
    if (XMPP && 0 != XMPP.connected) {
        var n = $msg({ to: e.jid, from: XMPP.jid });
        n.c("x", { xmlns: "jabber:x:event" }), n.c("displayed"), n.up(), n.c("id").t(t), console.log("sending display notice for " + t + "..."), XMPP.send(n)
    } else console.warn("XMPP not connected")
}

function onPingRequest(e) {
    var t = e.getAttribute("id"),
        n = e.getAttribute("to"),
        i = e.getAttribute("from"),
        a = $iq({ type: "result", id: t, to: i, from: n });
    return XMPP.send(a), !0
}

function onVersionRequest(e) {
    var t = e.getAttribute("id"),
        n = e.getAttribute("to"),
        i = e.getAttribute("from"),
        a = $iq({ type: "result", id: t, to: i, from: n });
    return a.c("query", { xmlns: "jabber:iq:version" }), a.c("name", null, "Browser Phone"), a.c("version", null, "0.0.1"), a.c("os", null, "Browser"), XMPP.send(a), !0
}

function onInfoQuery(e) { return console.log("onInfoQuery", e), !0 }

function onInfoQueryRequest(e) { console.log("onInfoQueryRequest", e); var t = ""; return Strophe.forEachChild(e, "query", function(e) { t = e.getAttribute("xmlns") }), console.log(t), !0 }

function onInfoQueryCommand(e) { console.log("onInfoQueryCommand", e); var t = ""; return Strophe.forEachChild(e, "query", function(e) { t = e.getAttribute("xmlns") }), console.log(t), !0 }

function XMPP_GetGroups() {
    var e = $iq({ type: "get", id: XMPP.getUniqueId(), to: XmppChatGroupService + "." + XmppDomain, from: XMPP.jid });
    e.c("query", { xmlns: "http://jabber.org/protocol/disco#items", node: "http://jabber.org/protocol/muc#rooms" }), XMPP.sendIQ(e, function(e) { console.log("GetGroups Response: ", e) }, function(e) { console.warn("Error in GetGroups", e) }, 3e4)
}

function XMPP_GetGroupMembers() {
    var e = $iq({ type: "get", id: XMPP.getUniqueId(), to: "directors@" + XmppChatGroupService + "." + XmppDomain, from: XMPP.jid });
    e.c("query", { xmlns: "http://jabber.org/protocol/disco#items" }), XMPP.sendIQ(e, function(e) { console.log("GetGroupMembers Response: ", e) }, function(e) { console.warn("Error in GetGroupMembers", e) }, 3e4)
}

function XMPP_JoinGroup() {
    var e = $pres({ id: XMPP.getUniqueId(), from: XMPP.jid, to: "directors@" + XmppChatGroupService + "." + XmppDomain + "/nickname" });
    e.c("x", { xmlns: "http://jabber.org/protocol/muc" }), XMPP.sendPresence(e, function(e) { console.log("JoinGroup Response: ", e) }, function(e) { console.warn("Error in Set Presence", e) }, 3e4)
}

function XMPP_QueryMix() {
    var e = $iq({ type: "get", id: XMPP.getUniqueId(), from: XMPP.jid });
    e.c("query", { xmlns: "http://jabber.org/protocol/disco#info" }), XMPP.sendIQ(e, function(e) { console.log("XMPP_QueryMix Response: ", e) }, function(e) { console.warn("Error in XMPP_QueryMix", e) }, 3e4)
}
DetectDevices(), window.setInterval(function() { DetectDevices() }, 1e4);
var XMPP = null,
    reconnectXmpp = function() {
        console.log("Connect/Reconnect XMPP connection..."), XMPP && XMPP.disconnect(""), XMPP && XMPP.reset();
        var e = "wss://" + XmppServer + ":" + XmppWebsocketPort + XmppWebsocketPath,
            t = profileUser + "@" + XmppDomain;
        "" != XmppRealm && XmppRealmSeperator && (t = XmppRealm + XmppRealmSeperator + t);
        var n = SipPassword;
        XMPP = null, "" != XmppDomain && "" != XmppServer && "" != XmppWebsocketPort && "" != XmppWebsocketPath && ((XMPP = new Strophe.Connection(e)).addHandler(onPingRequest, "urn:xmpp:ping", "iq", "get"), XMPP.addHandler(onVersionRequest, "jabber:iq:version", "iq", "get"), XMPP.addHandler(onPresenceChange, null, "presence", null), XMPP.addHandler(onMessage, null, "message", null), console.log("XMPP connect..."), XMPP.connect(t, n, onStatusChange))
    };